<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮生孰来</title>
  
  
  <link href="http://10185102110.github.io/atom.xml" rel="self"/>
  
  <link href="http://10185102110.github.io/"/>
  <updated>2021-12-03T06:31:22.880Z</updated>
  <id>http://10185102110.github.io/</id>
  
  <author>
    <name>Ave Bai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java实现的X0语言编译器</title>
    <link href="http://10185102110.github.io/2021/12/01/X0%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>http://10185102110.github.io/2021/12/01/X0%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <published>2021-12-01T12:06:36.000Z</published>
    <updated>2021-12-03T06:31:22.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>编译器是将高级语言编写的程序转换成能在一台计算机上执行的等价目标代码或机器语言程序的软件系统。可以扩展到包含将一种高级语言程序转换成另一种高级语言程序的系统，或者从一种机器语言程序转换成另一种机器语言程序的系统等等。</p><p>本项目由 Java 语言编写完成，可以将事先定义好的 X0 语言转换为中间语言（采用四元式），进一步转换成目标语言（与 PL/0 语言相同的指令代码），并能用解释器运行。本项目支持代码文件的读取，编译代码的键盘输入，词法分析、语法分析、出错处理、中间代码、目标代码、符号表和运行结果的输出。</p><p>完整说明见设计文档。</p><h2 id="编译器系统结构"><a href="#编译器系统结构" class="headerlink" title="编译器系统结构"></a>编译器系统结构</h2><p><img src="0.png" alt=""></p><p>编译器的词法分析、语法分析、语义分析与中间代码生成、目标代码生成是按顺序依次进行的，语法分析通过后转入语法分析，若词法分析未通过则无法进行语法分析，语法分析通过后转入语义分析与中间代码生成，最后执行目标代码生成。</p><h1 id="X0语言文法"><a href="#X0语言文法" class="headerlink" title="X0语言文法"></a>X0语言文法</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>该语言变量有整型、整型一维数组、字符型，原则是先声明再使用。</p></li><li><p>语句有 6 种：if 语句、while 语句、read 语句、write 语句、compound 语句和 expression 语句。if 语句没有悬挂 else 二义性。输入/输出语句由保留字 read 和 write 开始。read 语句一次只读一个变量，write 语句一句只写出一个表达式。</p></li><li><p>X0 语言有两类表达式：布尔表达式和算术表达式。算术运算是左结合的，具有通常的优先关系。比较运算是非结合性的：每个没有括号的表达式只允许一种比较运算。比较运算的优先级比算术运算低。</p></li><li><p>X0 语言没有过程或函数，因此没有调用。</p></li><li><p>注释符：多行注释用 /*…*/ 括起，单行注释用 // 开头。词法分析程序并不输出注释，在词法分析阶段，注释的内容将被删掉。</p></li><li><p>终结符：采用 #，在词法分析阶段隐性添加，并用于 LL(1) 语法分析。</p></li><li><p>扩展：</p><p>1.for 语句。采用 Java 格式，例如 for(i=0;i&lt;10;i++){}。</p><p>2.求余运算符 %，优先级同乘除。</p></li></ul><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>采用 EBNF 描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">program = &quot;main&quot; &quot;&#123;&quot; declaration_list statement_list &quot;&#125;&quot;.</span><br><span class="line">declaration_list = [declaration_list declaration_stat | declaration_stat]  .</span><br><span class="line">declaration_stat = type ID &quot;;&quot; | type ID &quot;[&quot; NUM &quot;]&quot; &quot;;&quot;.</span><br><span class="line">type = &quot;int&quot; | &quot;char&quot;.</span><br><span class="line">var = ID | ID &quot;[&quot; expression &quot;]&quot;.</span><br><span class="line">statement_list = statement_list statement.</span><br><span class="line">statement = if_stat | while_stat | read_stat | write_stat | compound_stat | expression_stat.</span><br><span class="line">if_stat = &quot;if&quot; &quot;(&quot; expression &quot;)&quot; statement [ &quot;else&quot; statement].</span><br><span class="line">while_stat = &quot;while&quot; &quot;(&quot; expression &quot;)&quot; statement .</span><br><span class="line">write_stat = &quot;write&quot; expression &quot;;&quot; .</span><br><span class="line">read_stat = &quot;read&quot; var &quot;;&quot;.</span><br><span class="line">compound_stat = &quot;&#123;&quot; statement_list &quot;&#125;&quot;.</span><br><span class="line">expression_stat = expression &quot;;&quot; | &quot;;&quot;.</span><br><span class="line">expression = var &quot;=&quot; expression | simple_expr.</span><br><span class="line">simple_expr = additive_expr | additive_expr (&quot;&gt;&quot; | &quot;&lt;&quot; | &quot;&gt;=&quot; | &quot;&lt;=&quot; | &quot;==&quot; | &quot;!=&quot; ) additive_expr.</span><br><span class="line">additive_expr = term &#123;(&quot;+&quot;|&quot;-&quot;) term &#125;.</span><br><span class="line">term = factor &#123;(&quot;*&quot;|&quot;/&quot;) factor &#125;.</span><br><span class="line">factor = &quot;(&quot; expression &quot;)&quot;| var | NUM.</span><br></pre></td></tr></table></figure><h2 id="语法图"><a href="#语法图" class="headerlink" title="语法图"></a>语法图</h2><p><img src="5.png" alt=""></p><p><img src="4.png" alt=""><img src="3.png" alt=""></p><p><img src="2.png" alt=""><img src="1.png" alt=""></p><h2 id="LL1文法"><a href="#LL1文法" class="headerlink" title="LL1文法"></a>LL1文法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">S -&gt; main&#123;AU&#125;</span><br><span class="line">A -&gt; XA | $</span><br><span class="line">U -&gt; U&#x27;U</span><br><span class="line">U&#x27; -&gt; B | R | $</span><br><span class="line">X -&gt; YZ;</span><br><span class="line">Y -&gt; int | char | bool</span><br><span class="line">Z -&gt; idZ&#x27;</span><br><span class="line">Z&#x27; -&gt; [num] | $</span><br><span class="line">R -&gt; id=L;</span><br><span class="line">L -&gt; TL&#x27;</span><br><span class="line">L&#x27; -&gt; +L | -L | $</span><br><span class="line">T -&gt; FT&#x27;</span><br><span class="line">T&#x27; -&gt; *T | /T | %T | $</span><br><span class="line">F -&gt; id | num | (L)</span><br><span class="line">E -&gt; G</span><br><span class="line">G -&gt; LDL</span><br><span class="line">D -&gt; &lt; | &gt; | == | != | &lt;= | &gt;=</span><br><span class="line">G -&gt; (E)</span><br><span class="line">B -&gt; if (E)&#123;U&#125;</span><br><span class="line">B -&gt; while(E)&#123;U&#125;</span><br><span class="line">B -&gt; for(R;G;Q)&#123;U&#125;</span><br><span class="line">Q -&gt; idO | $</span><br><span class="line">O -&gt; ++ | -- | $</span><br><span class="line">B -&gt; write L;</span><br><span class="line">B -&gt; read id;</span><br></pre></td></tr></table></figure><h2 id="判断是否符合两条限制规则"><a href="#判断是否符合两条限制规则" class="headerlink" title="判断是否符合两条限制规则"></a>判断是否符合两条限制规则</h2><p>限制规则如下：</p><ol><li><p>找出图中每一个分支点，考察每一个分支点的分支的头符号是否相异；</p></li><li><p>找出图中每一个透明结构（无需读入一个符号就可以贯通），考察每一个透明结构的头符号集合和其跟随符号集合是否相异。</p></li></ol><p>经过分析上述语法图中符合两条限制规则。</p><h2 id="过程调用相关图"><a href="#过程调用相关图" class="headerlink" title="过程调用相关图"></a>过程调用相关图</h2><p><img src="6.png" alt=""></p><h2 id="语法出错定义"><a href="#语法出错定义" class="headerlink" title="语法出错定义"></a>语法出错定义</h2><ul><li>语法分析步骤数过多</li><li>语法错误，缺少xx符号</li><li>没有主函数</li><li>非法标识符</li><li>非法语句</li><li>非法数据类型</li><li>声明缺少标识符</li><li>未声明数组长度</li><li>标识符未声明</li><li>非法标识符，不能write</li><li>非法标识符，不能read</li><li>不能进行布尔运算的数据类型</li><li>非法布尔运算符</li><li>不能进行算术运算的数据类型</li><li>for 格式错误，循环因子需要++或—</li><li>词法分析未通过，无法进行语法分析</li></ul><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><h2 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h2><p>用一个数组存放指令代码，最多存储 200 个指令。</p><p>指令以字符串的形式储存，格式为：序号+指令名称+地址+指令数据。</p><h2 id="指令系统及其解释"><a href="#指令系统及其解释" class="headerlink" title="指令系统及其解释"></a>指令系统及其解释</h2><p>指令格式同 PL/0 虚拟机。即：</p><p>虚拟机指令结构 每条虚拟机指令包括三个字段： </p><ol><li><p>f：虚拟机指令名称</p></li><li><p>l：引用层与声明层的层次差或某些相近功能指令的区分码 </p></li><li><p>a：某些指令可传入的参数或运算指令的区分码</p></li></ol><div class="table-container"><table><thead><tr><th>LIT  0,a</th><th>将数a置入栈顶</th></tr></thead><tbody><tr><td>LOD 0,a</td><td>将 0,a 形成的栈地址变量值置入栈顶</td></tr><tr><td>STO 0,a</td><td>将栈顶值存到 0,a 形成的栈地址变量</td></tr><tr><td>INT  0,a</td><td>预留 a 个存储位置</td></tr><tr><td>JMP 0,a</td><td>无条件转移</td></tr><tr><td>JPC 0,a</td><td>条件转移</td></tr><tr><td>OPR 0,a</td><td>算术关系运算符</td></tr><tr><td>当 a = 0</td><td>返回调用程序</td></tr><tr><td>当 a = 2</td><td>相加</td></tr><tr><td>当 a = 3</td><td>相减</td></tr><tr><td>当 a = 4</td><td>相乘</td></tr><tr><td>当 a = 5</td><td>相除</td></tr><tr><td>当 a = 6</td><td>自加</td></tr><tr><td>当 a = 7</td><td>自减</td></tr><tr><td>当 a = 8</td><td>判相等</td></tr><tr><td>当 a = 9</td><td>判不等</td></tr><tr><td>当 a = 10</td><td>判小于</td></tr><tr><td>当 a = 11</td><td>判小于等于</td></tr><tr><td>当 a = 12</td><td>判大于</td></tr><tr><td>当 a = 13</td><td>判大于等于</td></tr><tr><td>当 a = 14</td><td>求余</td></tr><tr><td>当 a = 15</td><td>输出</td></tr></tbody></table></div><p>read 没有专门的指令，将翻译为 LIT+STO。</p><h2 id="中间代码"><a href="#中间代码" class="headerlink" title="中间代码"></a>中间代码</h2><p>编译器采用四元式作为中间代码，格式为：序号 + (运算符,操作数1,操作数 2,结果/跳转地址)。</p><p>其中运算符为 FJ 时表示 if、for、while 语句块的开始，若不满足条件则跳转到 RJ 的下一句；RJ 表示 if、for、while 语句块一次循环的结束，并无条件跳转到语句块的开始。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>Windows 10 家庭版</p><p>IntelliJ IDEA 2021.2</p><p>jdk 1.8.0_301</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h3 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h3><ul><li><p>测试目标：求 2~100 之间的全部素数</p></li><li><p>源程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* 求2~100之间的全部素数*/</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">    int num;</span><br><span class="line">    int i;    // 用于遍历</span><br><span class="line">    int fac;</span><br><span class="line">    int tag;  // 布尔符号</span><br><span class="line">    i = 2;</span><br><span class="line">    num = 100;</span><br><span class="line">    while(i &lt;= num)&#123;</span><br><span class="line">        tag = 0;</span><br><span class="line">        fac = 2;</span><br><span class="line">        while(fac &lt; i)&#123;</span><br><span class="line">            if(i%fac == 0)&#123;</span><br><span class="line">                tag = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            fac = fac+1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(tag == 0)&#123;</span><br><span class="line">            write i;  // 输出素数</span><br><span class="line">        &#125;</span><br><span class="line">        i = i+1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试步骤：</p><ol><li><p>运行主程序</p></li><li><p>点击符号表</p></li><li>点击词法分析</li><li>点击语法分析</li><li>点击中间代码</li><li>点击目标代码</li><li>点击运行结果</li></ol></li><li><p>测试结果：</p><p><img src="8.png" alt=""></p><p><img src="9.png" alt=""></p><p><img src="10.png" alt=""></p><p><img src="11.png" alt=""></p><p><img src="12.png" alt=""></p><p><img src="13.png" alt=""></p></li></ul><h3 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h3><ul><li><p>测试目标：求两个数的最小公倍数</p></li><li><p>源程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* 求两个数的最小公倍数*/</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    read a;</span><br><span class="line">    read b;</span><br><span class="line">    if(a &lt; b)&#123;</span><br><span class="line">        //令a为较大的数</span><br><span class="line">        c = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">    while (x % y != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x + a;</span><br><span class="line">    &#125;</span><br><span class="line">    write x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试步骤：</p><ol><li>运行主程序</li><li><p>点击选择文件，选中 LCM.txt 文件，点击确定</p></li><li><p>点击符号表</p></li><li>点击词法分析</li><li>点击语法分析</li><li>点击中间代码</li><li>点击目标代码，在弹窗内依次输入 8 和 9</li><li>点击运行结果</li></ol></li><li><p>测试结果：</p><p>略，见测试文档。</p></li></ul><h3 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a>No.3</h3><ul><li><p>测试目标：测试 for 语句的正确性，包括嵌套 for 语句</p></li><li><p>源程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* for 循环示例*/</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int j;</span><br><span class="line">    int k;</span><br><span class="line">    for(i = 0; i &lt; 3; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j = 0;j &lt; 3;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            write j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(k = 9; k &gt;= 0; k--)</span><br><span class="line">    &#123;</span><br><span class="line">        write k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试步骤：</p><ol><li>运行主程序</li><li><p>点击选择文件，选中 for.txt 文件，点击确定</p></li><li><p>点击符号表</p></li><li>点击词法分析</li><li>点击语法分析</li><li>点击中间代码</li><li>点击目标代码</li><li>点击运行结果</li></ol></li><li><p>测试结果：</p><p>略，见测试文档。</p></li></ul><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/10185102110/X0-compiler">https://github.com/10185102110/X0-compiler</a></p><p>文档不便公开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;编译器是将高级语言编写的程序转换成能在一台计算机上执行的等价目标代码或机器语言程序的软件系统。可以扩展到包含将一种</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://10185102110.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JUnit基础</title>
    <link href="http://10185102110.github.io/2021/11/26/JUnit/"/>
    <id>http://10185102110.github.io/2021/11/26/JUnit/</id>
    <published>2021-11-26T12:06:36.000Z</published>
    <updated>2021-12-03T06:31:58.579Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JUnit 是一个 Java 语言的单元测试框架，目前已被主流平台集成。</p><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><p>JUnit 5 在运行时要求 Java 8 以上，但仍然可以测试使用 JDK 的以前版本编译的代码。</p><p>maven 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注解（Annotations）"><a href="#注解（Annotations）" class="headerlink" title="注解（Annotations）"></a>注解（Annotations）</h1><p>Junit5 所有支持的注解都在包 <code>org.junit.jupiter.api</code> 下。</p><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Test</td><td>表示方法是测试方法。这个注解不能声明任何属性。</td></tr><tr><td>@ParameterizedTest</td><td>表示方法是参数化测试。</td></tr><tr><td>@RepeatedTest</td><td>表示方法可以按照指定次数重复执行。</td></tr><tr><td>@TestFactory</td><td>表示方法是用于动态测试的测试工厂。</td></tr><tr><td>@TestTemplate</td><td>表示方法是为测试用例设计的模板，根据注册提供程序返回的调用上下文的数量进行多次调用。</td></tr><tr><td>@TestClassOrder</td><td>用于@Nested注解的测试类，可以配置测试类执行顺序。</td></tr><tr><td>@TestMethodOrder</td><td>用于为测试类配置测试方法执行顺序。</td></tr><tr><td>@TestInstance</td><td>用于为测试类配置测试实例生命周期。</td></tr><tr><td>@DisplayName</td><td>为测试类或测试方法声明自定义的显示名称。</td></tr><tr><td>@DisplayNameGeneration</td><td>为测试类声明一个自定义的显示名称生成器。</td></tr><tr><td>@BeforeEach</td><td>表示方法应该在当前类的每个@Test，@RepeatedTest，@ParameterizedTest或@TestFactory方法之前执行。</td></tr><tr><td>@AfterEach</td><td>表示方法应该在当前类的每个@Test，@RepeatedTest，@ParameterizedTest或@TestFactory方法之后执行。</td></tr><tr><td>@BeforeAll</td><td>表示方法应该在当前类的所有@Test，@RepeatedTest，@ParameterizedTest和@TestFactory方法之前执行。</td></tr><tr><td>@AfterAll</td><td>表示方法应该在当前类的所有@Test，@RepeatedTest，@ParameterizedTest和@TestFactory方法之后执行。</td></tr><tr><td>@Nested</td><td>表示一个非静态的嵌套测试类。除非使用“per-class”测试实例生命周期，否则@BeforeAll和@AfterAll方法不能直接在@Nested测试类中使用。</td></tr><tr><td>@Tag</td><td>在类或方法级别声明标签，用于过滤测试。</td></tr><tr><td>@Disabled</td><td>用于禁用测试类或测试方法。</td></tr><tr><td>@Timeout</td><td>用于测试方法、测试工厂、测试模板或生命周期方法，在其执行超过指定时间时失败。</td></tr><tr><td>@ExtendWith</td><td>用于注册自定义扩展。</td></tr><tr><td>@RegisterExtension</td><td>用于通过字段以编程方式注册扩展。</td></tr><tr><td>@TempDir</td><td>用于在生命周期方法或测试方法中通过字段注入或参数注入临时目录。</td></tr></tbody></table></div><p><strong>参数化测试</strong>使用 @ParameterizedTest 注解代替 @Test，可以使用不同的参数多次运行同一个测试方法。但是必须至少声明一个参数源，然后在测试方法中使用这些参数。配合 @ParameterizedTest 使用的参数源注解如下：</p><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@ValueSource</td><td>最简单的参数源。可以指定一个一维数组，并且在参数化测试时提供单个参数。</td></tr><tr><td>@NullSource</td><td>为参数化测试方法提供一个空参数，不能用于基本类型参数。</td></tr><tr><td>@EmptySource</td><td>为参数化测试方法提供一个空参数，用于以下类型的参数: java.lang.String, java.util.List, java.util.Set, java.util.Map, primitive arrays , object arrays，但是不支持它们的子类型。</td></tr><tr><td>@NullAndEmptySource</td><td>一个组合注释，结合了@NullSource和@EmptySource的功能。</td></tr><tr><td>@EnumSource</td><td>提供一种使用枚举常量的方便方法。</td></tr><tr><td>@MethodSource</td><td>可以引用测试类或外部类的一个或多个工厂方法。</td></tr><tr><td>@CsvSource</td><td>可以用逗号分隔的值来表达参数列表。通过value属性提供的每个字符串表示一个CSV行，并导致对参数化测试的一次调用。</td></tr><tr><td>@CsvFileSource</td><td>使用类路径或本地文件系统中 CSV 文件(逗号分隔的)作为参数源，文件中的每一行都会导致对参数化测试的一次调用。</td></tr><tr><td>@ArgumentsSource</td><td>用来指定一个自定义的、可重用的ArgumentsProvider（必须声明为顶级类或静态嵌套类）。</td></tr></tbody></table></div><h1 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h1><h2 id="测试类和方法"><a href="#测试类和方法" class="headerlink" title="测试类和方法"></a>测试类和方法</h2><p>测试类（Test Class）是至少包含一个测试方法的任意顶级类、静态成员类或者 @Nested 注解的类。测试类不能是抽象的，且必须有一个构造函数。</p><p>测试方法（Test Method）是直接使用 @Test、@RepeatedTest、@ParameterizedTest、@TestFactory 或 @TestTemplate 或者使用这些注解组合的元注解的方法。</p><p>生命周期方法（Lifecycle Method）是任意被 @BeforeAll, @AfterAll, @BeforeEach 或 @AfterEach 注解的方法。</p><p>一个标准的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.fail;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">succeedingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fail(<span class="string">&quot;a failing test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled(&quot;for demonstration purposes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">skippedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// not executed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">abortedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(<span class="string">&quot;abc&quot;</span>.contains(<span class="string">&quot;Z&quot;</span>));</span><br><span class="line">        fail(<span class="string">&quot;test should have been aborted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDownAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示名称（Display-Names）"><a href="#显示名称（Display-Names）" class="headerlink" title="显示名称（Display Names）"></a>显示名称（Display Names）</h2><p>测试类和测试方法可以声明自定义显示名称：带有空格、特殊字符甚至表情符号，由测试运行器和测试报告显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;A special test case&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayNameDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;Custom test name containing spaces&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithDisplayNameContainingSpaces</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;╯°□°）╯&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithDisplayNameContainingSpecialCharacters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;😱&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithDisplayNameContainingEmoji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还提供了两种方法自动生成展示名称：</p><ul><li>@DisplayNameGeneration，将 value 设置为 ReplaceUnderscores 时，会把方法名的所有下划线替换为空格显示。</li><li>@IndicativeSentencesGeneration，测试类名+连接符+测试方法名，并且类名和方法名的下划线都会被替换成空格。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayNameGeneration;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayNameGenerator;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.IndicativeSentencesGeneration;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayNameGeneratorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A_year_is_not_supported</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_zero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@DisplayName(&quot;A negative value for year is not supported by the leap year computation.&quot;)</span></span><br><span class="line">        <span class="meta">@ParameterizedTest(name = &quot;For example, year &#123;0&#125; is not supported.&quot;)</span></span><br><span class="line">        <span class="meta">@ValueSource(ints = &#123; -1, -4 &#125;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_negative</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@IndicativeSentencesGeneration(separator = &quot; -&gt; &quot;, generator = DisplayNameGenerator.ReplaceUnderscores.class)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A_year_is_a_leap_year</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_divisible_by_4_but_not_by_100</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ParameterizedTest(name = &quot;Year &#123;0&#125; is a leap year.&quot;)</span></span><br><span class="line">        <span class="meta">@ValueSource(ints = &#123; 2016, 2020, 2048 &#125;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_one_of_the_following_years</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="断言（Assertions）"><a href="#断言（Assertions）" class="headerlink" title="断言（Assertions）"></a>断言（Assertions）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMillis;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMinutes;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertAll;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertNotNull;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertThrows;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTimeout;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssertTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">standardAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        assertNotEquals(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言期望数组等于实际数组,数组中元素的数量和顺序必须相同</span></span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        assertArrayEquals(arr1,arr2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言期望和实际的可迭代项高度相等,集合中元素的数量和顺序必须相同</span></span><br><span class="line">        Iterable&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">        Iterable&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">        assertIterableEquals(list1, list2);</span><br><span class="line"></span><br><span class="line">        assertTrue(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sameObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言预期和实际是否引用同一对象</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        assertNotSame(s1,s2);</span><br><span class="line">        assertSame(s1,s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">groupedAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言组会报告所有错误</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person().getDefaultPerson();</span><br><span class="line">        assertAll(<span class="string">&quot;person&quot;</span>,</span><br><span class="line">                () -&gt; assertEquals(<span class="string">&quot;John&quot;</span>, person.getFirstName()),</span><br><span class="line">                () -&gt; assertEquals(<span class="string">&quot;Doe&quot;</span>, person.getLastName())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dependentAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在一个代码块内，如果一个断言失败，之后的代码会被跳过</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person().getDefaultPerson();</span><br><span class="line">        assertAll(<span class="string">&quot;properties&quot;</span>,</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    String firstName = person.getFirstName();</span><br><span class="line">                    assertNotNull(firstName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 前面的断言有效才执行</span></span><br><span class="line">                    assertAll(<span class="string">&quot;first name&quot;</span>,</span><br><span class="line">                            () -&gt; assertTrue(firstName.startsWith(<span class="string">&quot;J&quot;</span>)),</span><br><span class="line">                            () -&gt; assertTrue(firstName.endsWith(<span class="string">&quot;n&quot;</span>))</span><br><span class="line">                    );</span><br><span class="line">                &#125;,</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    String lastName = person.getLastName();</span><br><span class="line">                    assertNull(lastName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 前面的断言无效，不执行</span></span><br><span class="line">                    assertAll(<span class="string">&quot;last name&quot;</span>,</span><br><span class="line">                            () -&gt; assertTrue(lastName.startsWith(<span class="string">&quot;D&quot;</span>)),</span><br><span class="line">                            () -&gt; assertTrue(lastName.endsWith(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exceptionTesting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言所提供的Executable的执行将引发expectedType的异常并返回该异常。</span></span><br><span class="line">        Throwable exception = assertThrows(IllegalArgumentException.class, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;a message&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        assertEquals(<span class="string">&quot;a message&quot;</span>, exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果测试用例中的给定任务花费的时间超过指定的持续时间，则测试将失败。</span></span><br><span class="line">        assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceededWithResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言成功则返回对象。</span></span><br><span class="line">        String actualResult = assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;a result&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        assertEquals(<span class="string">&quot;a result&quot;</span>, actualResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceededWithMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言成功并返回函数执行的结果</span></span><br><span class="line">        String actualGreeting = assertTimeout(ofMinutes(<span class="number">2</span>), AssertTest::greeting);</span><br><span class="line">        assertEquals(<span class="string">&quot;Hello, World!&quot;</span>, actualGreeting);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutExceeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 超时，断言失败</span></span><br><span class="line">        assertTimeout(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutExceededWithPreemptiveTermination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 超时，断言失败</span></span><br><span class="line">        assertTimeoutPreemptively(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">            <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> firstName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">getDefaultPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;ryo&quot;</span>, <span class="string">&quot;12222&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-Kotlin-的断言"><a href="#支持-Kotlin-的断言" class="headerlink" title="支持 Kotlin 的断言"></a>支持 Kotlin 的断言</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-kotlin">https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-kotlin</a></p><h3 id="第三方断言库"><a href="#第三方断言库" class="headerlink" title="第三方断言库"></a>第三方断言库</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-third-party">https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-third-party</a></p><h2 id="假设（Assumptions）"><a href="#假设（Assumptions）" class="headerlink" title="假设（Assumptions）"></a>假设（Assumptions）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumingThat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssumptionsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testOnlyOnWindowsNT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设正确，如果失败则将第二个参数作为失败提示</span></span><br><span class="line">        assumeTrue(<span class="string">&quot;Windows&quot;</span>.equals(System.getenv(<span class="string">&quot;OS&quot;</span>)),</span><br><span class="line">                () -&gt; <span class="string">&quot;环境不匹配，当前环境:&quot;</span> + System.getenv(<span class="string">&quot;OS&quot;</span>));</span><br><span class="line">        <span class="comment">//System.getenv()读取当前系统环境的环境变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testInAllEnvironments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一个参数正确才执行第二个参数</span></span><br><span class="line">        assumingThat(<span class="string">&quot;Windows_NT&quot;</span>.equals(System.getenv(<span class="string">&quot;OS&quot;</span>)),</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 只有在Windows_NT环境上执行</span></span><br><span class="line">                    assertEquals(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在所有环境下执行</span></span><br><span class="line">        assertEquals(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用（Disabling-Tests）"><a href="#禁用（Disabling-Tests）" class="headerlink" title="禁用（Disabling Tests）"></a>禁用（Disabling Tests）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用类</span></span><br><span class="line"><span class="meta">@Disabled</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisabledClassDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWillBeSkipped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnableClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用方法</span></span><br><span class="line">    <span class="meta">@Disabled</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWillBeSkipped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件执行（Conditional-Test-Execution）"><a href="#条件执行（Conditional-Test-Execution）" class="headerlink" title="条件执行（Conditional Test Execution）"></a>条件执行（Conditional Test Execution）</h2><h3 id="操作系统条件"><a href="#操作系统条件" class="headerlink" title="操作系统条件"></a>操作系统条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledOnOs;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledOnOs;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.OS.LINUX;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.OS.MAC;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.OS.WINDOWS;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperateSysCondition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnOs(WINDOWS)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnWindows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只在Windows执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestOnWin</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testOnWin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据已经有的注解，组合而成的新注解，功能同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnOs(&#123; LINUX, MAC &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLinuxOrMac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledOnOs(WINDOWS)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnWindows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在windows禁用该用例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnOs(WINDOWS)</span></span><br><span class="line">    <span class="meta">@interface</span> TestOnWin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-环境条件"><a href="#Java-环境条件" class="headerlink" title="Java 环境条件"></a>Java 环境条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledOnJre;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledOnJre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.JRE.JAVA_10;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.JRE.JAVA_8;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.JRE.JAVA_9;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JRECondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnJre(JAVA_8)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnJava8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnJre(&#123; JAVA_9, JAVA_10 &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onJava9Or10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledOnJre(JAVA_9)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnJava9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统属性条件"><a href="#系统属性条件" class="headerlink" title="系统属性条件"></a>系统属性条件</h3><p>系统属性 named 的值是否匹配 matches 的值，匹配就启用测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledIfSystemProperty;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledIfSystemProperty;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemPropertyCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledIfSystemProperty(named = &quot;java.vm.specification.version&quot;, matches = &quot;1.8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnVM1_8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印所有系统属性值</span></span><br><span class="line">        System.getProperties().forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot; = &quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledIfSystemProperty(named = &quot;java.vm.specification.version&quot;, matches = &quot;1.8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnVM1_8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境变量条件"><a href="#环境变量条件" class="headerlink" title="环境变量条件"></a>环境变量条件</h3><p>系统环境变量 named 的值是否匹配 matches 的值，匹配就启用测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnvVarCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledIfEnvironmentVariable(named = &quot;OS&quot;, matches = &quot;Windows_NT&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnWindowsNT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledIfEnvironmentVariable(named = &quot;OS&quot;, matches = &quot;Windows_NT&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnWindowsNT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义条件"><a href="#自定义条件" class="headerlink" title="自定义条件"></a>自定义条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledIf;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledIf;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCondition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledIf(&quot;customCondition&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledIf(&quot;customCondition&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标签和过滤（Tagging-and-Filtering）"><a href="#标签和过滤（Tagging-and-Filtering）" class="headerlink" title="标签和过滤（Tagging and Filtering）"></a>标签和过滤（Tagging and Filtering）</h2><p>通过 <code>@Tag</code> 注释对测试类和方法进行标记，这些标记稍后可用于筛选测试发现和执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Tag;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tag(&quot;fast&quot;)</span></span><br><span class="line"><span class="meta">@Tag(&quot;model&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaggingDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Tag(&quot;taxes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testingTaxCalculation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行顺序（Test-Execution-Order）"><a href="#执行顺序（Test-Execution-Order）" class="headerlink" title="执行顺序（Test Execution Order）"></a>执行顺序（Test Execution Order）</h2><ul><li><p>方法排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.MethodOrderer.OrderAnnotation;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestMethodOrder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestMethodOrder(OrderAnnotation.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedTestsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nullValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">emptyValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(3)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">validValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.ClassOrderer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestClassOrder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestClassOrder(ClassOrderer.OrderAnnotation.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedNestedTestClassesDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PrimaryTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SecondaryTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内嵌测试（Nested-Tests）"><a href="#内嵌测试（Nested-Tests）" class="headerlink" title="内嵌测试（Nested Tests）"></a>内嵌测试（Nested Tests）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertFalse;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertThrows;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingAStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isInstantiatedWithNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WhenNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">createNewStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AfterPushing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String anElement = <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">pushAnElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">isNotEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="D:\blog\source\_posts\JUnit 测试框架\0.png" alt="0"></p><h2 id="依赖注入（Dependency-Injection-for-Constructors-and-Methods）"><a href="#依赖注入（Dependency-Injection-for-Constructors-and-Methods）" class="headerlink" title="依赖注入（Dependency Injection for Constructors and Methods）"></a>依赖注入（Dependency Injection for Constructors and Methods）</h2><ul><li><p>TestInfo 检索当前测试的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Tag;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;TestInfo Demo&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestInfoDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestInfoDemo(TestInfo testInfo) &#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;TestInfo Demo&quot;</span>, testInfo.getDisplayName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(TestInfo testInfo)</span> </span>&#123;</span><br><span class="line">        String displayName = testInfo.getDisplayName();</span><br><span class="line">        assertTrue(displayName.equals(<span class="string">&quot;TEST 1&quot;</span>) || displayName.equals(<span class="string">&quot;test2()&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;TEST 1&quot;)</span></span><br><span class="line">    <span class="meta">@Tag(&quot;my-tag&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">(TestInfo testInfo)</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;TEST 1&quot;</span>, testInfo.getDisplayName());</span><br><span class="line">        assertTrue(testInfo.getTags().contains(<span class="string">&quot;my-tag&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TestReporter 发布当前测试运行的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestReporter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestReporterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reportSingleValue</span><span class="params">(TestReporter testReporter)</span> </span>&#123;</span><br><span class="line">        testReporter.publishEntry(<span class="string">&quot;a key&quot;</span>, <span class="string">&quot;a value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reportSeveralValues</span><span class="params">(TestReporter testReporter)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; values = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        values.put(<span class="string">&quot;user name&quot;</span>, <span class="string">&quot;dk38&quot;</span>);</span><br><span class="line">        values.put(<span class="string">&quot;award year&quot;</span>, <span class="string">&quot;1974&quot;</span>);</span><br><span class="line"></span><br><span class="line">        testReporter.publishEntry(values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timestamp = 2021-11-06T15:13:31.503, a key = a value</span><br><span class="line">timestamp = 2021-11-06T15:13:31.534, user name = dk38, award year = 1974</span><br></pre></td></tr></table></figure></li></ul><h2 id="重复测试（Repeated-Tests）"><a href="#重复测试（Repeated-Tests）" class="headerlink" title="重复测试（Repeated Tests）"></a>重复测试（Repeated Tests）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.RepeatedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.RepetitionInfo;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeatedTestsDemo</span> </span>&#123;</span><br><span class="line">    Logger logger = Logger.getLogger(RepeatedTestsDemo.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">(TestInfo testInfo, RepetitionInfo repetitionInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentRepetition = repetitionInfo.getCurrentRepetition();</span><br><span class="line">        <span class="keyword">int</span> totalRepetitions = repetitionInfo.getTotalRepetitions();</span><br><span class="line">        String methodName = testInfo.getTestMethod().get().getName();</span><br><span class="line">        logger.info(String.format(<span class="string">&quot;About to execute repetition %d of %d for %s&quot;</span>, <span class="comment">//</span></span><br><span class="line">                currentRepetition, totalRepetitions, methodName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(10)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">repeatedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(value = 5, name = &quot;Wiederholung &#123;currentRepetition&#125; von &#123;totalRepetitions&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">repeatedTestInGerman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="D:\blog\source\_posts\JUnit 测试框架\1.png" alt="1"></p><h2 id="参数化测试（Parameterized-Tests）"><a href="#参数化测试（Parameterized-Tests）" class="headerlink" title="参数化测试（Parameterized Tests）"></a>参数化测试（Parameterized Tests）</h2><ul><li><p>@ValueSource，数组的方式，支持基本类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(ints = &#123; 1, 2, 3 &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithValueSource</span><span class="params">(<span class="keyword">int</span> argument)</span> </span>&#123;</span><br><span class="line">        assertTrue(argument &gt; <span class="number">0</span> &amp;&amp; argument &lt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@EnumSource，使用 Enum 常量，可以指定哪些常量被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.EnumSource;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(TimeUnit.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithEnumSource</span><span class="params">(TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        assertNotNull(timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(value = TimeUnit.class, names = &#123;&quot;DAYS&quot;, &quot;HOURS&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithEnumSourceInclude</span><span class="params">(TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        assertTrue(EnumSet.of(TimeUnit.DAYS, TimeUnit.HOURS).contains(timeUnit));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@MethodSource，引用测试类或外部类的一个或多个工厂方法。工厂方法不能接受任何参数，<br>且必须是静态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.MethodSource;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;stringProvider&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithSimpleMethodSource</span><span class="params">(String argument)</span> </span>&#123;</span><br><span class="line">        assertNotNull(argument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">stringProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个参数需要返回参数实例的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.Arguments;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.MethodSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;stringIntAndListProvider&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithMultiArgMethodSource</span><span class="params">(String str, <span class="keyword">int</span> num, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">3</span>, str.length());</span><br><span class="line">        assertTrue(num &gt;=<span class="number">1</span> &amp;&amp; num &lt;=<span class="number">2</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title">stringIntAndListProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">                Arguments.of(<span class="string">&quot;foo&quot;</span>, <span class="number">1</span>, Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)),</span><br><span class="line">                Arguments.of(<span class="string">&quot;bar&quot;</span>, <span class="number">2</span>, Arrays.asList(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@CsvSource，将参数列表表示为逗号分隔的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvSource(&#123; &quot;foo, 1&quot;, &quot;bar, 2&quot;, &quot;&#x27;baz, qux&#x27;, 3&quot; &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWithCsvSource</span><span class="params">(String first, <span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">    assertNotNull(first);</span><br><span class="line">    assertNotEquals(<span class="number">0</span>, second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@CsvFileSource，使用类路径中的 CSV 文件。CSV 文件中的每一行都会调用一次参数化测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvFileSource(resources = &quot;/two-column.csv&quot;, numLinesToSkip = 1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWithCsvFileSource</span><span class="params">(String first, <span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">    assertNotNull(first);</span><br><span class="line">    assertNotEquals(<span class="number">0</span>, second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义显示名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;Display name of container&quot;)</span></span><br><span class="line"><span class="meta">@ParameterizedTest(name = &quot;&#123;index&#125; ==&gt; first=&#x27;&#x27;&#123;0&#125;&#x27;&#x27;, second=&#123;1&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CsvSource(&#123; &quot;foo, 1&quot;, &quot;bar, 2&quot;, &quot;&#x27;baz, qux&#x27;, 3&quot; &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWithCustomDisplayNames</span><span class="params">(String first, <span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试模板（Test-Templates）"><a href="#测试模板（Test-Templates）" class="headerlink" title="测试模板（Test Templates）"></a>测试模板（Test Templates）</h2><p>根据注册提供程序返回的调用上下文的数量，多次调用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.Extension;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtensionContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ParameterContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ParameterResolver;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.TestTemplateInvocationContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestTemplateInvocationContextProvider</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">TestTemplateInvocationContextProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsTestTemplate</span><span class="params">(ExtensionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;TestTemplateInvocationContext&gt; <span class="title">provideTestTemplateInvocationContexts</span><span class="params">(ExtensionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(invocationContext(<span class="string">&quot;foo&quot;</span>), invocationContext(<span class="string">&quot;bar&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TestTemplateInvocationContext <span class="title">invocationContext</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestTemplateInvocationContext() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayName</span><span class="params">(<span class="keyword">int</span> invocationIndex)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> parameter;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Extension&gt; <span class="title">getAdditionalExtensions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> ParameterResolver() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(ParameterContext parameterContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                     ExtensionContext extensionContext)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> parameterContext.getParameter().getType().equals(String.class);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveParameter</span><span class="params">(ParameterContext parameterContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                   ExtensionContext extensionContext)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> parameter;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTemplate</span></span><br><span class="line">    <span class="meta">@ExtendWith(MyTestTemplateInvocationContextProvider.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testTemplate</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">3</span>, parameter.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://junit.org/junit5/docs/current/user-guide/">JUnit 5 User Guide</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;JUnit 是一个 Java 语言的单元测试框架，目前已被主流平台集成。&lt;/p&gt;
&lt;p&gt;JUnit 5 = JUn</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>pytest 测试框架</title>
    <link href="http://10185102110.github.io/2021/11/04/pytest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://10185102110.github.io/2021/11/04/pytest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2021-11-04T07:40:36.000Z</published>
    <updated>2021-11-04T07:44:42.263Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>与 unittest 单元测试框架大同小异，但是 pytest 更灵活美观，代码也是原生的 python 风格。</p><p>需要安装第三方库，我的环境是 python-3.8.3 + pytest-5.4.3。</p><h1 id="pytest-规则"><a href="#pytest-规则" class="headerlink" title="pytest 规则"></a>pytest 规则</h1><ul><li>文件命名默认以 “test_” 开头或 “_test” 结尾；</li><li>测试类命名默认以 “Test” 开头；</li><li>函数命名默认以 “test_” 开头；</li><li>断言直接使用 python 的 assert；</li><li>和 unittest 一样，“.”代表断言成功，“F”代表断言失败。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStorm</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;test_1.py&quot;</span>])</span><br></pre></td></tr></table></figure><p>也可以把测试用例放在 class 外面，直接定义函数并执行。</p><h1 id="测试固件"><a href="#测试固件" class="headerlink" title="测试固件"></a>测试固件</h1><p>用于 class 外：</p><ul><li>setup_module 和 teardown_module，在整个文件的开始和最后执行一次。</li><li>setup_function 和 teardown_function，在每个函数开始前后执行。</li></ul><p>用于 class 内：</p><ul><li>setup_class 和 teardown_class，在整个class的开始和最后执行一次。</li><li>setup_method 和 teardown_method，在每个方法开始前后执行。</li></ul><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setup_class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown_class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setup_method&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown_method&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="number">5</span> &gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;Storm&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;Hello Storm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;test_1.py&quot;</span>])</span><br></pre></td></tr></table></figure><p>如果测试用例定义在 class 外，则没有 self 参数。</p><p><code>pytest.main([&quot;-s&quot;])</code> 会执行当前文件所在目录下所有符合条件的测试用例，添加文件名可以指定执行一个文件，<code>pytest.main([&quot;-s&quot;, &quot;test_1.py::Test01&quot;])</code> 可以指定执行某个类。</p><h1 id="失败重试"><a href="#失败重试" class="headerlink" title="失败重试"></a>失败重试</h1><p>Pytest 本身不支持测试用例执行失败重试的功能，需要安装一个插件：pytest rerunfailures，然后就可以通过 “—reruns重试次数” 来设置测试用例执行失败后的重试次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test02</span>():</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;c&#x27;</span>  <span class="comment"># 让其执行失败</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_c</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;c&#x27;</span> == <span class="string">&#x27;c&#x27;</span> </span><br></pre></td></tr></table></figure><p>在命令行使用 “pytest test_1.py —reruns 2” 执行测试用例，结果如下：</p><p><img src="0.png" alt=""></p><p>可以指定断言失败后的重试间隔时间，增加 “—-reruns-delay” 参数。</p><p>例如 “pytest test_1.py —reruns 2 —reruns-delay 2”</p><h1 id="标记机制"><a href="#标记机制" class="headerlink" title="标记机制"></a>标记机制</h1><p>Pytest 提供了标记机制，借助 “mark” 关键字可以对测试函数/类/方法进行标记。</p><ul><li><p>对测试用例进行分级</p><p>例如某些主流程的用例可以标记为 L1，次要流程的用例标记为 L2 等。这样的好处是可以在不同的情况执行不同的测试用例。例如，在做冒烟测试的时候，只需要执行 L1 级别的用例就行了。</p><p>一个测试用例可以标注多个级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line"><span class="meta">      @pytest.mark.L1</span></span><br><span class="line"><span class="meta">      @pytest.mark.L2</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @pytest.mark.L2</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test02</span>():</span></span><br><span class="line"><span class="meta">      @pytest.mark.L1</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_c</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;c&#x27;</span> == <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @pytest.mark.L3</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_d</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;d&#x27;</span> == <span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><p>pytest -s “test_1.py”  -m “L1” 可以只执行 L1 级别的用例。</p><p>pytest -s “test_1.py”  -m “L1 or L2” 可以执行 L1 和 L2 级别的用例。</p><p>pytest -s “test_1.py”  -m “not L1” 可以执行非 L1 级别的用例。</p><p>添加一个 pytest.ini 文件，配置所有 mark 可以避免警告。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="attr">markers</span> = L1</span><br><span class="line">    L2</span><br><span class="line">    L3</span><br></pre></td></tr></table></figure></li><li><p>跳过某些用例</p><ul><li><p>使用 skip(reason=None) 实现无条件跳过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.skip(<span class="params">reason=<span class="string">&#x27;这里是原因&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 skipif(condition, reason=None) 实现满足条件跳过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params"><span class="number">2</span>&gt;<span class="number">1</span>, reason=<span class="string">&#x27;这里是原因&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h1><p>可以将一些配置信息写入 pytest.ini 文件，注意文件内容不能包含中文。</p><p>（1）通过关键字 “addopts” 来设置命令行参数，如 “-s” 或 “-v” 监控、失败重试的次数、重试的时间间隔、按标签来执行，多个参数之间用空格分隔。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addopts = -v --reruns 2  --reruns-delay 2 -m &quot;L1&quot;</span><br></pre></td></tr></table></figure><p>（2）自定义标签</p><p>示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markers</span> = L1:level_1</span><br><span class="line">    L2:level_2</span><br></pre></td></tr></table></figure><p>（3）自定义测试用例查找规则</p><ul><li>在当前文件目录中的 testcases 目录下查找测试用例：testpaths = testcases。</li><li>查找文件名以 “test<em>” 开头的文件，也可以修改为以其他文件名开头：python<em>file =test</em></em>*.py。</li><li>查找以 “Test*” 开头的类，也可以修改为以其他类名开头：python_classes = Test*。</li><li>查找以 “test_” 开头的函数，也可以修改为以其他函数名开头：python<em>functions = test</em>*。</li></ul><h1 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h1><p>Pytest 框架支持多种形式的测试报告。</p><ul><li><p>pythonpytest-html</p><p>这是一个第三方库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.L1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;test_1.py&quot;</span>, <span class="string">&quot;--html=./report.html&quot;</span>])</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="1.png" alt=""></p><p>也可以在 pytest.ini 文件中配置，然后用命令行执行。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="attr">addopts</span> = -v --reruns <span class="number">2</span>  --reruns-delay <span class="number">2</span> -m <span class="string">&quot;L1 or L2&quot;</span> --html=./report.html</span><br><span class="line"><span class="attr">markers</span> = L1:level_1 testcases</span><br><span class="line">    L2:level_2 testcases</span><br><span class="line"><span class="attr">testpaths</span> = testcases</span><br><span class="line"><span class="attr">python_file</span> = test_*.py</span><br><span class="line"><span class="attr">python_classes</span> = Test*</span><br><span class="line"><span class="attr">python_functions</span> = test_*</span><br></pre></td></tr></table></figure></li><li><p>Allure 测试报告</p><p>Allure基于 Java 开发，因此需要安装 Java 8 或以上版本的环境。</p><p>然后用 pip 安装 allure-pytest 插件。</p><p>再手动下载文件：“allure-commandline-2.16.1.zip”：</p><p><a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.16.1/">Central Repository: io/qameta/allure/allure-commandline/2.16.1 (apache.org)</a></p><p>解压后将它的 bin 目录添加到环境变量，在命令行输入 allure 验证。</p><p>下面是示例：</p><p>新建一个 package，创建 report 文件夹，添加两个测试文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest,allure</span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;测试场景1&quot;</span></span>)      </span><span class="comment">#标记场景</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例1-1&quot;</span></span>) </span><span class="comment"># 标记测试用例</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;trivial&quot;</span></span>) </span><span class="comment"># 标记用例级别</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1_1</span>(<span class="params">self</span>):</span> <span class="comment"># 用例1</span></span><br><span class="line">           a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">           <span class="keyword">assert</span> a == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例1-2&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;critical&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.step(<span class="params"><span class="string">&#x27;用例2:重要步骤&#x27;</span></span>)</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1_2</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="number">2</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest,allure</span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;测试场景2&quot;</span></span>)      </span><span class="comment">#标记代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例2-1&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;minor&quot;</span></span>)</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_2_1</span>(<span class="params">self</span>):</span></span><br><span class="line">           a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">           <span class="keyword">assert</span> a == <span class="number">3</span>  <span class="comment"># 断言失败</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例2-2&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;minor&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.step(<span class="params"><span class="string">&#x27;用例2:重要步骤&#x27;</span></span>)</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_2_2</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="number">2</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;-q&#x27;</span>, <span class="string">&#x27;--alluredir&#x27;</span>, <span class="string">&#x27;./report/&#x27;</span>])</span><br></pre></td></tr></table></figure><p>运行 main 函数，report 文件夹下生成了几个 json 文件。</p><p>在命令行 cd 到该 package 路径，执行 allure generate —clean report，生成 allure-report 文件夹，查看里面的 index.html，效果如下：</p><p><img src="2.png" alt=""></p><p>默认打开的 ”Overview“ 菜单包括以下内容：</p><ul><li>报告生成的时间、执行时间、执行的用例数量、环状图显示通过比例；</li><li>测试集合（class）的情况；</li><li>测试场景；</li><li>失败用例的信息。</li></ul><p><img src="3.png" alt=""></p></li></ul><p>在 ”Categories” 菜单可以看到断言失败的具体信息。</p><p>通过 “Suites” 菜单可以测试集合树的形式查看用例执行的结果。</p><p>在 “Graphs” 菜单可以看到用例执行状态的环状图、用例级别的柱状图、用例执行时间的柱状图。</p><p><strong>定制化报告：</strong></p><ul><li>feature：标注主要功能模块。</li><li>story：标注features功能模块下的分支功能。</li><li><p>severity：标注测试用例的重要级别。</p><ul><li>blocker级别：致命缺陷。</li><li>critical级别：严重缺陷。</li><li>normal级别：一般缺陷，默认为这个级别。</li><li>minor级别：次要缺陷。</li><li>trivial级别：轻微缺陷。</li></ul></li><li><p>step：标注测试用例的重要步骤。</p></li><li>attach：用于向测试报告中输入一些附加的信息，通常是一些测试数据信息。</li><li>name就是附件名称，body就是数据，attachment_type就是传类型。附件支持的类型有TEXT、HTML、XML、PNG、JPG、JSON、OTHER。    </li><li>issue：这里传的是一个连接，记录的是你的问题。</li><li>testcase：这里传的是一个连接，记录的是你的用例。</li><li>description：描述用例信息。</li></ul><p>参考资料：</p><ul><li>李鲲程，边宇明：Python实现Web UI 自动化测试实战. 北京：人民邮电出版社，2021</li><li><a href="https://www.pytest.org/en/latest/">pytest: helps you write better programs — pytest documentation</a></li><li><a href="https://docs.qameta.io/allure/">Allure Framework (qameta.io)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;与 unittest 单元测试框架大同小异，但是 pytest 更灵活美观，代码也是原生的 python 风格。&lt;/p&gt;
&lt;p&gt;需要安装第三方库，我的环境是 python-3.8.3 + pytest-5.4.3。&lt;/p&gt;
&lt;h1 id=&quot;pyte</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>unittest测试框架</title>
    <link href="http://10185102110.github.io/2021/11/02/unittest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://10185102110.github.io/2021/11/02/unittest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2021-11-02T12:06:36.000Z</published>
    <updated>2021-11-04T07:40:23.881Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>unittest 是 Python 的内置模块，支持自动化测试。</p><ul><li><p>测试固件（test fixture）</p><p>在测试之前或者之后需要做的一些操作。例如测试执行前，可能需要打开浏览器、创建数据库连接等；测试结束后，可能需要清理测试环境、关闭数据库连接等。</p><ul><li>setUp：在每个测试方法执行前执行，负责测试前的初始化工作。</li><li>tearDown：在每个测试方法结束后执行，负责测试后的清理工作。</li><li>setUpClass：在所有测试方法执行前执行，负责单元测试前期准备。必须使用@classmethod装饰器进行修饰，在setUp函数之前执行，整个测试过程只执行一次。</li><li>tearDownClass：在所有测试方法执行结束后执行，负责单元测试后期处理。必须使用@classmethod装饰器进行修饰，在tearDown函数之后执行，整个测试过程只执行一次。</li></ul><p>代码示例 test_0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStorm</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">      @classmethod</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span> <span class="comment"># 在整个class开始前执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;setUpClass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span>  <span class="comment"># 在每个测试用例执行前执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;setUp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_first</span>(<span class="params">self</span>):</span>  <span class="comment"># 第一个测试用例</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_second</span>(<span class="params">self</span>):</span> <span class="comment"># 第二个测试用例</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;second&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span> <span class="comment"># 在每个测试用例结束后执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;tearDown&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">      @classmethod</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span> <span class="comment"># 在整个class最后执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;tearDownClass&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Testing started at 8:57 ...</span><br><span class="line"></span><br><span class="line">Launching unittests with arguments python -m unittest test_1.TestStorm in C:\Users\AveBai\PycharmProjects\Selenium</span><br><span class="line">Ran 2 tests in 0.006s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">setUpClass</span><br><span class="line">setUp</span><br><span class="line">first</span><br><span class="line">tearDown</span><br><span class="line">setUp</span><br><span class="line">second</span><br><span class="line">tearDown</span><br><span class="line">tearDownClass</span><br></pre></td></tr></table></figure></li><li><p>测试用例（test case）</p><p>测试用例是在 unittest 中执行测试的最小单元。它通过 unittest 提供的 assert 方法来验证一组特定的操作或输入以后得到的具体响应。</p><p>测试用例包含用例执行过程和对执行结果的断言，方法名建议使用小写字母，且必须以 “test” 开头。</p></li><li><p>测试套件（test suite）</p><p>测试套件就是一组测试用例，作用是将多个测试用例放到一起，执行一个测试套件就可以将这些测试用例全部执行。</p></li><li><p>测试运行器（test runner）</p><p>用来执行测试用例，并返回测试用例执行的结果。它还可以用图形、表格、文本等方式把测试结果形象地展现出来。</p></li></ul><h1 id="构建测试结合"><a href="#构建测试结合" class="headerlink" title="构建测试结合"></a>构建测试结合</h1><ul><li><p>通过 class 构造测试集合</p><p>代码示例 test_1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFirst</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_one</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_two</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSecond</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_three</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_four</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testcase2 = unittest.TestLoader().loadTestsFromTestCase(TestSecond)</span><br><span class="line">     suite = unittest.TestSuite([testcase2])</span><br><span class="line">     unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></table></figure><p>代码示例 test_2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testcase2 = unittest.TestLoader().loadTestsFromTestCase(test_1.TestSecond)</span><br><span class="line">     suite = unittest.TestSuite([testcase2])  <span class="comment">#组装测试用例</span></span><br><span class="line">     unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></table></figure><p>上述两段代码运行效果一致，但是这种方法会执行一个 class 下所有的测试用例。</p></li><li><p>通过 addTest 构建测试集合</p><p>示例代码 test_3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     suite = unittest.TestSuite()</span><br><span class="line">     suite.addTest(test_1.TestFirst(<span class="string">&quot;test_one&quot;</span>))</span><br><span class="line">     suite.addTest(test_1.TestSecond(<span class="string">&quot;test_four&quot;</span>))</span><br><span class="line">     unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></table></figure><p>上述代码从 TestFirst 类中取了 test_one 测试用例，从 TestSecond 类中取了 test_four 测试用例，两者组成了一个测试用例集合。</p></li><li><p>通过 discover 构建测试集合</p><p>代码示例 test_4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testSuite = unittest.TestLoader().discover(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">     unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(testSuite)</span><br></pre></td></tr></table></figure><p>这里 discover 传递的目录是一个 “.”，代表文件所在目录。执行该文件的话，就会从该文件所在目录中去寻找所有符合条件的测试用例（以 ‘test’ 开头），可以用来批量执行测试文件。</p></li></ul><h1 id="用例执行顺序"><a href="#用例执行顺序" class="headerlink" title="用例执行顺序"></a>用例执行顺序</h1><p>测试用例执行的顺序依照的是<strong>方法和函数名的 ASCII 值</strong>排序。</p><p>因为 test_four 的 ‘f’ 排在 test_three 的 ‘t’ 前面，所以 test_four 会先执行。</p><p>为了确保测试用例按照正确顺序执行，可以采用以下两种方案：</p><ul><li>用 addTest 将用例按顺序添加到集合；</li><li>调整测试用例名称。</li></ul><p>同样，在一个目录下新建的测试用例文件也是按照文件名的 ASCII 值的排序来编排和执行的。</p><h1 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h1><p>有时会出现这种情况：某些测试用例不需要执行，但是不舍得删掉，这时可以使用装饰器。</p><ul><li><p>无条件跳过装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @unittest.skip(<span class="params"><span class="string">&#x27;skip info&#x27;</span></span>) </span><span class="comment">#无条件跳过</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_d</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_c</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Skipped: skip info</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure></li><li><p>满足条件跳过装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line">......</span><br><span class="line"><span class="meta">@unittest.skipIf(<span class="params">a&gt;<span class="number">3</span>, <span class="string">&#x27;info&#x27;</span></span>) </span><span class="comment">#满足a&gt;3，跳过执行该用例</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>不满足条件跳过装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line">......</span><br><span class="line"><span class="meta">@unittest.skipUnless(<span class="params">a==<span class="number">5</span>,<span class="string">&#x27;info&#x27;</span></span>) </span><span class="comment">#不满足a==5，跳过执行该用例</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul><h1 id="测试断言"><a href="#测试断言" class="headerlink" title="测试断言"></a>测试断言</h1><p>断言是为了检查测试的结果是否符合预期，并能在断言失败后抛出失败的原因。</p><p>TestCase 类提供了很多断言方法：</p><div class="table-container"><table><thead><tr><th>方法</th><th>检查</th></tr></thead><tbody><tr><td>assertEqual(a,b)</td><td>a == b</td></tr><tr><td>assertNotEqual(a,b)</td><td>a != b</td></tr><tr><td>assertTrue(x)</td><td>bool(x) is True</td></tr><tr><td>assertFalse(x)</td><td>bool(x) is False</td></tr><tr><td>assertIs(a,b)</td><td>a is b</td></tr><tr><td>assertIsNot(a,b)</td><td>a is not b</td></tr><tr><td>assertIsNone(x)</td><td>x is None</td></tr><tr><td>assertIsNotNone(x)</td><td>x is not None</td></tr><tr><td>assertIn(a,b)</td><td>a in b</td></tr><tr><td>assertNotIn(a,b)</td><td>a not in b</td></tr><tr><td>assertIsInstance(a,b)</td><td>IsInstance(a,b)</td></tr><tr><td>assertNotIsInstance(a,b)</td><td>not IsInstance(a,b)</td></tr></tbody></table></div><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMath</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;test start&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="number">5</span></span><br><span class="line">           self.assertEqual(j + <span class="number">1</span>, <span class="number">6</span>) <span class="comment"># 判断相等</span></span><br><span class="line">           self.assertNotEqual(j + <span class="number">1</span>, <span class="number">5</span>) <span class="comment"># 判断不相等</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="literal">True</span></span><br><span class="line">           f = <span class="literal">False</span></span><br><span class="line">           self.assertTrue(j) <span class="comment"># 判断j是否为True</span></span><br><span class="line">           self.assertFalse(f) <span class="comment"># 判断f是否为False</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_003</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIs(j, <span class="string">&#x27;Storm&#x27;</span>) <span class="comment"># 判断j是否是&quot;Storm&quot;</span></span><br><span class="line">           self.assertIsNot(j, <span class="string">&#x27;storm&#x27;</span>) <span class="comment"># 判断j是否是&quot;storm&quot;，区分大小写</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_004</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="literal">None</span></span><br><span class="line">           t = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIsNone(j)  <span class="comment"># 判断j是否为None</span></span><br><span class="line">           self.assertIsNotNone(t) <span class="comment"># 判断t是否不是None</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_005</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIn(j, <span class="string">&#x27;Storm&#x27;</span>)  <span class="comment"># 判断j是否包含在&quot;Storm&quot;中</span></span><br><span class="line">           self.assertNotIn(j, <span class="string">&#x27;xxx&#x27;</span>)  <span class="comment"># 判断j是否没有包含在&quot;xxx&quot;中</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_006</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIsInstance(j, <span class="built_in">str</span>) <span class="comment"># 判断j的类型是否是str</span></span><br><span class="line">           self.assertNotIsInstance(j, <span class="built_in">int</span>) <span class="comment"># 判断j的类型是否是int</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;test end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><h1 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h1><p>下载 “HTMLTestRunner.py” 文件，将其复制到 python 安装目录下的 Lib 文件夹中。</p><p>该文件是用 python2 编写的，因此要做一些修改：</p><p>第 94 行，将 import StringIO 修改成 import io<br>第 539 行，将 self.outputBuffer = StringIO.StringIO() 修改成 self.outputBuffer = io.StringIO()<br>第 642 行，将 if not rmap.has_key(cls): 修改成 if not cls in rmap:<br>第 766 行，将 uo = o.decode(‘latin-1’) 修改成 uo = e<br>第 772 行，将 ue = e.decode(‘latin-1’) 修改成 ue = e<br>第 631 行，将 print &gt;&gt; sys.stderr, ‘\nTime Elapsed: %s’ % (self.stopTime-self.startTime) 修改成 print(sys.stderr, ‘\nTime Elapsed: %s’ % (self.stopTime-self.startTime))</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     <span class="comment"># 查找当前目录的测试用例文件</span></span><br><span class="line">     testSuite = unittest.TestLoader().discover(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">     <span class="comment"># 定义一个文件名，文件名以年月日时分秒结尾</span></span><br><span class="line">     filename = <span class="string">&quot;.\\report_&#123;&#125;.html&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>,time.localtime (time.time())))</span><br><span class="line">     <span class="comment"># 以with open的方式打开文件</span></span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          <span class="comment"># 通过HTMLTestRunner来执行测试用例，并生成报告</span></span><br><span class="line">          runner = HTMLTestRunner.HTMLTestRunner(stream=f,title=<span class="string">&#x27;这里是报告的标题&#x27;</span>, description=<span class="string">&#x27;这里是报告的描述信息&#x27;</span>)</span><br><span class="line">          runner.run(testSuite)</span><br></pre></td></tr></table></figure><p>生成的测试报告如下：</p><p><img src="0.png" alt=""></p><h1 id="对-QQ-邮箱的登录功能做简单测试"><a href="#对-QQ-邮箱的登录功能做简单测试" class="headerlink" title="对 QQ 邮箱的登录功能做简单测试"></a>对 QQ 邮箱的登录功能做简单测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver = webdriver.Chrome()</span><br><span class="line">          self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">          self.driver.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line">          login_frame = self.driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">          self.driver.switch_to.frame(login_frame)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 用例一:不输入密码直接登录</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;878379451&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">          self.assertEqual(err,<span class="string">&#x27;你还没有输入密码！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 用例二:密码错误</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;878379451&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">          self.assertEqual(err,<span class="string">&#x27;你输入的帐号或密码不正确，请重新输入。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 用例三:正确登录</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_003</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;878379451&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(<span class="string">&quot;aabbcc123&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          self.driver.switch_to.default_content()</span><br><span class="line">          name = self.driver.find_element_by_id(<span class="string">&#x27;useralias&#x27;</span>).text <span class="comment"># 获取用户名</span></span><br><span class="line">          self.assertEqual(name,<span class="string">&#x27;878379451&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testSuite = unittest.TestLoader().discover(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">     filename = <span class="string">&quot;.\\report_&#123;&#125;.html&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>,time.localtime (time.time())))</span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          runner = HTMLTestRunner.HTMLTestRunner(stream=f,title=<span class="string">&#x27;QQ邮箱登录&#x27;</span>, description=<span class="string">&#x27;以用户名密码方式&#x27;</span>)</span><br><span class="line">          runner.run(testSuite)</span><br></pre></td></tr></table></figure><h1 id="unittest-参数化"><a href="#unittest-参数化" class="headerlink" title="unittest 参数化"></a>unittest 参数化</h1><ul><li><p>DDT（Data-Driven Tests）是数据驱动测试的意思，需要自己安装这个库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> ddt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明使用ddt</span></span><br><span class="line"><span class="meta">@ddt.ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver = webdriver.Chrome()</span><br><span class="line">          self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">          self.driver.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line">          login_frame = self.driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">          self.driver.switch_to.frame(login_frame)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 传入两个列表代表两个测试用例，每个测试用例包含3个参数，status代表登录成功与否</span></span><br><span class="line"><span class="meta">     @ddt.data(<span class="params">[<span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],[<span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],[<span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;BSJbsj123&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">     @ddt.unpack</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self,username,password,status</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(username)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).clear()</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(password)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">               err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">               <span class="keyword">if</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    self.assertEqual(err,<span class="string">&#x27;你还没有输入密码！&#x27;</span>)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                    self.assertEqual(err, <span class="string">&#x27;你输入的帐号或密码不正确，请重新输入。&#x27;</span>)</span><br><span class="line">          <span class="keyword">elif</span> status == <span class="number">1</span>:</span><br><span class="line">               self.driver.switch_to.default_content()</span><br><span class="line">               name = self.driver.find_element_by_id(<span class="string">&#x27;useralias&#x27;</span>).text  <span class="comment"># 获取用户名</span></span><br><span class="line">               self.assertEqual(name, <span class="string">&#x27;878379451&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><p>这样只需要一个测试用例就能实现 3 种情况，需要测试其他数据的话添加参数即可。</p></li><li><p>parameterized，也是一个实现参数化的第三方库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pythonfrom selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver = webdriver.Chrome()</span><br><span class="line">          self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">          self.driver.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line">          login_frame = self.driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">          self.driver.switch_to.frame(login_frame)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="meta">     @parameterized.expand(<span class="params">[(<span class="params"><span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span>),(<span class="params"><span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span>),(<span class="params"><span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;BSJbsj123&#x27;</span>, <span class="string">&#x27;1&#x27;</span></span>)]</span>)</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self,username,password,status</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(username)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).clear()</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(password)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">               err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">               <span class="keyword">if</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    self.assertEqual(err,<span class="string">&#x27;你还没有输入密码！&#x27;</span>)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                    self.assertEqual(err, <span class="string">&#x27;你输入的帐号或密码不正确，请重新输入。&#x27;</span>)</span><br><span class="line">          <span class="keyword">elif</span> status == <span class="number">1</span>:</span><br><span class="line">               self.driver.switch_to.default_content()</span><br><span class="line">               name = self.driver.find_element_by_id(<span class="string">&#x27;useralias&#x27;</span>).text  <span class="comment"># 获取用户名</span></span><br><span class="line">               self.assertEqual(name, <span class="string">&#x27;878379451&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure></li></ul><p>参考资料：</p><ul><li><p>李鲲程，边宇明：Python实现Web UI 自动化测试实战. 北京：人民邮电出版社，2021</p></li><li><p><a href="https://docs.python.org/zh-cn/3.7/library/unittest.html#assert-methods">unittest —- 单元测试框架 — Python 3.7.12 文档</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;unittest 是 Python 的内置模块，支持自动化测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试固件（tes</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Selenium3基础</title>
    <link href="http://10185102110.github.io/2021/10/29/Selenium3%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://10185102110.github.io/2021/10/29/Selenium3%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-29T12:06:36.000Z</published>
    <updated>2021-10-29T16:44:45.275Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="测试环境的搭建"><a href="#测试环境的搭建" class="headerlink" title="测试环境的搭建"></a>测试环境的搭建</h1><ol><li><p>使用 Pycharm，python 3.8.3，安装 selenium 包。</p></li><li><p>下载浏览器驱动。</p><p>各浏览器驱动下载地址：</p><p>GeckoDriver（Firefox）：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a> </p><p>ChromeDriver（Chrome）：<a href="https://sites.google.com/a/chromium.org/chromedriver/home">https://sites.google.com/a/chromium.org/chromedriver/home</a> </p><p>IEDriverServer（IE）：<a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a> </p><p>OperaDriver（Opera）：<a href="https://github.com/operasoftware/operachromiumdriver/releases">https://github.com/operasoftware/operachromiumdriver/releases</a> </p><p>MicrosoftWebDriver（Edge）：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver</a></p><p>将解压后的 exe 文件放到 python.exe 同一路径即可，注意 Edge 的文件要改名为 MicrosoftWebDriver.exe。</p></li><li><p>环境测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用webdriver模块下的Chrome()类</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#调用Chrome()类提供的get()方法访问百度首页</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#通过find_element_by_id()方法分别定位页面上的元素</span></span><br><span class="line"><span class="comment">#通过send_keys()和click()做输入、单击操作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;Selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li></ol><h1 id="WebDriver-API"><a href="#WebDriver-API" class="headerlink" title="WebDriver API"></a>WebDriver API</h1><h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><p>一个网页上有输入框、按钮、文字链接、图片等元素，自动化测试要做的就是模拟鼠标和键盘来操作这些元素，如单击、输入、鼠标悬停等。而操作这些元素的前提是要定位它们。WebDriver 通过网页的 HTML 代码来定位。</p><p>WebDriver 提供了 8 种元素定位方法，在 Python 中，对应的方法如下： </p><ul><li>id 定位 → <code>find_element_by_id()</code> </li><li>name 定位 → <code>find_element_by_name()</code> </li><li>tag 定位 → <code>find_element_by_tag_name()</code> </li><li>class 定位 → <code>find_element_by_class_name()</code> </li><li>link_text 定位 → <code>find_element_by_link_text()</code> </li><li>partial link 定位 → <code>find_element_by_partial_link_text()</code> </li><li>XPath 定位 → <code>find_element_by_xpath()</code> </li><li>CSS_selector 定位 → <code>find_element_by_css_selector()</code></li></ul><p>以百度的输入框和搜索按钮为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id-定位"><a href="#id-定位" class="headerlink" title="id 定位"></a>id 定位</h3><p>HTML 中 id 是唯一的。通过 id 定位百度输入框和搜索按钮的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="name-定位"><a href="#name-定位" class="headerlink" title="name 定位"></a>name 定位</h3><p>HTML 中 name 用来指定元素的名称。</p><p>定位百度输入框的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_name(<span class="string">&quot;wd&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="class-定位"><a href="#class-定位" class="headerlink" title="class 定位"></a>class 定位</h3><p>HTML 中 class 用来指定元素的类名。</p><p>定位百度输入框的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="tag-定位"><a href="#tag-定位" class="headerlink" title="tag 定位"></a>tag 定位</h3><p>HTML 通过 tag 来定义不同页面的元素。例如，<code>&lt;input&gt;</code> 一般用来定义输入框，<code>&lt;a&gt;</code> 标签用来定义超链接等。</p><p>通过标签名（tag name）定位百度输入框的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_tag_name(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="link-定位"><a href="#link-定位" class="headerlink" title="link 定位"></a>link 定位</h3><p>link 专门用来定位文本链接。</p><p>百度输入框上面的几个文字链接的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://news.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.hao123.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://map.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://live.baidu.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>直播<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://haokan.baidu.com/?sfrom=baidu-top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tieba.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://xueshu.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>学术<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 link 定位链接的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;hao123&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;地图&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;直播&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;视频&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;贴吧&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;学术&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="partial-link-定位"><a href="#partial-link-定位" class="headerlink" title="partial link 定位"></a>partial link 定位</h3><p>partial link 定位是对 link 定位的一种补充，有些文字链接比较长，这时可以取文字链接的部分文字进行定位，只要这部分文字可以唯一地标识这个链接即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_lang&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>一个很长的文本链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 partial link 定位链接的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_partial_link_text(<span class="string">&quot;一个很长的&quot;</span>) </span><br><span class="line">find_element_by_partial_link_text(<span class="string">&quot;文本链接&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="XPath-定位"><a href="#XPath-定位" class="headerlink" title="XPath 定位"></a>XPath 定位</h3><ul><li><p>绝对路径定位</p><p>参考开发者工具所展示的代码层级结构，可以通过下面的方式找到百度输入框和百度搜索按钮：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;/html/body/div/div/div[5]/div/div/form/span/input&quot;</span>)</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;/html/body/div/div/div[5]/div/div/form/span[2]/input</span></span><br><span class="line"><span class="string">&quot;</span>)</span><br></pre></td></tr></table></figure><p>div[2] 表示当前层级下第二个 div 标签。</p></li><li><p>利用元素属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;su&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><p>//input 表示当前页面某个 input 标签，[@id=’kw’] 表示这个元素的 id 值是 kw。</p><p>下面通过 name 和 class 来定位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//*[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;//*[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果不想指定标签名，那么可以用星号（*）代替。使用 XPath 不局限于 id、name 和 class 这三个属性值，元素的任意属性都可以使用，只要它能唯一标识一个元素。</p></li><li><p>层级与属性结合</p><p>如果一个元素本身没有可以唯一标识这个元素的属性值，那么我们可以查找其上一级元素。如果它的上一级元素有可以唯一标识属性的值，就可以拿来使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//百度输入框的上一级元素</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_ipt_wr new-pmd quickdelete-wrap&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 XPath 描述如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//span[@class=&#x27;bg s_ipt_wr new-pmd quickdelete-wrap&#x27;]/input&quot;</span>)</span><br><span class="line">//或者再往上一级</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;form&#x27;]/span/input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用逻辑运算符</p><p>如果一个属性不能唯一区分一个元素，可以使用逻辑运算符连接多个属性来查找元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27; and @class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 contains 方法</p><p>contains 方法用于匹配一个属性中包含的字符串。例如，span 标签的 class 属性为“bg  s_ipt_wr new-pmd quickdelete-wrap”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//span[contains(@class,&#x27;s_ipt_wr&#x27;)]/input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 text() 方法</p><p>text() 方法用于匹配显示文本信息。例如，前面通过 link text 定位的文字链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//a[contains(text(),&#x27;新闻&#x27;)]&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h3><p>CSS 选择器的常见语法：</p><div class="table-container"><table><thead><tr><th>选择器</th><th>举例</th><th>描述</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择 class=”intro”的所有元素</td></tr><tr><td>#id</td><td>#firstname</td><td>选择 id=”firstname”的所有元素</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td></tr><tr><td>element</td><td>p</td><td>选择所有 <p> 元素</td></tr><tr><td>element&gt;element</td><td>div&gt;input</td><td>选择父元素为 <div> 的所有 <input> 元素</td></tr><tr><td>element+element</td><td>div+input</td><td>选择同一级紧接在 <div> 元素之后的所有 <input> 元素</td></tr><tr><td>[attribute=value]</td><td>[target=blank]</td><td>选择 target=”blank” 的所有元素</td></tr></tbody></table></div><p>以百度的输入框和搜索按钮为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_ipt_wr new-pmd quickdelete-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-hover-tip&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span>按图片搜索</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn_wr&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>通过 id 定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;#su&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过 class 定位 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;.s_ipt&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;.bg s_btn&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标签名定位 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标签层级关系定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;span &gt; input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;[autocomplete=off]&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&#x27;[type=&quot;submit&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>组合定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;form.fm &gt; span &gt; input.s_ipt&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;form#form &gt; span &gt; input#kw&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>更多用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找class属性包含“s_ipt_wr”字符串的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[class*=s_ipt_wr]&quot;</span>)</span><br><span class="line"><span class="comment">#查找class属性以“bg”字符串开头的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[class^=bg]&quot;</span>)</span><br><span class="line"><span class="comment">#查找class属性以“wrap”字符串结尾的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[class$=wrap]&quot;</span>)</span><br><span class="line"><span class="comment">#查找form标签下面第 2 个 input 标签的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;form &gt; input:nth-child(2)&quot;</span>)</span><br></pre></td></tr></table></figure><p>其余用法可以参考 <a href="http://www.w3school.com.cn/cssref/css_selectors.asp">http://www.w3school.com.cn/cssref/css_selectors.asp</a></p></li></ul><h3 id="用-By-定位元素"><a href="#用-By-定位元素" class="headerlink" title="用 By 定位元素"></a>用 By 定位元素</h3><p>针对前面的 8 种定位方法，WebDriver 还提供了另外一套写法，即统一调用 find_element() 方法，通过 By 来声明定位，并且传入对应定位方法的定位参数，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">find_element(By.ID,<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">find_element(By.NAME,<span class="string">&quot;wd&quot;</span>)</span><br><span class="line">find_element(By.CLASS_NAME,<span class="string">&quot;s_ipt&quot;</span>)</span><br><span class="line">find_element(By.TAG_NAME,<span class="string">&quot;input&quot;</span>)</span><br><span class="line">find_element(By.LINK_TEXT,<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">find_element(By.PARTIAL_LINK_TEXT,<span class="string">&quot;新&quot;</span>)</span><br><span class="line">find_element(By.XPATH,<span class="string">&quot;//*[@class=&#x27;bg s_btn&#x27;]&quot;</span>)</span><br><span class="line">find_element(By.CSS_SELECTOR,<span class="string">&quot;span.bg s_btn_wr&gt;input#su&quot;</span>)</span><br></pre></td></tr></table></figure><p>底层实现其实一样。</p><h2 id="控制浏览器"><a href="#控制浏览器" class="headerlink" title="控制浏览器"></a>控制浏览器</h2><h3 id="控制窗口大小"><a href="#控制窗口大小" class="headerlink" title="控制窗口大小"></a>控制窗口大小</h3><p>WebDriver 提供的 <code>set_window_size()</code> 方法可以用来设置浏览器窗口大小。</p><p><code>maximize_window()</code> 方法表示全屏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://m.baidu.com&quot;</span>) <span class="comment">#百度移动版首页</span></span><br><span class="line">driver.set_window_size(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">#设置宽高</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="控制浏览器后退、前进和刷新"><a href="#控制浏览器后退、前进和刷新" class="headerlink" title="控制浏览器后退、前进和刷新"></a>控制浏览器后退、前进和刷新</h3><p>WebDriver 提供了 <code>back()</code> 和 <code>forward()</code> 方法来模拟后退和前进按钮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 访问百度首页</span></span><br><span class="line">first_url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(first_url)</span><br><span class="line"><span class="comment"># 访问新闻页</span></span><br><span class="line">second_url=<span class="string">&#x27;http://news.baidu.com&#x27;</span></span><br><span class="line">driver.get(second_url)</span><br><span class="line"><span class="comment"># 返回到百度首页</span></span><br><span class="line">driver.back()</span><br><span class="line"><span class="comment"># 前进到新闻页</span></span><br><span class="line">driver.forward()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><code>refresh()</code> 方法可以刷新当前页面。</p><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><ul><li><p><code>clear()</code>：清除文本。</p></li><li><p><code>send_keys(value)</code>：模拟按键输入。</p></li><li><p><code>click()</code>：单击元素。</p></li><li><p><code>submit()</code>：提交表单，模拟回车键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">search_text = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">search_text.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">search_text.submit()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li><li><p><code>size</code>：返回元素的尺寸。</p></li><li><p><code>text</code>：获取元素的文本。</p></li><li><p><code>get_attribute(name)</code>：获得属性值。</p></li><li><p><code>is_displayed()</code>：设置该元素是否用户可见。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获得输入框的尺寸</span></span><br><span class="line">size = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).size</span><br><span class="line"><span class="built_in">print</span>(size)</span><br><span class="line"><span class="comment"># 返回百度页面底部备案信息</span></span><br><span class="line">text = driver.find_element_by_class_name(<span class="string">&quot;text-color&quot;</span>).text</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"><span class="comment"># 返回元素的属性值，可以是 id、name、type 或其他任意属性</span></span><br><span class="line">attribute = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).get_attribute(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(attribute)</span><br><span class="line"><span class="comment"># 返回元素的结果是否可见，返回结果为 True</span></span><br><span class="line">result = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).is_displayed()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li></ul><h2 id="操作鼠标"><a href="#操作鼠标" class="headerlink" title="操作鼠标"></a>操作鼠标</h2><p>ActionChains 类提供了鼠标操作的常用方法： </p><ul><li><code>perform()</code>：执行 ActionChains 类中存储的所有行为。 </li><li><code>context_click()</code>：右击。 </li><li><code>double_click()</code>：双击。 </li><li><code>drag_and_drop()</code>：拖动。 </li><li><code>move_to_element()</code>：鼠标悬停。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.cn&quot;</span>)</span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line">above = driver.find_element_by_xpath(<span class="string">&quot;//span[contains(text(),&#x27;设置&#x27;)]&quot;</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(above).perform()</span><br></pre></td></tr></table></figure><h2 id="操作键盘"><a href="#操作键盘" class="headerlink" title="操作键盘"></a>操作键盘</h2><p><code>send_keys()</code> 方法不仅可以用来模拟键盘输入，还可以用它来输入键盘上的按键，甚至是组合键，如 Ctrl+a、Ctrl+c 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br></pre></td></tr></table></figure><p>常见的键盘操作：</p><ul><li><p>send_keys(Keys.BACK_SPACE)：删除键（BackSpace） </p></li><li><p>send_keys(Keys.SPACE)：空格键（Space） </p></li><li><p>send_keys(Keys.TAB)：制表键（Tab） </p></li><li><p>send_keys(Keys.ESCAPE)：回退键（Esc） </p></li><li><p>send_keys(Keys.ENTER)：回车键（Enter）</p></li><li><p>send_keys(Keys.CONTROL,’a’)：全选（Ctrl+a） </p></li><li><p>send_keys(Keys.CONTROL,’c’)：复制（Ctrl+c） </p></li><li><p>send_keys(Keys.CONTROL,’x’)：剪切（Ctrl+x） </p></li><li><p>send_keys(Keys.CONTROL,’v’)：粘贴（Ctrl+v） </p></li><li><p>send_keys(Keys.F1)：键盘 F1</p><p>……</p></li><li><p>send_keys(Keys.F12)：键盘 F12</p></li></ul><h2 id="获得验证信息"><a href="#获得验证信息" class="headerlink" title="获得验证信息"></a>获得验证信息</h2><p>在进行 Web 自动化测试中，用得最多的几种验证信息：</p><ul><li>title：用于获取当前页面的标题。 </li><li>current_url：用于获取当前页面的 URL。 </li><li>text：用于获取当前页面的文本信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before search================&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印当前页面 title</span></span><br><span class="line">title = driver.title</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>+ title)</span><br><span class="line"><span class="comment"># 打印当前页面 URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL:&quot;</span>+now_url)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After search================&#x27;</span>)</span><br><span class="line"><span class="comment"># 再次打印当前页面 title</span></span><br><span class="line">title = driver.title</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>+title)</span><br><span class="line"><span class="comment"># 再次打印当前页面 URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL:&quot;</span>+now_url)</span><br><span class="line"><span class="comment"># 获取搜索结果条数</span></span><br><span class="line">num = driver.find_element_by_class_name(<span class="string">&#x27;nums&#x27;</span>).text</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result:&quot;</span>+num)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Before search================</span><br><span class="line">title:百度一下，你就知道</span><br><span class="line">URL:https://www.baidu.com/</span><br><span class="line">After search================</span><br><span class="line">title:selenium_百度搜索</span><br><span class="line">URL:https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=selenium&amp;fenlei=256&amp;rsv_pq=91169e5b0002382c&amp;rsv_t=61a7095gLdcmwC3ez1XIuOB%2BSLUYQnawqzJKnDLa%2FObzM7ETj6s1intaYQA&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=0&amp;rsv_sug3=8&amp;rsv_btype=i&amp;inputT=228&amp;rsv_sug4=228</span><br><span class="line">result:搜索工具</span><br><span class="line">百度为您找到相关结果约100,000,000个</span><br></pre></td></tr></table></figure><h2 id="设置元素等待"><a href="#设置元素等待" class="headerlink" title="设置元素等待"></a>设置元素等待</h2><h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><p>显式等待是 WebDriver 等待某个条件成立则继续执行，否则在达到最大时长时抛出超 时异常（TimeoutException）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(EC.visibility_of_element_located((By.ID, <span class="string">&quot;kw&quot;</span>)))</span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>WebDriverWait 类是 WebDriver 提供的等待方法。在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间仍检测不到，则抛出异常。格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait(driver, timeout, poll_frequency=<span class="number">0.5</span>, ignored_exceptions=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#driver：浏览器驱动。</span></span><br><span class="line"><span class="comment">#timeout：最长超时时间，默认以秒为单位。</span></span><br><span class="line"><span class="comment">#poll_frequency：检测的间隔（步长）时间，默认为 0.5s。</span></span><br><span class="line"><span class="comment">#ignored_exceptions：超时后的异常信息，默认情况下抛出 NoSuchElementException异常。</span></span><br></pre></td></tr></table></figure><p><code>WebDriverWait()</code> 一般与 <code>until()</code> 或 <code>until_not()</code> 方法配合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until(method, message=″)</span><br><span class="line"><span class="comment">#调用该方法提供的驱动程序作为一个参数，直到返回值为 True。 </span></span><br><span class="line">until_not(method, message=″) </span><br><span class="line"><span class="comment">#调用该方法提供的驱动程序作为一个参数，直到返回值为 False。</span></span><br></pre></td></tr></table></figure><p>这里通过 as 关键字将 expected_conditions 重命名为 EC。</p><p>expected_conditions 类提供的预期条件判断方法如下所示：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>title_is</td><td>判断当前页面的标题是否等于预期</td></tr><tr><td>title_contains</td><td>判断当前页面的标题是否包含预期字符串</td></tr><tr><td>presence_of_element_located</td><td>判断元素是否被加在 DOM 树里，并不代表该元素一定可见</td></tr><tr><td>visibility_of_element_located</td><td>判断元素是否可见（可见代表元素非隐藏，并且元素的宽和高都不等于 0）</td></tr><tr><td>visibility_of</td><td>同上，上一个方法的参数为定位，该方法接收的参数为定位后的元素</td></tr><tr><td>presence_of_all_elements_located</td><td>判断是否至少有一个元素存在于 DOM 树中。</td></tr><tr><td>text_to_be_present_in_element</td><td>判断某个元素中的 text 是否包含预期的字符串</td></tr><tr><td>text_to_be_present_in_element_value</td><td>判断某个元素的 value 属性是否包含预期的字符串</td></tr><tr><td>frame_to_be_available_and_switch_to_it</td><td>判断该表单是否可以切换进去，如果可以，返回 True 并且切换进去， 否则返回 False</td></tr><tr><td>invisibility_of_element_located</td><td>判断某个元素是否不在 DOM 树中或不可见</td></tr><tr><td>element_to_be_clickable</td><td>判断某个元素是否可见并且是可以点击的</td></tr><tr><td>staleness_of</td><td>等到一个元素从 DOM 树中移除</td></tr><tr><td>element_to_be_selected</td><td>判断某个元素是否被选中，一般用在下拉列表中</td></tr><tr><td>element_selection_state_to_be</td><td>判断某个元素的选中状态是否符合预期</td></tr><tr><td>element_located_selection_state_to_be</td><td>同上，只是上一个方法参数为定位后的元素，该方法接收的参数为定位</td></tr><tr><td>alert_is_present</td><td>判断页面上是否存在 alert</td></tr></tbody></table></div><p>也可以用 <code>is_displayed()</code> 方法自己实现元素显示等待：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ctime())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">  el = driver.find_element_by_id(<span class="string">&quot;kw22&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> el.is_displayed():</span><br><span class="line">   <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"> sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ctime())</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#Fri Oct 29 20:48:51 2021</span></span><br><span class="line"><span class="comment">#time out</span></span><br><span class="line"><span class="comment">#Fri Oct 29 20:49:01 2021</span></span><br></pre></td></tr></table></figure><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>WebDriver 提供的 <code>implicitly_wait()</code> 方法可用来实现隐式等待。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置隐式等待为 10s</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> <span class="built_in">print</span>(ctime())</span><br><span class="line"> driver.find_element_by_id(<span class="string">&quot;kw22&quot;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e:</span><br><span class="line"> <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"> <span class="built_in">print</span>(ctime())</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#Fri Oct 29 21:37:01 2021</span></span><br><span class="line"><span class="comment">#Message: no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;cssselector&quot;,&quot;selector&quot;:&quot;[id=&quot;kw22&quot;]&quot;&#125; (Session info: chrome=95.0.4638.69)</span></span><br><span class="line"><span class="comment">#Fri Oct 29 21:37:11 2021</span></span><br></pre></td></tr></table></figure><p><code>implicitly_wait()</code> 的参数是时间，单位为秒，这里设置的等待时间为 10s。首先，这 10s 并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它会等待页面上的所有元素。当脚本执行到某个元素定位时，如果元素存在，则继续执行；如果定位不到元素， 则它将以轮询的方式不断地判断元素是否存在。若直到超出设置时间（10s）还没有定位到元素，则抛出异常。</p><h2 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a>定位一组元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find_elements_by_id()</span><br><span class="line">find_elements_by_name()</span><br><span class="line">find_elements_by_class_name()</span><br><span class="line">find_elements_by_tag_name()</span><br><span class="line">find_elements_by_link_text()</span><br><span class="line">find_elements_by_partial_link_text()</span><br><span class="line">find_elements_by_xpath()</span><br><span class="line">find_elements_by_css_selector()</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 定位一组元素</span></span><br><span class="line">texts = driver.find_elements_by_xpath(<span class="string">&quot;//div[@tpl=&#x27;se_com_default&#x27;]/h3/a&quot;</span>)</span><br><span class="line"><span class="comment"># 计算匹配结果个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(texts))</span><br><span class="line"><span class="comment"># 循环遍历出每一条搜索结果的标题</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> texts:</span><br><span class="line"> <span class="built_in">print</span>(t.text)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="多表单切换"><a href="#多表单切换" class="headerlink" title="多表单切换"></a>多表单切换</h2><p>WebDriver 只能在一个页面上对元素进行识别和定位，无法直接定位 frame/iframe 表单内嵌页面上的元素，这时就需要通过 <code>switch_to.frame()</code> 方法将当前定位的主体切换为 frame/iframe 表单的内嵌页面。</p><p>下面是自动登录 QQ 邮箱的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://mail.qq.com/&quot;</span>)</span><br><span class="line"><span class="comment">#切换表单</span></span><br><span class="line">login_frame = driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(login_frame)</span><br><span class="line"><span class="comment">#点击“账号密码登录“</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"><span class="comment">#输入账号</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;account&quot;</span>)</span><br><span class="line"><span class="comment">#输入密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="comment">#点击”登录“</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line"><span class="comment">#回到最外层的表单</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h2 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h2><p>WebDriver 提供的 <code>switch_to.window()</code> 方法可以实现在不同的窗口间切换。</p><ul><li><code>current_window_handle</code>：获得当前窗口句柄。 </li><li><code>window_handles</code>：返回所有窗口的句柄到当前会话。 </li><li><code>switch_to.window()</code>：切换到相应的窗口。</li></ul><p>以百度首页和账号注册页为例，在两个窗口之间的切换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#隐式等待，等元素可见再执行</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获得百度搜索窗口句柄</span></span><br><span class="line">search_windows = driver.current_window_handle</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;立即注册&quot;</span>).click()</span><br><span class="line"><span class="comment"># 获得当前所有打开的窗口句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"><span class="comment"># 进入注册窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</span><br><span class="line"> <span class="keyword">if</span> handle != search_windows:</span><br><span class="line">    driver.switch_to.window(handle)</span><br><span class="line">    <span class="built_in">print</span>(driver.title)</span><br><span class="line">    driver.find_element_by_name(<span class="string">&quot;userName&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    driver.find_element_by_name(<span class="string">&#x27;phone&#x27;</span>).send_keys(<span class="string">&#x27;18019080162&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭当前窗口</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># 回到搜索窗口</span></span><br><span class="line">driver.switch_to.window(search_windows)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br></pre></td></tr></table></figure><h2 id="警告框处理"><a href="#警告框处理" class="headerlink" title="警告框处理"></a>警告框处理</h2><p>在 WebDriver 中处理 JavaScript 生成的 alert、confirm 和 prompt 十分简单，具体做法是首先使用 <code>switch_to.alert()</code> 方法定位，然后使用 text、accept、dismiss、send_keys 等进行操作。</p><ul><li>text：返回 alert、confirm、prompt 中的文字信息。 </li><li>accept()：接受现有警告框。 </li><li>dismiss()：解散现有警告框。 </li><li>send_keys()：在警告框中输入文本。</li></ul><p>可以使用 <code>switch_to.alert()</code> 方法为百度搜索设置弹窗：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">link = driver.find_element_by_id(<span class="string">&#x27;s-usersetting-top&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line"><span class="comment"># 获取警告框</span></span><br><span class="line">alert = driver.switch_to.alert</span><br><span class="line"><span class="comment"># 获取警告框提示信息</span></span><br><span class="line">alert_text = alert.text</span><br><span class="line"><span class="built_in">print</span>(alert_text)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 接取警告框</span></span><br><span class="line">alert.accept()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="下拉框处理"><a href="#下拉框处理" class="headerlink" title="下拉框处理"></a>下拉框处理</h2><p>WebDriver 提供了 Select 类来处理下拉框。 </p><ul><li>select_by_value()：通过 value 值定位下拉选项。 </li><li>select_by_visible_text()：通过 text 值定位下拉选项。 </li><li>select_by_index()：根据下拉选项的索引进行选择。第一个选项为 0，第二个选项为 1。</li></ul><p>以百度搜索设置为例，下拉框代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;NR&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nr&quot;</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;&quot;</span>&gt;</span>每页显示 10 条<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span>每页显示 20 条<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span>每页显示 50 条<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 WebDriver 代码操作下拉框：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">link = driver.find_element_by_id(<span class="string">&#x27;s-usersetting-top&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># value=&quot;20&quot;</span></span><br><span class="line">Select(sel).select_by_value(<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># &lt;option&gt;每页显示 50 条&lt;/option&gt;</span></span><br><span class="line">Select(sel).select_by_visible_text(<span class="string">&quot;每页显示 50 条&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 根据下拉选项的索引进行选择</span></span><br><span class="line">Select(sel).select_by_index(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="操作-Cookie"><a href="#操作-Cookie" class="headerlink" title="操作 Cookie"></a>操作 Cookie</h2><p>WebDriver 操作 Cookie 的方法如下：</p><ul><li><code>get_cookies()</code>：获得所有 Cookie。 </li><li><code>get_cookie(name)</code>：返回字典中 key 为“name”的 Cookie。 </li><li><code>add_cookie(cookie_dict)</code>：添加 Cookie。 </li><li><code>delete_cookie(name,optionsString)</code>：删除名为 OpenString 的 Cookie。 </li><li><code>delete_all_cookies()</code>：删除所有 Cookie。</li></ul><p>下面通过 <code>get_cookies()</code> 获取当前浏览器的所有 Cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获得所有 Cookie 信息并打印</span></span><br><span class="line">cookie = driver.get_cookies()</span><br><span class="line"><span class="built_in">print</span>(cookie)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 1635526453, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BA_HECTOR&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;8p2g0ga10gahag64il1gno6950r&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 1667058853, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BAIDUID_BFESS&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;sameSite&#x27;: &#x27;None&#x27;, &#x27;secure&#x27;: True, &#x27;value&#x27;: &#x27;3ECF2109496A371FC86784F70A86AC3E:FG=1&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;H_PS_PSSID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;34837_34067_31254_34862_34712_34584_34518_34917_34964_26350_34827_34867_22159&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;www.baidu.com&#x27;, &#x27;expiry&#x27;: 1635522853, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BD_LAST_QID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;12449484618997190050&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 1667058852, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BAIDUID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;3ECF2109496A371FC86784F70A86AC3E:FG=1&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 3783006499, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BIDUPSID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;3ECF2109496A371FC63160F643893301&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 3783006499, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;PSTM&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;1635522852&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;www.baidu.com&#x27;, &#x27;expiry&#x27;: 1636386853, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BD_UPN&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;12314753&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;www.baidu.com&#x27;, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BD_HOME&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;1&#x27;&#125;]</span><br></pre></td></tr></table></figure><p>从执行结果可以看出，Cookie 中的数据是以字典形式存放的。知道了 Cookie 中数据的存放形式后，即可按照这种形式向浏览器中添加 Cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 Cookie 信息</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;key-aaaaaaa&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;value-bbbbbb&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 遍历指定的 Cookies</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;%s -&gt; %s&quot;</span> % (cookie[<span class="string">&#x27;name&#x27;</span>], cookie[<span class="string">&#x27;value&#x27;</span>]))</span><br></pre></td></tr></table></figure><h2 id="调用-JavaScript"><a href="#调用-JavaScript" class="headerlink" title="调用 JavaScript"></a>调用 JavaScript</h2><p>有些页面操作不能依靠 WebDriver 提供的 API 来实现，如浏览器滚动条的拖动。这时就需要借助 JavaScript 脚本。WebDriver 提供了 <code>execute_script()</code> 方法来执行 JavaScript 代码。</p><p>用于调整浏览器滚动条位置的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">driver.set_window_size(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 通过 JavaScript 设置浏览器窗口的滚动条位置</span></span><br><span class="line"><span class="comment"># window.scrollTo()方法用于设置浏览器窗口滚动条的水平位置和垂直位置</span></span><br><span class="line">js = <span class="string">&quot;window.scrollTo(100,400);&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure><p>还可以向 textarea 文本框中输入内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 98%&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然可以通过 id 定位到元素，但是不能通过 send_keys()在文本框中输入文本信息。在这种情况下，可以借助 JavaScript 代码输入文本信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;input text&quot;</span></span><br><span class="line">js = <span class="string">&quot;document.getElementById(&#x27;id&#x27;).value=&#x27;&quot;</span> + text + <span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure><h2 id="处理-HTML5-视频播放"><a href="#处理-HTML5-视频播放" class="headerlink" title="处理 HTML5 视频播放"></a>处理 HTML5 视频播放</h2><p><code>&lt;video&gt;</code> 提供了 JavaScript 接口和多种方法及属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://videojs.com/&quot;</span>)</span><br><span class="line">video = driver.find_element_by_id(<span class="string">&quot;preview-player_html5_api&quot;</span>)</span><br><span class="line"><span class="comment"># 返回播放文件地址</span></span><br><span class="line">url = driver.execute_script(<span class="string">&quot;return arguments[0].currentSrc;&quot;</span>, video)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"><span class="comment"># 播放视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].play()&quot;</span>, video)</span><br><span class="line"><span class="comment"># 播放 15s</span></span><br><span class="line">sleep(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 暂停视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].pause()&quot;</span>, video)</span><br></pre></td></tr></table></figure><p>JavaScript 有个内置的对象叫作 arguments。arguments 包含函数调用的参数数组，[0] 表示取对象的第 1 个值。 </p><p>currentSrc 返回当前音频/视频的 URL。如果未设置音频/视频，则返回空字符串。 </p><p>load()、play() 和 pause() 控制视频的加载、播放和暂停。</p><h2 id="窗口截图"><a href="#窗口截图" class="headerlink" title="窗口截图"></a>窗口截图</h2><p>WebDriver 提供了截图函数 <code>save_screenshot ()</code>，可用来截取当前窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 截取当前窗口，指定截图图片的保存位置</span></span><br><span class="line">driver.save_screenshot(<span class="string">&quot;./baidu_img.png&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="自动化测试模型"><a href="#自动化测试模型" class="headerlink" title="自动化测试模型"></a>自动化测试模型</h1><p>几种自动化测试模型：</p><ul><li><p>线性测试</p><p>通过录制或编写对应用程序的操作步骤会产生相应的线性脚本，每个线性脚本相对独立，且不产生依赖与调用。这是早期自动化测试的一种形式，即单纯地模拟用户完整的操作场景。缺点是不易维护。</p></li><li><p>模块化与类库</p><p>借鉴了编程语言中的模块化思想，把重复的操作单独封装成公共模块。在测试用例执行过程中，当需要用到模块封装时对其进行调用，这样就最大限度地消除了重复，从而提高测试用例的可维护性。</p></li><li><p>数据驱动测试</p><p>数据的改变驱动自动化测试的执行，最终引起测试结果的改变。 简单理解就是把数据驱动所需要的测试数据参数化，我们可以用多种方式来存储和管理这 些参数化的数据。</p></li><li><p>关键字驱动测试</p><p>这类框架会把自动化操作封装为“关键字”，避免测试人员直接接触代码，多以“填表格”的形式降低脚本的编写难度。</p></li></ul><h2 id="读取数据文件"><a href="#读取数据文件" class="headerlink" title="读取数据文件"></a>读取数据文件</h2><p>大多数测试倾向于把测试数据放到数据文件中。 下面是几种常见的读取数据文件的方法。</p><ul><li><p>读取 txt 文件</p><p>Python 提供了以下几种读取 txt 文件的方法。 </p><ul><li>read()：读取整个文件。 </li><li>readline()：读取一行数据。 </li><li>readlines()：读取所有行的数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span>(<span class="built_in">open</span>(<span class="string">&quot;./user_info.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)) <span class="keyword">as</span> user_file:</span><br><span class="line"> data = user_file.readlines()</span><br><span class="line"><span class="comment"># 格式化处理</span></span><br><span class="line">users = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line"> user = line[:-<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"> users.append(user)</span><br><span class="line"><span class="comment"># 打印 users 二维数组</span></span><br><span class="line"><span class="built_in">print</span>(users)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>读取 CSV 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"><span class="comment"># 读取本地 CSV 文件</span></span><br><span class="line">data = csv.reader(codecs.<span class="built_in">open</span>(<span class="string">&#x27;./user_info.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf_8_sig&#x27;</span>))</span><br><span class="line"><span class="comment"># 存放用户数据</span></span><br><span class="line">users = []</span><br><span class="line"><span class="comment"># 循环输出每行信息</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> islice(data, <span class="number">1</span>, <span class="literal">None</span>):</span><br><span class="line">    users.append(line)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(users)</span><br></pre></td></tr></table></figure><p><code>islice()</code> 函数返回一个迭代器，第一个参数指定迭代对象，第二个参数指定开始迭代的位置，第三个参数表示结束位。</p></li><li><p>读取 JSON 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./user_info.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> data = f.read()</span><br><span class="line">user_list = json.loads(data)</span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br></pre></td></tr></table></figure></li></ul><p><strong>参考资料：</strong></p><p>[1] 虫师：Selenium3自动化测试实战——基于Python语言. 北京：电子工业出版社，2019</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;测试环境的搭建&quot;&gt;&lt;a href=&quot;#测试环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;测试环境的搭建&quot;&gt;&lt;/a&gt;测试环境的搭建&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 Pycharm，python 3.8.3，安装 s</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JMeter实践</title>
    <link href="http://10185102110.github.io/2021/10/26/JMeter%20%E5%AE%9E%E8%B7%B5/"/>
    <id>http://10185102110.github.io/2021/10/26/JMeter%20%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-10-26T12:06:36.000Z</published>
    <updated>2021-10-29T16:54:45.655Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="JMeter-模拟-HTTP-请求"><a href="#JMeter-模拟-HTTP-请求" class="headerlink" title="JMeter 模拟 HTTP 请求"></a>JMeter 模拟 HTTP 请求</h1><h2 id="创建测试任务"><a href="#创建测试任务" class="headerlink" title="创建测试任务"></a>创建测试任务</h2><p>在 JMeter 中，任何类型的测试都需要先创建线程组，一个线程组可以看作一个测试任务。</p><p>（1）添加线程组。用鼠标右键单击“测试计划”，在快捷菜单中单击添加 -&gt; 线程(用户) -&gt; 线程组。</p><p>（2）设置线程组。线程组主要包括 3 个参数：</p><ul><li><p>线程数：一个线程代表一个虚拟用户。</p></li><li><p>Ramp-Up Period(in seconds)：设置线程的启动时长，单位为秒。如果线程数是 100，启动时长为 5s，那么需要 5s 启动 100 个线程，平均每秒启动 20 个线程。</p></li><li><p>循环次数：每个线程发送请求的次数。如果这个线程组中有 5 个HTTP请求，循环次数为 3 的话，那么一个线程会发送 5×3=15 个 HTTP 请求。如果选中了“永远”复选框，那么所有的线程会无限循环发送请求，直到手动单击工具栏上的停止按钮。</p></li></ul><p>如果用来做功能测试/接口测试，那么应保持默认设置。</p><p><img src="2.png" alt=""></p><h2 id="模拟网页-MD5-加密"><a href="#模拟网页-MD5-加密" class="headerlink" title="模拟网页 MD5 加密"></a>模拟网页 MD5 加密</h2><p>有一个 MD5 在线网站 <a href="http://www.md5.cz/。利用它可以对密码进行散列处理。用">http://www.md5.cz/。利用它可以对密码进行散列处理。用</a> Fiddler 对这个网站进行抓包，然后用 JMeter 来实现。具体的操作步骤如下。</p><p>（1）启动 Fiddler，打开浏览器，输入 <a href="http://ww.md5.cz/。在页面中输入“password”，然后单击按钮“hash">http://ww.md5.cz/。在页面中输入“password”，然后单击按钮“hash</a> darling, hash!”。</p><p><img src="0.png" alt=""></p><p><img src="1.png" alt=""></p><p>能看到浏览器发出的 HTTP 请求报文如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.md5.cz/getmd5.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.md5.cz</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>13</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.30</span><br><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://www.md5.cz</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://www.md5.cz/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>_ga=GA1.2.1991138354.1635224796; _gid=GA1.2.478924991.1635224796</span><br><span class="line"></span><br><span class="line"><span class="ini"><span class="attr">what</span>=password</span></span><br></pre></td></tr></table></figure><p>（2）打开 JMeter，右击线程组-&gt;添加-&gt;取样器-&gt;HTTP 请求，参数按照报文填写：</p><p><img src="3.png" alt=""></p><p>（3）右击 HTTP请求-&gt;添加-&gt;配置元件-&gt;HTTP信息头管理器，添加 HTTP Header。可以先在 Fiddler 中复制所有的 HTTP Header，然后单击“从剪贴板添加”。由于 JMeter 自动添加 Host，所以不需要手动添加，如果有则需要删除。</p><p><img src="4.png" alt=""></p><p>（4）右击线程组-&gt;添加-&gt;监听器-&gt;察看结果树。运行JMeter，单击工具栏上的绿色按钮，可以运行脚本。通过结果树可以看到我们发出的 HTTP请求以及 Web 服务器返回的 HTTP 响应。</p><p><img src="5.png" alt=""></p><h1 id="JMeter-天气接口自动化测试"><a href="#JMeter-天气接口自动化测试" class="headerlink" title="JMeter 天气接口自动化测试"></a>JMeter 天气接口自动化测试</h1><h2 id="Fiddler-抓包分析"><a href="#Fiddler-抓包分析" class="headerlink" title="Fiddler 抓包分析"></a>Fiddler 抓包分析</h2><p>（1）启动 Fiddler，单击菜单栏中 Rules -&gt; Hide Image Requests。抓包的时候把图片的包隐藏。</p><p>（2）打开浏览器，打开 <a href="http://www.weather.com.cn/。在“城市名称”中输入“上海”，单击查询。">http://www.weather.com.cn/。在“城市名称”中输入“上海”，单击查询。</a></p><p>（3）抓到几十个包，但分析下来主要有两步操作：</p><ul><li><p>​    获取城市代码。发送一个 GET 请求到 <a href="http://toy1.weather.com.cn/search?cityname=%E4%B8%8A%E6%B5%B7&amp;callback=success_jsonpCallback&amp;_=1635227081722">http://toy1.weather.com.cn/search?cityname=%E4%B8%8A%E6%B5%B7&amp;callback=success_jsonpCallback&amp;_=1635227081722</a> ，“上海”被 URLEncode 后变成了 “%E4%B8%8A%E6%B5%B7”，从这个响应中可以得到上海的地区代码。</p><p><img src="6.png" alt=""></p></li><li><p>获取城市的天气数据。发送一个 GET 请求到 <a href="http://www.weather.com.cn/weather1d/101020100.shtml">http://www.weather.com.cn/weather1d/101020100.shtml</a> 得到该城市的天气数据。</p><p><img src="7.png" alt=""></p></li></ul><p>这两个请求必须带上一个叫“Referer”的 Header，Referer 的作用就是用来追踪来源的。</p><h2 id="JMeter-实现参数化"><a href="#JMeter-实现参数化" class="headerlink" title="JMeter 实现参数化"></a>JMeter 实现参数化</h2><p>（1）启动JMeter，在线程组下面新建一个 HTTP 请求，将其命名为 GetCityCode。发送一个Get方法的HTTP请求到 <a href="http://toy1.weather.com.cn/search?cityname=上海。添加一个HTTP信息头管理器，添加一个">http://toy1.weather.com.cn/search?cityname=上海。添加一个HTTP信息头管理器，添加一个</a> Referer：</p><p><img src="8.png" alt=""></p><p>（2）添加验证点。选择 GetCityCode 这个 HTTP 请求，右击-&gt;添加-&gt;断言-&gt;响应断言。右击线程组-&gt;添加-&gt;监听器-&gt;断言结果。匹配结果会显示到断言结果中，成功则只显示 HTTP 请求名称，失败则显示 HTTP 名称和没有匹配到的第一项。</p><p><img src="9.png" alt=""></p><p>（3）使用用户自定义变量。右击线程组-&gt;添加-&gt;配置元件-&gt;用户定义的变量。添加一个变量 city，其值设为“上海”。</p><p><img src="10.png" alt=""></p><p>在 GetCityCode 中使用这个变量：</p><p><img src="11.png" alt=""></p><p>这样就实现了参数化，以后修改城市的时候，只要修改用户自定义变量就可以。</p><h2 id="正则表达式提取城市地区代码"><a href="#正则表达式提取城市地区代码" class="headerlink" title="正则表达式提取城市地区代码"></a>正则表达式提取城市地区代码</h2><p>（1）选择 GetCityCode 这个 HTTP 请求，用鼠标右键选择添加-&gt;后置处理器-&gt;正则表达式提取器。</p><p><img src="12.png" alt=""></p><p>通过正则表达式提取器把城市代码提取出来，并且存到变量 citycode，然后把这个变量提供给第二个 HTTP 请求使用。</p><p>关联：一个 HTTP 请求使用了另一个 HTTP 请求中的数据，两个请求之间发生了关联。</p><p>（2）新建第二个 HTTP 请求，命名为 GetWeather。发送一个 GET 请求到 <a href="http://www.weather">http://www.weather</a>. com.cn/weather1d/${citycode}.shtml。运行结果如下：</p><p><img src="13.png" alt=""></p><p>到这里天气接口的简单自动化测试就完成了。</p><h1 id="BeanShell"><a href="#BeanShell" class="headerlink" title="BeanShell"></a>BeanShell</h1><p>BeanShell 是一个小型的 Java 源代码解释器，具有对象脚本语言特性。其能够动态执行标准 Java 语法，可以通过脚本来处理 Java 应用程序。</p><p>BeanShell 使用内置对象 vars 对变量进行存取操作。</p><ul><li><code>vars.get(&quot;name&quot;)</code>：从 JMeter 中获得变量值。</li><li><code>vars.put(&quot;key&quot;，&quot;value&quot;)</code>：数据存到 JMeter 变量中。</li></ul><p><strong>实例：BeanShell 调用自己写的 jar 包进行 MD5 加密</strong></p><p>（1）在 Eclipse 新建工程，添加一个 class 文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">md5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMd5</span><span class="params">(String plainText)</span> </span>&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>); </span><br><span class="line">            md.update(plainText.getBytes()); </span><br><span class="line">            <span class="keyword">byte</span> b[] = md.digest(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i; </span><br><span class="line"></span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>); </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; b.length; offset++) &#123; </span><br><span class="line">                i = b[offset]; </span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>) </span><br><span class="line">                i += <span class="number">256</span>; </span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">16</span>) </span><br><span class="line">                        buf.append(<span class="string">&quot;0&quot;</span>); </span><br><span class="line">                    buf.append(Integer.toHexString(i)); </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//32位加密 </span></span><br><span class="line">                <span class="keyword">return</span> buf.toString(); </span><br><span class="line">                <span class="comment">// 16位的加密 </span></span><br><span class="line">                <span class="comment">//return buf.toString().substring(8, 24); </span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将工程导出为一个 jar 文件，取名为 md5.jar。</p><p>（2）启动 JMeter，在测试计划中引入这个 jar 包。</p><p><img src="14.png" alt=""></p><p>（3）在线程组中添加一个 BeanShell 取样器、一个调试取样器和一个查看结果树。</p><p><img src="15.png" alt=""></p><p><img src="16.png" alt=""></p><p>调试取样器中查看变量，可以看到密码被加密。</p><h1 id="自动登录禅道"><a href="#自动登录禅道" class="headerlink" title="自动登录禅道"></a>自动登录禅道</h1><h2 id="HTTP-Cookie-管理器"><a href="#HTTP-Cookie-管理器" class="headerlink" title="HTTP Cookie 管理器"></a>HTTP Cookie 管理器</h2><p>HTTP 协议本身是无状态的，为了维持登录的状态引入 Cookie 机制。</p><p>Cookie 的流程如下：<br>（1）浏览器发送第一个 HTTP 请求给 Web 服务器，里面包含用户名和密码。Web 服务器验证用户名和密码后，把登录相关的 Cookie 发送给浏览器客户端。<br>（2）浏览器客户端再一次访问的时候，会带上 Cookie，这样才处于登录状态，否则会被服务器跳转到登录页面。</p><p>用 JMeter 来模拟整个登录过程，需要在第一次登录后，用正则表达式提取器把登录相关的 Cookie 提取出来，然后把登录的 Cookie 插入后续的 HTTP 请求中形成关联。</p><p>JMeter 中的 HTTP Cookie 管理器可以自动管理 Cookie。如果 HTTP 响应中包含 Cookie，那么 HTTP Cookie 管理器会自动保存这些 Cookie。用户再次访问该站点时，HTTP 请求会自动使用这些 Cookie。一个线程组有自己存储 Cookie 的区域，并且一个线程组只能添加一个 HTTP Cookie 管理器。</p><p>选择线程组，用鼠标右键单击添加-&gt;配置元件-&gt;HTTP Cookie 管理器。</p><h2 id="自动登录禅道-1"><a href="#自动登录禅道-1" class="headerlink" title="自动登录禅道"></a>自动登录禅道</h2><p>（1）启动 Fiddler，启动过滤。在 Filter 选项卡中激活 Filter，并且在 Response Type and size 中选中“Show only HTML”。</p><p>（2）打开浏览器，输入 <a href="http://127.0.0.1:80/index.php（我部署的禅道地址），然后输入用户名和密码，单击“登录”。">http://127.0.0.1:80/index.php（我部署的禅道地址），然后输入用户名和密码，单击“登录”。</a></p><p>（3）从抓包可以看到，首先用 GET 方法得到一个数字（就是 verifyRand），然后用 POST 方法登录，但是密码是加密后发送给服务器的，Body 中的数据是 account=admin&amp;password=372539499122ad0a7085743c6c322bc8&amp;passwordStrength=1&amp;referer=%2Fzentao%2F&amp;verifyRand=527812645&amp;keepLogin=0&amp;captcha=。</p><p><img src="17.png" alt=""></p><p><img src="18.png" alt=""></p><p>（4）用浏览器的开发工具查看源代码，可以发现一个叫 md5 的 js 包。</p><p><img src="19.png" alt=""></p><p>查看登录页面的源代码发现加密规则是 <code>md5(md5(password) + rand)</code>，rand 就是上面说的 verifyRand，每次登录请求都会刷新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#loginPanel #submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> account          = $(<span class="string">&#x27;#account&#x27;</span>).val().trim();</span><br><span class="line">    <span class="keyword">var</span> password         = $(<span class="string">&#x27;input:password&#x27;</span>).val().trim();</span><br><span class="line">    <span class="keyword">var</span> passwordStrength = computePasswordStrength(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hasMD5    = <span class="keyword">typeof</span>(md5) == <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> referer   = $(<span class="string">&#x27;#referer&#x27;</span>).val();</span><br><span class="line">    <span class="keyword">var</span> link      = createLink(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> keepLogin = $(<span class="string">&#x27;#keepLoginon&#x27;</span>).attr(<span class="string">&#x27;checked&#x27;</span>) == <span class="string">&#x27;checked&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> captcha   = $(<span class="string">&#x27;#captcha&#x27;</span>).length == <span class="number">1</span> ? $(<span class="string">&#x27;#captcha&#x27;</span>).val() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    $.get(createLink(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;refreshRandom&#x27;</span>), <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> rand = data;</span><br><span class="line">        $.ajax</span><br><span class="line">        (&#123;</span><br><span class="line">            <span class="attr">url</span>: link,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;account&quot;</span>: account, </span><br><span class="line">                <span class="string">&quot;password&quot;</span>: hasMD5 ? md5(md5(password) + rand) : password,</span><br><span class="line">                <span class="string">&#x27;passwordStrength&#x27;</span> : passwordStrength,</span><br><span class="line">                <span class="string">&#x27;referer&#x27;</span> : referer,</span><br><span class="line">                <span class="string">&#x27;verifyRand&#x27;</span> : rand,</span><br><span class="line">                <span class="string">&#x27;keepLogin&#x27;</span> : keepLogin,</span><br><span class="line">                <span class="string">&#x27;captcha&#x27;</span> : captcha</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.result == <span class="string">&#x27;fail&#x27;</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    alert(data.message);</span><br><span class="line">                    <span class="keyword">if</span>($(<span class="string">&#x27;.captchaBox&#x27;</span>).length == <span class="number">1</span>) $(<span class="string">&#x27;.captchaBox .input-group .input-group-addon img&#x27;</span>).click();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                location.href = data.locate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>（5）重新写一个 jar 包实现禅道的加密，在测试计划中引入这个 jar 包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">md5</span> </span>&#123;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String key,String rand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5(md5(key) + rand);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//md5加密算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String plainText)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(plainText.getBytes());</span><br><span class="line">            <span class="keyword">byte</span> b[] = md.digest();</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; b.length; offset++) &#123;</span><br><span class="line">                i = b[offset];</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                    i += <span class="number">256</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">16</span>)</span><br><span class="line">                    buf.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                buf.append(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            result = buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）选择线程组，添加一个 HTTP Cookie 管理器，用来自动管理Cookie。</p><p>（7）选择线程组，添加一个 HTTP 请求默认值，填写的内容如图：</p><p><img src="20.png" alt=""></p><p>（8）选择线程组，添加用户自定义的变量。</p><p><img src="21.png" alt=""></p><p>（9）选择线程组，添加一个 HTTP 请求，命名为 Getverify，用来获取随机生成的 verifyRand，</p><p>GET <a href="http://127.0.0.1/zentao/user-refreshRandom.html。在这个请求下添加一个">http://127.0.0.1/zentao/user-refreshRandom.html。在这个请求下添加一个</a> HTTP 信息头管理器和一个 JSON 提取器。</p><p><img src="22.png" alt=""></p><p>（10）选择线程组，添加一个 BeanShell 取样器和一个调试取样器。</p><p><img src="23.png" alt=""></p><p>（11）选择线程组，添加一个 HTTP 请求，命名为 Login，用来登录禅道。添加一个 HTTP 信息头管理器，不填 Host 和 Cookie。</p><p><img src="24.png" alt=""></p><p>（12）添加一个察看结果树，运行就可以看到成功登录了。</p><p><img src="25.png" alt=""></p><h1 id="JMeter-给网站做压力测试"><a href="#JMeter-给网站做压力测试" class="headerlink" title="JMeter 给网站做压力测试"></a>JMeter 给网站做压力测试</h1><p>在一台电脑用 JMeter 模拟 200 个用户，同时去使用 bing 搜索不同的关键字， 查看页面返回的时间是否在正常范围内。</p><p>（1）首先把测试需要用到的 2 个参数放在 txt 文件中，新建一个 data.txt 文件，输入些数据， 一行有两个数据，用逗号分隔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">百度百科,苹果</span><br><span class="line">百度百科,西瓜</span><br><span class="line">百度百科,香蕉</span><br><span class="line">百度百科,菠萝</span><br><span class="line">百度百科,杨梅</span><br></pre></td></tr></table></figure><p>（2）启动 JMeter，先添加一个线程组，然后右击添加-&gt;配置元件-&gt;CSV数据文件设置。</p><p><img src="26.png" alt=""></p><p>（3）添加 HTTP 请求，发送 GET 到 <a href="http://cn.bing.com/search?q=testteststtssdfds">http://cn.bing.com/search?q=</a>百度百科+水果名称。</p><p><img src="27.png" alt=""></p><p>（3）选中线程组，修改配置。</p><p><img src="28.png" alt=""></p><p>Ramp-Up 时间(秒):：设置线程需要多长时间全部启动。如果线程数为 200 ，准备时长为 10 ，那么需要每秒钟启动 20 个线程。</p><p>循环次数：每个线程发送请求的次数。如果线程数为 200 ，循环次数为 10 ，那么每个线程发送 10 次请求。总请求数为 200*10=2000 。</p><p>（4）添加汇总报告，运行并查看报告。</p><p><img src="29.png" alt=""></p><ul><li>异常%：本次测试中出现错误请求的数量。正常情况下应该是 0.00%。否则就是功能出现了问题。也就是当大量用户访问的时候，造成了功能失败的问题，这个问题很严重。</li><li>平均值：平均响应时间，单位是 ms。对于一个 HTTP 请求来说，响应时间应该在 200ms 之内，但是图中的平均响应时间是 8007ms，说明性能非常差。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;JMeter-模拟-HTTP-请求&quot;&gt;&lt;a href=&quot;#JMeter-模拟-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;JMeter 模拟 HTTP 请求&quot;&gt;&lt;/a&gt;JMeter 模拟 HTTP 请求&lt;/h1&gt;</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler抓包</title>
    <link href="http://10185102110.github.io/2021/10/20/fiddler%E6%8A%93%E5%8C%85/"/>
    <id>http://10185102110.github.io/2021/10/20/fiddler%E6%8A%93%E5%8C%85/</id>
    <published>2021-10-20T12:06:36.000Z</published>
    <updated>2021-10-29T16:53:03.593Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="基本界面"><a href="#基本界面" class="headerlink" title="基本界面"></a>基本界面</h1><p><img src="0.png" alt=""></p><p>左半边是 Web Sessions 列表（会话列表），显示捕捉到的每个 Session 的简短信息。</p><p>下面的一行黑框是 QuickExec（命令行工具），可以输入简单的命令，例如输入 cls 可以清空 Web Sessions。</p><p>右半边是 Inspectors 选项卡（功能面板），上面是 HTTP 请求报文，下面是 HTTP 响应报文。其中 Raw 选项卡可以查看完整的消息，Headers 选项卡只查看消息中的 Header。</p><p>Web Sessions 列表栏中包含的信息如下：</p><div class="table-container"><table><thead><tr><th>#</th><th>Result</th><th>Protocol</th><th>Host</th><th>URL</th><th>Body</th><th>Caching</th><th>Content-Type</th><th>Process</th></tr></thead><tbody><tr><td>Fiddler 生成的 ID</td><td>响应的状态码</td><td>使用的协议：HTTP/HTTPS</td><td>服务器的主机名和端口号</td><td>路径</td><td>响应中包含的字节数</td><td>跟缓存相关的字段的值</td><td>响应中 Content-Type 的值</td><td>对应本地 zhuabao</td></tr></tbody></table></div><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>Fiddler 是以代理 Web 服务器的形式工作的，它使用代理地址：127.0.0.1，端口：8888。</p><p>Fiddler 启动的时候，会偷偷地把 Internet 选项中的代理修改为 127.0.0.1，端口：8888。当 Fiddler 退出的时候，它会自动在 Internet 选项中取消代理，这样就不会影响别的程序。如果 Fiddler 非正常退出，这时候因为 Fiddler 没有自动注销，会造成网页无法访问，解决办法是重新启动 Fiddler。</p><h1 id="捕获-HTTP-HTTPS-协议的数据包"><a href="#捕获-HTTP-HTTPS-协议的数据包" class="headerlink" title="捕获 HTTP/HTTPS 协议的数据包"></a>捕获 HTTP/HTTPS 协议的数据包</h1><p>（1）启动 Fiddler，打开任何一个浏览器，输入 <a href="https://avebai.gitee.io/">https://avebai.gitee.io/</a>。</p><p>（2）回到 Fiddler 界面，在 Session 列表中，会看到 Fiddler 已经捕获到了很多 Session。可以选择任何一个 Session，然后选择 Inspectors 选项卡，就可以查看详细内容。</p><p>单击 Fiddler 左下角的 “Capturing” 按钮可以设置开始抓包或者停止抓包。</p><h2 id="HTTP-协议报文结构"><a href="#HTTP-协议报文结构" class="headerlink" title="HTTP 协议报文结构"></a>HTTP 协议报文结构</h2><p>HTTP 报文分 2 个：一个是 HTTP 请求报文，一个是 HTTP 响应报文。</p><p>（1）HTTP 请求报文的结构</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//起始行（Request line）</span><br><span class="line"><span class="keyword">GET</span> <span class="string">https://avebai.gitee.io/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">//首部（Request Header）</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>avebai.gitee.io    </span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Microsoft Edge&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.30  </span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9     </span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br  </span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6  </span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>Hm_lvt_211d055ab9f6b88805047adca6ce783d=1633064099,1634716265,1634914872,1635040194; Hm_lpvt_211d055ab9f6b88805047adca6ce783d=1635040543</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>W/&quot;6172d18e-a294&quot;</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 22 Oct 2021 14:58:22 GMT</span><br><span class="line">回车符+换行符</span><br><span class="line">//主体（Body）</span><br></pre></td></tr></table></figure><p>HTTP 请求报文分为 3 部分。其中首部第一行表示请求方法（POST/GET）+URI（不是URL）+协议版本，如果是 GET 就没有主体。</p><p>（2）HTTP 响应报文的结构</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//起始行（Response line）</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">304</span> Not Modified</span><br><span class="line">//首部（Response Header）</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Oct 2021 02:07:42 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Fri, 22 Oct 2021 14:58:22 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;6172d18e-a294&quot;</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Mon, 25 Oct 2021 02:07:42 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=86400</span><br><span class="line">回车符+换行符</span><br><span class="line">//主体（Body）</span><br></pre></td></tr></table></figure><p>Response 消息的结构和 Request 消息的结构基本一样。</p><p>起始行包括协议版本+状态码+状态码信息。</p><div class="table-container"><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1XX</td><td>信息提示，表示请求已被成功接收，继续处理</td></tr><tr><td>2XX</td><td>成功，表示请求已被成功接收</td></tr><tr><td>3XX</td><td>重定向，必须进一步处理</td></tr><tr><td>4XX</td><td>客户端错误，请求有语法错误或请求无法实现</td></tr><tr><td>5XX</td><td>服务器错误，服务器未能实现合法的请求</td></tr></tbody></table></div><p>常见的状态码：</p><ul><li>200：OK，服务器成功处理了请求。</li><li>204：No Content，没有内容。</li><li>206：Partial Content，部分内容。</li><li>301/302：Moved Permanently，请求的 URL 已移走。</li><li>304：Not Modified，上次的文档已被缓存且是最新的，可以继续使用。</li><li>400：Bad Request，客户端请求有语法错误。</li><li>403：Forbidden，拒绝访问。</li><li>404：Not Found，未找到资源。</li><li>401：Unauthorized，未授权错误禁止访问。</li><li>501：Internal Server Error，服务器内部错误。</li><li>503：Server Unavailable，服务器暂时不可用。</li></ul><p>（3）URL</p><p>URL 的全称是Uniform Resource Locator，中文译名为“统一资源定位符”，用于完整地描述 Internet 上某一处资源的地址。<br>URI 的全称是 Uniform Resource Identifier，中文译名为“统一资源标识符”，用来唯一地标识一个资源。而 URL 是一种具体的 URI。</p><p>URL 的基本格式：协议+域名+资源路径+参数+锚</p><p>协议一般为 http、https、ftp 等；锚以 ‘#’ 开头。</p><p>参数可以通过 fiddler 中的 WebForms 查看。</p><p>锚是页面内部的超链接，可以快速到达本页内响应的位置。</p><p>（4）HTTP 请求方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息并返回实体主体。</td></tr><tr><td>HEAD</td><td>类似 GET，但返回的响应中没有具体内容，用于获取报文头部。</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理，数据被包含在请求体中。可能导致新资源的建立或对已有资源的修改。</td></tr><tr><td>PUT</td><td>向服务器传送数据。</td></tr><tr><td>DELETE</td><td>请求服务器删除指定页面。</td></tr></tbody></table></div><p>GET 和 POST 的区别：</p><ul><li>GET 提交的数据会放在 URL 之后，以 ‘？’ 分割 URL 和传输的数据，参数之间以 ‘&amp;’ 相连。POST 方法是把提交的数据放在 HTTP 包的 Body 中。</li><li>GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的数据大小没有限制。</li><li>GET 方式提交数据会带来安全问题，比如一个登录页面通过 GET 方式提交数据时，用户名和密码将出现在 URL 上。</li></ul><p>（5）Header</p><div class="table-container"><table><thead><tr><th>Header 字段</th><th>描述</th></tr></thead><tbody><tr><td>Cookie</td><td></td></tr><tr><td>Accept</td><td>表示浏览器可以接受的媒体类型。</td></tr><tr><td>Accept-Encoding</td><td>表示浏览器支持的压缩方式。</td></tr><tr><td>Accept-Language</td><td>表示浏览器支持的语言。</td></tr><tr><td>User-Agent</td><td>告诉服务器，浏览器客户端的相关信息，可以修改它伪装成任何客户端</td></tr><tr><td>Referer</td><td>用来让服务器判断用户的来源页面</td></tr><tr><td>Connection</td><td>表示 TCP 连接信息</td></tr><tr><td>Host</td><td>指定被请求的主机和端口号</td></tr><tr><td></td></tr></tbody></table></div><h2 id="设置断点拦截-HTTP-请求"><a href="#设置断点拦截-HTTP-请求" class="headerlink" title="设置断点拦截 HTTP 请求"></a>设置断点拦截 HTTP 请求</h2><p>一、全局断点</p><p>（1）启动 Fiddler，在菜单栏中单击 Rules -&gt; Automatic Breakpoint -&gt; Before Requests。</p><p>（2）打开浏览器，输入“www.baidu.com”，这时任务栏上的 Fiddler 图标闪烁，说明 Fiddler 拦截住了 HTTP 请求。</p><p>（3）在菜单栏中单击 Rules-&gt; Automatic Breakpoint-&gt;Disable（因为已经拦截住想要的 HTTP 请求了，其他 HTTP 请求就不需要拦截了）。</p><p>（4）选中需要修改的 HTTP 请求，选中 “Inspectors” 面板，可以使用 Raw 选项卡修改请求文件。</p><p>（5）单击绿色的 “Run to Completion” 按钮放行。</p><p>二、单个断点</p><p>命令行输入：bpm www.baidu.cm（拦截 www.baidu.com 请求）</p><p>输入命令：bpu （解除拦截）</p><h2 id="设置断点修改-HTTP-响应"><a href="#设置断点修改-HTTP-响应" class="headerlink" title="设置断点修改 HTTP 响应"></a>设置断点修改 HTTP 响应</h2><p>一、全局断点</p><p>（1）启动 Fiddler，在菜单栏中单击 Rules -&gt; Automatic Breakpoint -&gt; After Response。</p><p>（2）打开浏览器，输入“www.baidu.com”，这时任务栏上的 Fiddler 图标闪烁，说明 Fiddler 拦截住了 HTTP 请求。</p><p>（3）在菜单栏中单击 Rules-&gt; Automatic Breakpoint-&gt;Disable（因为已经拦截住想要的 HTTP 请求了，其他 HTTP 请求就不需要拦截了）。</p><p>（4）选中需要修改的 HTTP 请求，选中 “Inspectors” 面板，可以使用 Raw 选项卡修改响应文件。</p><p>（5）单击绿色的 “Run to Completion” 按钮放行。</p><p>二、单个断点</p><p>命令行输入：bpafter www.baidu.com（拦截 www.baidu.com 响应）</p><p>输入命令：bpafter （解除拦截）</p><h1 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h1><p>（1）启动 Fiddler，单击菜单栏中 Tools-&gt;Options-&gt;Connections，选中“Allow remote computers to connect”，Fiddler 的默认端口号是 8888。</p><p>（2）以小米 10 为例，打开手机中的设置-&gt;WLAN，找到手机当前连接的 WiFi，修改代理服务器，服务器主机名为 Fiddler 所在电脑的 IP 地址，服务器端口为 8888，如下图所示：</p><p><img src="2.jpg" alt=""></p><p>在 Fiddler 中，将鼠标放在右上方的“online”图标上能看到主机 IP 地址。</p><p>（3）现在在手机上打开网址或者应用就能在 Fiddler 中捕获手机发出的 HTTP 包，可以设置过滤条件，如下：</p><p><img src="3.png" alt=""></p><p>（4）要捕获 HTTPS 包就要在手机上安装证书。打开手机浏览器，输入 <a href="http://192.168.1.101:8888">http://192.168.1.101:8888</a> ，点击图中蓝色字段下载证书，点击证书文件进行安装即可。</p><p><img src="1.jpg" alt=""></p><p>（5）点击设置-&gt;系统安全-&gt;信任的凭证-&gt;用户 可以看到安装的证书，点击删除即可卸载。</p><p><img src="4.jpg" alt=""></p><h1 id="Fiddler-发送-HTTP-HTTPS-请求"><a href="#Fiddler-发送-HTTP-HTTPS-请求" class="headerlink" title="Fiddler 发送 HTTP/HTTPS 请求"></a>Fiddler 发送 HTTP/HTTPS 请求</h1><p>功能组件 Composer 可以用来发送 HTTP/HTTPS 请求。</p><p><img src="5.png" alt=""></p><p>Composer 有两种编辑模式：</p><ul><li>Parsed模式。这个模式比较常用，把请求分为 3 个部分：请求起始行、请求 Header 和请求 Body。</li><li>Raw模式。该模式需要一行一行地写一个请求。</li></ul><p>也可以把会话列表中的 HTTP/HTTPS 请求拖拽到 Composer 中编辑后再发送出去。</p><h2 id="Replay-菜单"><a href="#Replay-菜单" class="headerlink" title="Replay 菜单"></a>Replay 菜单</h2><p>在会话列表中，选中一个或者多个 Session，右键-&gt;Replay，可以看到一个菜单，详细说明如下：</p><div class="table-container"><table><thead><tr><th>Reissue Requests</th><th>重复发送请求</th></tr></thead><tbody><tr><td>Reissue Unconditionally</td><td>无条件反复发送选中的请求</td></tr><tr><td>Reissue and Edit</td><td>把选中的请求以原来的形式重新发送。在每个Session中设置断点，可以在发送给服务器之前修改请求</td></tr><tr><td>Reissue and Verify</td><td>重新发送请求，检查响应，如果和上一个请求一样就变成绿色</td></tr><tr><td>Reissue Sequentially</td><td>选中多个Session会按顺序重新发送请求，单线程</td></tr><tr><td>Reissue from Composer</td><td>在Composer中编辑该请求</td></tr><tr><td>Revisit in IE</td><td>在IE浏览器中用Get方法访问该请求</td></tr></tbody></table></div><h2 id="简单的性能测试"><a href="#简单的性能测试" class="headerlink" title="简单的性能测试"></a>简单的性能测试</h2><p>在 Web Sessions 列表中，选中一个或者多个 Session，然后按下 Shift 键的同时单击“Replay”按钮，会弹出提示框，要求指定每个请求被重新发送的次数。Fiddler 会用多线程同时发送该请求，相当于模拟了很多用户同时访问该请求。</p><p><img src="6.png" alt=""></p><h2 id="安全测试之重放攻击"><a href="#安全测试之重放攻击" class="headerlink" title="安全测试之重放攻击"></a>安全测试之重放攻击</h2><p>重放攻击（Replay Attacks），指黑客通过抓包的方式，得到客户端的请求数据及请求连接，重复地向服务器发送请求的行为。</p><p>重放攻击的危害很大，比如下单、投票、点赞等功能，攻击者可以对用户的请求进行抓包，然后重复发送来进行刷单、刷票等操作。</p><p><strong>如何防止重放攻击？</strong></p><p>在 HTTP/HTTPS 请求中添加时间戳（stamp）和数字签名（sign），可以防止重放攻击。也就是说每次发送请求时需要多传两个参数，分别为 stamp 和 sign。数字签名使用对称加密，保证请求的有效性；时间戳保证请求的时效性。</p><h1 id="Fiddler-实现弱网测试"><a href="#Fiddler-实现弱网测试" class="headerlink" title="Fiddler 实现弱网测试"></a>Fiddler 实现弱网测试</h1><p>Fiddler 是通过延迟发送或接收数据的时间来模拟限速的。</p><p>需要模拟出以下 3 种弱网场景：<br>（1）网络慢或延迟，导致加载时间长。<br>（2）网络中断，Web 服务器返回 500 等状态码。<br>（3）网络超时，HTTP/HTTPS 请求发出去后，很久都没有响应。</p><h2 id="精确控制网速"><a href="#精确控制网速" class="headerlink" title="精确控制网速"></a>精确控制网速</h2><p>（1）启动 Fiddler，选择 Rules -&gt; Performances -&gt; Simulate Modem Speeds，此时打开一个网页可以感觉到明显变慢。</p><p>（2）点击菜单 Rules-&gt;Customize Rules，在 FiddlerScript 中找到如下一段代码（ctrl+F 快速查找）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (m_SimulateModem) &#123;</span><br><span class="line">// Delay sends by 300ms per KB uploaded.每上传1kb数据，延时0.3秒</span><br><span class="line">oSession[&quot;request-trickle-delay&quot;] = &quot;300&quot;; </span><br><span class="line">    // Delay receives by 150ms per KB downloaded.每下载1kb数据，延时0.15秒</span><br><span class="line">    oSession[&quot;response-trickle-delay&quot;] = &quot;150&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以修改数值以精确控制网速。</p><p>网络取值的算法就是 1000/下载速度 = 需要延迟的时间（ms），比如 50kbit/s 需要延迟 200ms 来接收数据。</p><h2 id="模拟网络中断"><a href="#模拟网络中断" class="headerlink" title="模拟网络中断"></a>模拟网络中断</h2><p>用 Fiddler 可以下断点，伪造 HTTP 响应。客户端发出的 HTTP 请求根本没有到达服务器，而是被 Fiddler 直接返回了一个伪造的 HTTP 响应。</p><p>具体做法是用 Fiddler 拦截住客户端发出来的 HTTP 请求，然后在“Choose Response”选中需要返回的状态码，然后单击“Run to Completion”返回给客户端，如下图：</p><p><img src="7.png" alt=""></p><p>返回的页面信息被改为 502。</p><h2 id="Fiddler-模拟网络超时"><a href="#Fiddler-模拟网络超时" class="headerlink" title="Fiddler 模拟网络超时"></a>Fiddler 模拟网络超时</h2><p>利用 Fiddler 下断点的功能拦截住移动客户端发出的 HTTP 请求，这样就相当于网络超时了，然后再检查客户端有没有重发或者超时的机制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;基本界面&quot;&gt;&lt;a href=&quot;#基本界面&quot; class=&quot;headerlink&quot; title=&quot;基本界面&quot;&gt;&lt;/a&gt;基本界面&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;左半边是 Web Sessions</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>设计一个加密算法</title>
    <link href="http://10185102110.github.io/2021/10/14/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>http://10185102110.github.io/2021/10/14/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</id>
    <published>2021-10-14T11:24:56.000Z</published>
    <updated>2021-10-22T14:55:13.209Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>密钥为一个随机密码本中的一个随机段落，以下步骤采用同一密钥。</p><ul><li><p>先采用维吉尼亚(Vigenere)表的一次密码本加密。</p><p>Vigenere 表：</p><p><img src="0.png" alt=""></p><p>加密示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">密钥(列选择器)：iamie   xistt   hatis   cert</span><br><span class="line">明文(行选择器)：MACHI   NESCA   NNOTT   HINK</span><br><span class="line">密文(表中的值)：uaopm   kmkvt   unhbl   jmed</span><br></pre></td></tr></table></figure></li><li><p>再采用带密钥的简单列置换算法对第一步得到的密文加密，行入列出。</p><p>加密示例：</p><p>假设明文为：endalen is bordered on the northwest by the municipalities of alvdal and tynset</p><ol><li>选取密钥，比如 sample。（以此确定矩阵每行字符数以及输出列选择顺序。如有相同字母，保留最左边，其他剔除）。</li><li>按照密钥 sample 中各字母的排列顺序来确定输出列选择顺序。（字母表排列在前的值小），sample 对应的输出列选择顺序为：614532。</li><li>按密钥长度按行写明文为如下（去掉空格），最末一行如不足一行，随便添点数据。</li><li>按 614532 顺序按列读下面的矩阵，得到密文：niettbuasdtaerooseiilneelodnehctaasddsrhhynloaybabeewtiiflncendnrtmpevdt</li><li>解密时，将密文按 614532 顺序按列填写矩阵，然后按行读取即是明文。</li></ol><p><img src="1.png" alt=""></p></li><li><p>解密时，先用列入行出的列置换算法解密，再用 Vigenere 表解密。</p></li></ul><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><ul><li>Windows 10</li><li>JDK 1.8.0_301</li></ul><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><p>主要函数功能说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成维吉尼亚表</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FixVigenere</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//加密，明文仅支持大写字母</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Encode</span><span class="params">(String s,String password)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//解密，密文仅支持小写字母</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Decode</span><span class="params">(String s,String password)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//得到列选择顺序</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">MySort</span><span class="params">(String password)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//随机生成密钥</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">GeneratePassword</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span>[][] vigenere = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String lowStr = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> colleft; <span class="comment">//列置换时记录最后一行应有的字符个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成维吉尼亚表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FixVigenere</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=i;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                vigenere[i][j-i] = lowStr.charAt(j);</span><br><span class="line">            &#125;</span><br><span class="line">            j = j-i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                vigenere[i][j++] = lowStr.charAt(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Encode</span><span class="params">(String s,String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先替换密码</span></span><br><span class="line">        String ss = s.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = ss.length(); <span class="comment">//明文长度</span></span><br><span class="line">        StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = ss.charAt(index)-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">int</span> col = password.charAt(index % password.length())-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            str.append(vigenere[row][col]);</span><br><span class="line">            length--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后置换密码，行入列出</span></span><br><span class="line">        String sss = str.toString();</span><br><span class="line">        <span class="keyword">int</span>[] arr = MySort(password);</span><br><span class="line">        <span class="keyword">int</span> rowlen = (<span class="keyword">int</span>)Math.ceil((<span class="keyword">double</span>)sss.length()/arr.length);</span><br><span class="line">        colleft = sss.length() % arr.length;</span><br><span class="line">        <span class="keyword">char</span>[][] ColChange = <span class="keyword">new</span> <span class="keyword">char</span>[rowlen][arr.length];</span><br><span class="line">        <span class="comment">//最后一行的空位填充</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-colleft;i++)&#123;</span><br><span class="line">            ColChange[ColChange.length-<span class="number">1</span>][colleft+i] = (<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sss.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = i / arr.length;</span><br><span class="line">            <span class="keyword">int</span> col = i % arr.length;</span><br><span class="line">            ColChange[row][col] = sss.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        ArrayList&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)&#123;</span><br><span class="line">            l.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sssindex = <span class="number">0</span>;</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++)&#123;</span><br><span class="line">            index = l.indexOf(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ColChange.length;j++)&#123;</span><br><span class="line">                ans.append(ColChange[j][index]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Decode</span><span class="params">(String s,String password)</span></span>&#123;</span><br><span class="line">        String sss = s.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//置换密码，列入行出</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = MySort(password);</span><br><span class="line">        <span class="keyword">int</span> rowlen = sss.length()/arr.length;</span><br><span class="line">        <span class="keyword">char</span>[][] ColChange = <span class="keyword">new</span> <span class="keyword">char</span>[rowlen][arr.length];</span><br><span class="line">        ArrayList&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)&#123;</span><br><span class="line">            l.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sssindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = l.indexOf(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ColChange.length;j++)&#123;</span><br><span class="line">                ColChange[j][index] = sss.charAt(sssindex++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ColChange.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">                ans.append(ColChange[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;colleft;i++)&#123;</span><br><span class="line">            ans.append(ColChange[ColChange.length-<span class="number">1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//替换密码</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        String ss = ans.toString();</span><br><span class="line">        <span class="keyword">int</span> length = ss.length();</span><br><span class="line">        StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> key = password.charAt(index % password.length());</span><br><span class="line">            <span class="keyword">int</span> col = key-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">char</span> mi = ss.charAt(index);</span><br><span class="line">            <span class="keyword">char</span> ming;</span><br><span class="line">            <span class="keyword">if</span>(mi&gt;=key)&#123;</span><br><span class="line">                ming = (<span class="keyword">char</span>)(mi-key+<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ming = (<span class="keyword">char</span>)(<span class="string">&#x27;Z&#x27;</span>-(key-mi-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            str.append(ming);</span><br><span class="line">            length--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到列选择顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] MySort(String password)&#123;</span><br><span class="line">        ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;password.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = password.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(c)) list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Character ch : list) &#123;</span><br><span class="line">            str.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        String s = str.toString();</span><br><span class="line">        <span class="comment">//System.out.println(s);</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            arr[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(j)&gt;s.charAt(i))&#123;</span><br><span class="line">                    arr[j]++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    arr[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机生成密钥</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">GeneratePassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>, n = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> length = (<span class="keyword">int</span>)(Math.random()*(n-m)+m);</span><br><span class="line">        StringBuffer password = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = (<span class="keyword">int</span>)(Math.random()*<span class="number">26</span>);</span><br><span class="line">            password.append(lowStr.charAt(index));</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成维吉尼亚表</span></span><br><span class="line">        FixVigenere();</span><br><span class="line">        <span class="comment">//随机生成密钥</span></span><br><span class="line">        String password = GeneratePassword();</span><br><span class="line"></span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;密码 @AveBai 2021/10/16&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">850</span>, <span class="number">600</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建中间容器（面板容器）</span></span><br><span class="line">        JSplitPane splitPane = <span class="keyword">new</span> JSplitPane();</span><br><span class="line">        JPanel panel1 = <span class="keyword">new</span> JPanel(<span class="keyword">null</span>);</span><br><span class="line">        JPanel panel2 = <span class="keyword">new</span> JPanel(<span class="keyword">null</span>);</span><br><span class="line">        splitPane.setLeftComponent(panel1);</span><br><span class="line">        splitPane.setRightComponent(panel2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          加密界面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        JLabel label1 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label1.setBounds(<span class="number">20</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">        label1.setText(<span class="string">&quot;输入明文:&quot;</span>);</span><br><span class="line">        label1.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        label1.setForeground(Color.BLUE);</span><br><span class="line">        panel1.add(label1);</span><br><span class="line"></span><br><span class="line">        JLabel label3 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label3.setBounds(<span class="number">20</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">        label3.setText(<span class="string">&quot;友情提示:仅支持大写字母&quot;</span>);</span><br><span class="line">        label3.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">        panel1.add(label3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域组件</span></span><br><span class="line">        JTextArea textArea1 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea1.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea1.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        JTextArea textArea2 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea2.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea2.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane1 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea1,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane1.setBounds(<span class="number">20</span>,<span class="number">50</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel1.add(scrollPane1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域组件</span></span><br><span class="line">        JTextArea textArea3 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea3.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea3.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        JTextArea textArea4 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea4.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea4.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密按钮</span></span><br><span class="line">        <span class="keyword">final</span> JButton btn1 = <span class="keyword">new</span> JButton(<span class="string">&quot;加密&quot;</span>);</span><br><span class="line">        btn1.setBounds(<span class="number">20</span>,<span class="number">260</span>,<span class="number">80</span>,<span class="number">35</span>);</span><br><span class="line">        btn1.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        btn1.setForeground(Color.BLUE);</span><br><span class="line">        btn1.setContentAreaFilled(<span class="keyword">false</span>);</span><br><span class="line">        btn1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                textArea3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                textArea3.append(Encode(textArea1.getText(),password));</span><br><span class="line">                textArea2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                textArea2.append(textArea3.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel1.add(btn1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane3 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea3,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane3.setBounds(<span class="number">20</span>,<span class="number">320</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel1.add(scrollPane3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          解密界面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        JLabel label2 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label2.setBounds(<span class="number">20</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">        label2.setText(<span class="string">&quot;输入密文:&quot;</span>);</span><br><span class="line">        label2.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        label2.setForeground(Color.BLUE);</span><br><span class="line">        panel2.add(label2);</span><br><span class="line"></span><br><span class="line">        JLabel label4 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label4.setBounds(<span class="number">20</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">        label4.setText(<span class="string">&quot;友情提示:仅支持小写字母&quot;</span>);</span><br><span class="line">        label4.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">        panel2.add(label4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane2 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea2,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane2.setBounds(<span class="number">20</span>,<span class="number">50</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel2.add(scrollPane2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密按钮</span></span><br><span class="line">        <span class="keyword">final</span> JButton btn2 = <span class="keyword">new</span> JButton(<span class="string">&quot;解密&quot;</span>);</span><br><span class="line">        btn2.setBounds(<span class="number">20</span>,<span class="number">260</span>,<span class="number">80</span>,<span class="number">35</span>);</span><br><span class="line">        btn2.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        btn2.setForeground(Color.BLUE);</span><br><span class="line">        btn2.setContentAreaFilled(<span class="keyword">false</span>);</span><br><span class="line">        btn2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                textArea4.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                textArea4.append(Decode(textArea2.getText(),password));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel2.add(btn2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane4 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea4,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane4.setBounds(<span class="number">20</span>,<span class="number">320</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel2.add(scrollPane4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分隔条上显示快速 折叠/展开 两边组件的小按钮</span></span><br><span class="line">        splitPane.setOneTouchExpandable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 拖动分隔条时连续重绘组件</span></span><br><span class="line">        splitPane.setContinuousLayout(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置分隔条的初始位置</span></span><br><span class="line">        splitPane.setDividerLocation(<span class="number">400</span>);</span><br><span class="line">        <span class="comment">// 把分隔面板作为内容面板添加到窗口并显示</span></span><br><span class="line">        jf.setContentPane(splitPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        textArea1.append(<span class="string">&quot;MACHINESCANNOTTHINK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;p&gt;密钥为一个随机密码本中的一个随机段落，以下步骤采用同一密钥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先采用维吉尼亚(Vi</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="信息安全" scheme="http://10185102110.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java swing</title>
    <link href="http://10185102110.github.io/2021/10/14/Java%20swing/"/>
    <id>http://10185102110.github.io/2021/10/14/Java%20swing/</id>
    <published>2021-10-14T08:51:52.000Z</published>
    <updated>2021-10-17T15:39:29.457Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Swing 是 Java 为图形界面应用开发提供的一组工具包，是 Java 基础类的一部分。</p><p>Swing 包含了构建图形界面（GUI）的各种组件，如: 窗口、标签、按钮、文本框等。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>一个 Java 的图形界面，由各种不同类型的“元素”组成，例如: 窗口、菜单栏、对话框、标签、按钮、文本框等等，这些“元素”统一被称为组件（Component）。</p><p>组件按照不同的功能，可分为顶层容器、中间容器、基本组件。一个简单窗口的组成，如下层级结构所示:</p><ul><li>顶层容器<ul><li>菜单栏</li><li>中间容器<ul><li>基本组件</li><li>基本组件</li></ul></li></ul></li></ul><p>组件类型的继承关系:</p><ol><li>顶层容器属于窗口类组件，继承自 java.awt.Window；</li><li>中间容器和基本组件 继承自 javax.swing.JComponent。</li></ol><h3 id="顶层容器"><a href="#顶层容器" class="headerlink" title="顶层容器"></a>顶层容器</h3><p>顶层容器属于窗口类组件，可以独立显示，一个图形界面至少需要一个窗口，例如:</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JFrame</td><td>一个普通的窗口（绝大多数 Swing 图形界面程序使用 JFrame 作为顶层容器）</td></tr><tr><td style="text-align:center">2</td><td>JDialog</td><td>对话框</td></tr></tbody></table></div><h3 id="中间容器"><a href="#中间容器" class="headerlink" title="中间容器"></a>中间容器</h3><p>中间容器充当基本组件的载体，不可独立显示。中间容器可以添加若干基本组件（也可以嵌套添加中间容器），对容器内的组件进行管理，类似于给各种复杂的组件进行分组管理。最顶层的一个中间容器必须依托在顶层容器（窗口）内。</p><p>常用的中间容器（面板）:</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JPanel</td><td>一般轻量级面板容器组件</td></tr><tr><td style="text-align:center">2</td><td>JScrollPane</td><td>带滚动条的，可以水平和垂直滚动的面板组件</td></tr><tr><td style="text-align:center">3</td><td>JSplitPane</td><td>分隔面板</td></tr><tr><td style="text-align:center">4</td><td>JTabbedPane</td><td>选项卡面板</td></tr><tr><td style="text-align:center">5</td><td>JLayeredPane</td><td>层级面板</td></tr></tbody></table></div><p>特殊的中间容器：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JMenuBar</td><td>菜单栏</td></tr><tr><td style="text-align:center">2</td><td>JToolBar</td><td>工具栏</td></tr><tr><td style="text-align:center">3</td><td>JPopupMenu</td><td>弹出菜单</td></tr><tr><td style="text-align:center">4</td><td>JInternalFrame</td><td>内部窗口</td></tr></tbody></table></div><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><p>基本组件是直接实现人机交互的组件。</p><p>常用的简单的基本组件:</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JLabel</td><td>标签</td></tr><tr><td style="text-align:center">2</td><td>JButton</td><td>按钮</td></tr><tr><td style="text-align:center">3</td><td>JRadioButton</td><td>单选按钮</td></tr><tr><td style="text-align:center">4</td><td>JCheckBox</td><td>复选框</td></tr><tr><td style="text-align:center">5</td><td>JToggleButton</td><td>开关按钮</td></tr><tr><td style="text-align:center">6</td><td>JTextField</td><td>文本框</td></tr><tr><td style="text-align:center">7</td><td>JPasswordField</td><td>密码框</td></tr><tr><td style="text-align:center">8</td><td>JTextArea</td><td>文本区域</td></tr><tr><td style="text-align:center">9</td><td>JComboBox</td><td>下拉列表框</td></tr><tr><td style="text-align:center">10</td><td>JList</td><td>列表</td></tr><tr><td style="text-align:center">11</td><td>JProgressBar</td><td>进度条</td></tr><tr><td style="text-align:center">12</td><td>JSlider</td><td>滑块</td></tr></tbody></table></div><p>选取器组件：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JFileChooser</td><td>文件选取器</td></tr><tr><td style="text-align:center">2</td><td>JColorChooser</td><td>颜色选取器</td></tr></tbody></table></div><p>其他较为复杂的基本组件：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JTable</td><td>表格</td></tr><tr><td style="text-align:center">2</td><td>JTree</td><td>树</td></tr></tbody></table></div><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><p>把 <code>Swing</code> 的各种组件(<code>JComponent</code>)添加到面板容器中(<code>JPanel</code>)，需要给面板容器指定布局管理器(<code>LayoutManager</code>)，明确容器(<code>Container</code>)内的各个组件之间的排列布局方式。</p><p>常用的布局管理器：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>布局管理器</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>FlowLayout</td><td>流式布局，按组件加入的顺序，按水平方向排列，排满一行换下一行继续排列。</td></tr><tr><td style="text-align:center">2</td><td>GridLayout</td><td>网格布局，把<code>Container</code>按指定行列数分隔出若干网格，每一个网格按顺序放置一个控件。</td></tr><tr><td style="text-align:center">3</td><td>GridBagLayout</td><td>网格袋布局，按网格划分<code>Container</code>，每个组件可占用一个或多个网格，可将组件垂直、水平或沿它们的基线对齐。</td></tr><tr><td style="text-align:center">4</td><td>BoxLayout</td><td>箱式布局，将<code>Container</code>中的多个组件按 水平 或 垂直 的方式排列。</td></tr><tr><td style="text-align:center">5</td><td>GroupLayout</td><td>分组布局，将组件按层次分组（串行 或 并行），分别确定 组件组 在 水平 和 垂直 方向上的位置。</td></tr><tr><td style="text-align:center">6</td><td>CardLayout</td><td>卡片布局，将<code>Container</code>中的每个组件看作一张卡片，一次只能显示一张卡片，默认显示第一张卡片。</td></tr><tr><td style="text-align:center">7</td><td>BorderLayout</td><td>边界布局，把<code>Container</code>按方位分为 5 个区域（东、西、南、北、中），每个区域放置一个组件。</td></tr><tr><td style="text-align:center">8</td><td>SpringLayout</td><td>弹性布局，通过定义组件四条边的坐标位置来实现布局。</td></tr><tr><td style="text-align:center">9</td><td>null</td><td>绝对布局，通过设置组件在<code>Container</code>中的<strong>坐标位置</strong>来放置组件。</td></tr></tbody></table></div><p>若采用绝对布局，给组件设置坐标和宽高的方法（方法定义在 Component 组件基类中）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置组件的坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的宽高</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Dimension d)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的界限（一次性设置组件的 坐标 和 宽高）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBounds</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBounds</span><span class="params">(Rectangle rect)</span></span></span><br></pre></td></tr></table></figure><h2 id="一个简单的窗口程序"><a href="#一个简单的窗口程序" class="headerlink" title="一个简单的窗口程序"></a>一个简单的窗口程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个顶层容器（窗口）</span></span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);        </span><br><span class="line">        jf.setSize(<span class="number">700</span>, <span class="number">500</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);  <span class="comment">// 把窗口位置设置到屏幕中心</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); </span><br><span class="line">        <span class="comment">// 当点击窗口的关闭按钮时退出程序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建中间容器（面板容器）</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个基本组件（按钮），并添加到 面板容器 中</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把面板容器作为窗口的内容面板 设置到 窗口</span></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示窗口</span></span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaSwing-面板组件"><a href="#JavaSwing-面板组件" class="headerlink" title="JavaSwing 面板组件"></a>JavaSwing 面板组件</h1><h2 id="JPanel（面板）"><a href="#JPanel（面板）" class="headerlink" title="JPanel（面板）"></a>JPanel（面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JPanel.html">javax.swing.JPanel</a></p><p>JPanel 常用构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建默认使用流式布局的面板</span></span><br><span class="line">JPanel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建指定布局管理器的面板</span></span><br><span class="line">JPanel(LayoutManager layout)</span><br></pre></td></tr></table></figure><h2 id="JScrollPane（滚动面板）"><a href="#JScrollPane（滚动面板）" class="headerlink" title="JScrollPane（滚动面板）"></a>JScrollPane（滚动面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JScrollPane.html">javax.swing.JScrollPane</a></p><p>JScrollPane 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * view: 需要滚动显示的视图组件</span></span><br><span class="line"><span class="comment"> * vsbPolicy: 垂直滚动条的显示策略</span></span><br><span class="line"><span class="comment"> * hsbPolicy: 水平滚动条的显示策略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JScrollPane()</span><br><span class="line"></span><br><span class="line">JScrollPane(Component view)</span><br><span class="line"></span><br><span class="line">JScrollPane(Component view, <span class="keyword">int</span> vsbPolicy, <span class="keyword">int</span> hsbPolicy)</span><br><span class="line"></span><br><span class="line">JScrollPane(<span class="keyword">int</span> vsbPolicy, <span class="keyword">int</span> hsbPolicy)</span><br></pre></td></tr></table></figure><p>滚动条的显示策略的取值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 垂直滚动条（vsbPolicy）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED    <span class="comment">// 需要时显示（默认）</span></span><br><span class="line">   ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER        <span class="comment">// 从不显示</span></span><br><span class="line">   ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS       <span class="comment">// 总是显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 水平滚动条（hsbPolicy）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED  <span class="comment">// 需要时显示（默认）</span></span><br><span class="line">   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER      <span class="comment">// 从不显示</span></span><br><span class="line">   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS     <span class="comment">// 总是显示</span></span><br></pre></td></tr></table></figure><p>JScrollPane 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置滚动显示视图内容组件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setViewportView</span><span class="params">(Component view)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置垂直滚动条的显示策略</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVerticalScrollBarPolicy</span><span class="params">(<span class="keyword">int</span> policy)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置水平滚动条的显示策略</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalScrollBarPolicy</span><span class="params">(<span class="keyword">int</span> policy)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 是否响应鼠标滚动事件，默认响应</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWheelScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> handleWheel)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域组件</span></span><br><span class="line">        JTextArea textArea = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">18</span>));   <span class="comment">// 设置字体</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板, 指定滚动显示的视图组件(textArea), 垂直滚动条一直显示, 水平滚动条从不显示</span></span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(scrollPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\10.png" alt="10"></p><h2 id="JSplitPane（分隔面板）"><a href="#JSplitPane（分隔面板）" class="headerlink" title="JSplitPane（分隔面板）"></a>JSplitPane（分隔面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JSplitPane.html">javax.swing.JSplitPane</a></p><p>JSplitPane 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * orientation: 分隔的方向，取值 JSplitPane.HORIZONTAL_SPLIT（水平左右分隔） </span></span><br><span class="line"><span class="comment"> * 或 JSplitPane.VERTICAL_SPLIT（垂直上下分隔），默认水平左右分隔。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * continuousLayout: 拖动分隔条时，是否连续重绘组件，如果为flase，则拖动分隔条停止后才重绘组件。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * leftComponent: 左边/上面 显示的组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * rightComponent: 右边/下面 显示的组件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JSplitPane()</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation)</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation, <span class="keyword">boolean</span> continuousLayout)</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation, <span class="keyword">boolean</span> continuousLayout, Component leftComponent, Component rightComponent)</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation, Component leftComponent, Component rightComponent)</span><br></pre></td></tr></table></figure><p>JSplitPane 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置分隔的方向，水平(左右) 或 垂直(上下) 分隔</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 左边/上面 显示的组件（下面两个方法完全一致）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLeftComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTopComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 左边/下面 显示的组件（下面两个方法完全一致）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setRightComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBottomComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 拖动分隔条 时是否 连续重绘 组件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContinuousLayout</span><span class="params">(<span class="keyword">boolean</span> continuousLayout)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 分隔条上是否显示快速 折叠/展开 两边组件的小按钮</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOneTouchExpandable</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置分隔条的大小（宽度）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDividerSize</span><span class="params">(<span class="keyword">int</span> newSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置分隔条的位置，相对于 左边/顶部 的像素长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDividerLocation</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置分隔条的位置，相对于 宽度/高度 的比例 [0.0 ~ 1.0]（该方法必须要先确保 JSplitPane 已经有宽高值，否则无效）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDividerLocation</span><span class="params">(<span class="keyword">double</span> proportionalLocation)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建分隔面板</span></span><br><span class="line">        JSplitPane splitPane = <span class="keyword">new</span> JSplitPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置左右两边显示的组件</span></span><br><span class="line">        splitPane.setLeftComponent(<span class="keyword">new</span> JButton(<span class="string">&quot;左边按钮&quot;</span>));</span><br><span class="line">        splitPane.setRightComponent(<span class="keyword">new</span> JButton(<span class="string">&quot;右边按钮&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分隔条上显示快速 折叠/展开 两边组件的小按钮</span></span><br><span class="line">        splitPane.setOneTouchExpandable(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拖动分隔条时连续重绘组件</span></span><br><span class="line">        splitPane.setContinuousLayout(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置分隔条的初始位置</span></span><br><span class="line">        splitPane.setDividerLocation(<span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把分隔面板作为内容面板添加到窗口并显示</span></span><br><span class="line">        jf.setContentPane(splitPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\11.png" alt="11"></p><h2 id="JTabbedPane（选项卡面板）"><a href="#JTabbedPane（选项卡面板）" class="headerlink" title="JTabbedPane（选项卡面板）"></a>JTabbedPane（选项卡面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JTabbedPane.html">javax.swing.JTabbedPane</a></p><p>常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参事说明:</span></span><br><span class="line"><span class="comment"> * tabPlacement: 选项卡标题的位置, 值为 JTabbedPane.TOP、JTabbedPane.BOTTOM、</span></span><br><span class="line"><span class="comment"> * JTabbedPane.LEFT 或 JTabbedPane.RIGHT, 默认为 TOP</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment"> * tabLayoutPolicy: 选项卡位置不能放入所有的选项卡时，放置选项卡的策略，</span></span><br><span class="line"><span class="comment"> * 值为 JTabbedPane.WRAP_TAB_LAYOUT 或 JTabbedPane.SCROLL_TAB_LAYOUT</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JTabbedPane()</span><br><span class="line"></span><br><span class="line">JTabbedPane(<span class="keyword">int</span> tabPlacement)</span><br><span class="line"></span><br><span class="line">JTabbedPane(<span class="keyword">int</span> tabPlacement, <span class="keyword">int</span> tabLayoutPolicy)</span><br></pre></td></tr></table></figure><p>创建选项卡:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * title: 选项卡的标题</span></span><br><span class="line"><span class="comment"> * icon: 选项卡的图标</span></span><br><span class="line"><span class="comment"> * tip: 当鼠标移到该选项卡时，悬浮提示的文本</span></span><br><span class="line"><span class="comment"> * component: 选中该选项卡时显示的内容组件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTab</span><span class="params">(String title, Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTab</span><span class="params">(String title, Icon icon, Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTab</span><span class="params">(String title, Icon icon, Component component, String tip)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"></span></span></span><br><span class="line"><span class="comment"><span class="function"> * 在指定索引位置插入一个选项卡</span></span></span><br><span class="line"><span class="comment"><span class="function">   */</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertTab</span><span class="params">(String title, Icon icon, Component component, String tip, <span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure><p>移除选项卡:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除指定位置的选项（下面两个方法完全一致）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeTabAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 移除指定内容控件的选项卡</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 移除所有选项卡</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAll</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>选项卡相关操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置当前选中的选项卡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的选项卡索引</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSelectedIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的选项卡对应的内容组件</span></span></span><br><span class="line"><span class="function">Component <span class="title">getSelectedComponent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 index 位置的选项卡的标题</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTitleAt</span><span class="params">(<span class="keyword">int</span> index, String title)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 index 位置的选项卡的图标</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconAt</span><span class="params">(<span class="keyword">int</span> index, Icon icon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 index 位置的选项卡是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabledAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">boolean</span> enabled)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 将 index 位置的内容组件设置为 component</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setComponentAt</span><span class="params">(<span class="keyword">int</span> index, Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取选项卡的数量</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTabCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"></span></span></span><br><span class="line"><span class="comment"><span class="function"> * 自定义选项卡标题位置的组件, 这里的 titleComponent 将放到选项卡标题位置。</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 应用场景: 例如, 在选项卡标题位置添加一个关闭按钮, 点击按钮移除选项卡。</span></span></span><br><span class="line"><span class="comment"><span class="function">   */</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTabComponentAt</span><span class="params">(<span class="keyword">int</span> index, Component titleComponent)</span></span></span><br></pre></td></tr></table></figure><p>状态监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加选项卡选中状态改变的监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建选项卡面板</span></span><br><span class="line">        <span class="keyword">final</span> JTabbedPane tabbedPane = <span class="keyword">new</span> JTabbedPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第1个选项卡（选项卡只包含 标题）</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;Tab01&quot;</span>, createTextPanel(<span class="string">&quot;TAB 01&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第2个选项卡（选项卡包含 标题 和 图标）</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;Tab02&quot;</span>, createTextPanel(<span class="string">&quot;TAB 02&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第3个选项卡（选项卡包含 标题、图标 和 tip提示）</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;Tab03&quot;</span>, createTextPanel(<span class="string">&quot;TAB 03&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加选项卡选中状态改变的监听器</span></span><br><span class="line">        tabbedPane.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前选中的选项卡: &quot;</span> + tabbedPane.getSelectedIndex());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认选中的选项卡</span></span><br><span class="line">        tabbedPane.setSelectedIndex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(tabbedPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个面板，面板中心显示一个标签，用于表示某个选项卡需要显示的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JComponent <span class="title">createTextPanel</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建面板, 使用一个 1 行 1 列的网格布局（为了让标签的宽高自动撑满面板）</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建标签</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(text);</span><br><span class="line">        label.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">50</span>));</span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加标签到面板</span></span><br><span class="line">        panel.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> panel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\12.png" alt="12"></p><h1 id="JavaSwing-基本组件"><a href="#JavaSwing-基本组件" class="headerlink" title="JavaSwing 基本组件"></a>JavaSwing 基本组件</h1><h2 id="JLabel（标签）"><a href="#JLabel（标签）" class="headerlink" title="JLabel（标签）"></a>JLabel（标签）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JLabel.html">javax.swing.JLabel</a></p><p><code>JLabel</code>，标签。标签主要用于展示 <strong>文本</strong> 或 <strong>图片</strong>，也可以 <strong>同时显示文本和图片</strong>。</p><p>JLabel 的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 构造方法中的参数含义:</span></span><br><span class="line"><span class="comment"> *     text: 标签显示的 文本</span></span><br><span class="line"><span class="comment"> *     image: 标签显示的 图片</span></span><br><span class="line"><span class="comment"> *     horizontalAlignment: 标签内容（在标签内）的水平对其方式（竖直方向默认居中, 可通过方法设置）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JLabel()</span><br><span class="line"></span><br><span class="line">JLabel(String text)</span><br><span class="line"></span><br><span class="line">JLabel(String text, <span class="keyword">int</span> horizontalAlignment)</span><br><span class="line"></span><br><span class="line">JLabel(Icon image) </span><br><span class="line"></span><br><span class="line">JLabel(Icon image, <span class="keyword">int</span> horizontalAlignment) </span><br><span class="line"></span><br><span class="line">JLabel(String text, Icon image, <span class="keyword">int</span> horizontalAlignment) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JLabel 的常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 文本 和 图片</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon icon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本相对于图片的位置（文本默认在图片右边垂直居中）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalTextPosition</span><span class="params">(<span class="keyword">int</span> textPosition)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVerticalTextPosition</span><span class="params">(<span class="keyword">int</span> textPosition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置标签内容（在标签内）的对其方式（默认左对齐并垂直居中）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVerticalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本之间的间隙</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="function"> * 下面的方法定义在 JComponent 基类中</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本的字体类型、样式 和 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置字体颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当鼠标移动到组件上时显示的提示文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setToolTipText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的背景</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(Color bg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可见</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVisible</span><span class="params">(<span class="keyword">boolean</span> visible)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否为 不透明，JLabel默认为透明，设置为不透明后才能显示背景</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOpaque</span><span class="params">(<span class="keyword">boolean</span> isOpaque)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的 首选 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPreferredSize</span><span class="params">(Dimension preferredSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的 最小 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMinimumSize</span><span class="params">(Dimension minimumSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的 最大 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaximumSize</span><span class="params">(Dimension maximumSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 上面的对齐参数具体的取值常量参考 DocsApi；</span></span></span><br><span class="line"><span class="comment"><span class="function"> * setXXX(...) 方法往往都对应着 getXXX() 方法。</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br></pre></td></tr></table></figure><p>ImageIcon 的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 本地路径 图片创建 ImageIcon</span></span><br><span class="line">ImageIcon(String filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 网络路径 图片创建 ImageIcon</span></span><br><span class="line">ImageIcon(URL location)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用图片文件的字节数组创建 ImageIcon</span></span><br><span class="line">ImageIcon(<span class="keyword">byte</span>[] imageData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 java.awt.Image 实例创建 ImageIcon</span></span><br><span class="line">ImageIcon(java.awt.Image image)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">700</span>, <span class="number">600</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);  <span class="comment">// 把窗口位置设置到屏幕中心</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建内容面板，默认使用流式布局</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 只显示文本</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JLabel label0 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label0.setLocation(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        label0.setSize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        label0.setText(<span class="string">&quot;Only Text&quot;</span>);</span><br><span class="line">        label0.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">20</span>));  <span class="comment">// 设置字体，null 表示使用默认字体</span></span><br><span class="line">        panel.add(label0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 只显示图片</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JLabel label1 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label1.setLocation(<span class="number">0</span>,<span class="number">150</span>);</span><br><span class="line">        label1.setSize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        label1.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/test.gif&quot;</span>));</span><br><span class="line">        panel.add(label1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 同时显示文本和图片</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JLabel label2 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label2.setLocation(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">        label2.setSize(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">        label2.setText(<span class="string">&quot;文本和图片&quot;</span>);</span><br><span class="line">        label2.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,Font.PLAIN,<span class="number">20</span>));</span><br><span class="line">        label2.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/test.gif&quot;</span>));</span><br><span class="line">        label2.setHorizontalTextPosition(SwingConstants.CENTER);   <span class="comment">// 水平方向文本在图片中心</span></span><br><span class="line">        label2.setVerticalTextPosition(SwingConstants.BOTTOM);     <span class="comment">// 垂直方向文本在图片下方</span></span><br><span class="line">        panel.add(label2);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\0.png" alt="0"></p><h2 id="JButton（按钮）"><a href="#JButton（按钮）" class="headerlink" title="JButton（按钮）"></a>JButton（按钮）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JButton.html">javax.swing.JButton</a></p><p>JButton 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建不带有设置文本或图标的按钮</span></span><br><span class="line">JButton()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个带文本的按钮</span></span><br><span class="line">JButton(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个带图标的按钮</span></span><br><span class="line">JButton(Icon icon)</span><br></pre></td></tr></table></figure><p>JButton 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置按钮的 文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置按钮是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置按钮在 默认、按下、不可用 时显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPressedIcon</span><span class="params">(Icon pressedIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledIcon</span><span class="params">(Icon disabledIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 是否绘制边框（设置不绘制边框，再结合上面三个设置按钮状态图片的方法，可实现自定义按钮）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBorderPainted</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>JButton 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加和移除按钮的点击事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActionListener</span><span class="params">(ActionListener listener)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeActionListener</span><span class="params">(ActionListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：简单按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮</span></span><br><span class="line">        <span class="keyword">final</span> JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加按钮的点击事件监听器</span></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取到的事件源就是按钮本身</span></span><br><span class="line">                <span class="comment">// JButton btn = (JButton) e.getSource();</span></span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">&quot;按钮被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\1.png" alt="1"></p><p>代码实例: 自定义图片按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">700</span>, <span class="number">500</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> JButton btn = <span class="keyword">new</span> JButton();</span><br><span class="line">        btn.setBounds(<span class="number">100</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置按钮的默认图片</span></span><br><span class="line">        btn.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/button.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置按钮被点击时的图片</span></span><br><span class="line">        btn.setPressedIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/press.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不绘制边框</span></span><br><span class="line">        btn.setBorderPainted(<span class="keyword">false</span>);</span><br><span class="line">        btn.setContentAreaFilled(<span class="keyword">false</span>);    <span class="comment">//不绘制默认按钮背景</span></span><br><span class="line">        btn.setFocusPainted(<span class="keyword">false</span>);           <span class="comment">//不绘制图片或文字周围的焦点虚框</span></span><br><span class="line">        <span class="comment">// 添加按钮点击事件监听器</span></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JRadioButton（单选按钮）"><a href="#JRadioButton（单选按钮）" class="headerlink" title="JRadioButton（单选按钮）"></a>JRadioButton（单选按钮）</h2><p>官方 JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButton.html">javax.swing.JRadioButton</a></p><p>JButton 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无文本，未选中</span></span><br><span class="line">JRadioButton()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，未选中</span></span><br><span class="line">JRadioButton(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，并指定是否选中</span></span><br><span class="line">JRadioButton(String text, <span class="keyword">boolean</span> selected)</span><br></pre></td></tr></table></figure><p>JRadioButton 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置单选按钮的 文本、字体 和字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置单选按钮是否选中状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断单选按钮是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置单选按钮是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置单选按钮在 默认、被选中、不可用时显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPressedIcon</span><span class="params">(Icon pressedIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledIcon</span><span class="params">(Icon disabledIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本的间距</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br></pre></td></tr></table></figure><p>JRadioButton 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加状态改变监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>ButtonGroup（按钮组）: 当有多个单选按钮时，一般只允许一个单选按钮选中，因此需要对同一类型的单选按钮进行分组，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个按钮组</span></span><br><span class="line">ButtonGroup btnGroup = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加单选按钮到按钮组</span></span><br><span class="line">btnGroup.add(radioBtn01);</span><br><span class="line">btnGroup.add(radioBtn02);</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个单选按钮</span></span><br><span class="line">        JRadioButton radioBtn01 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        JRadioButton radioBtn02 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建按钮组，把两个单选按钮添加到该组</span></span><br><span class="line">        ButtonGroup btnGroup = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        btnGroup.add(radioBtn01);</span><br><span class="line">        btnGroup.add(radioBtn02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认第一个单选按钮选中</span></span><br><span class="line">        radioBtn01.setSelected(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        panel.add(radioBtn01);</span><br><span class="line">        panel.add(radioBtn02);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\2.png" alt="2"></p><h2 id="JCheckBox（复选框）"><a href="#JCheckBox（复选框）" class="headerlink" title="JCheckBox（复选框）"></a>JCheckBox（复选框）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBox.html">javax.swing.JCheckBox</a></p><p>JCheckBox 常用构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无文本，默认未选中</span></span><br><span class="line">JCheckBox()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，默认未选中</span></span><br><span class="line">JCheckBox(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，并指定是否选中</span></span><br><span class="line">JCheckBox(String text, <span class="keyword">boolean</span> selected)</span><br></pre></td></tr></table></figure><p>JCheckBox 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置复选框的 文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置复选框是否选中状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断复选框是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置复选框是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本的间距</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br></pre></td></tr></table></figure><p>JCheckBox 常用监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加状态改变监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建复选框</span></span><br><span class="line">        JCheckBox checkBox01 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;菠萝&quot;</span>);</span><br><span class="line">        JCheckBox checkBox02 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">        JCheckBox checkBox03 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;雪梨&quot;</span>);</span><br><span class="line">        JCheckBox checkBox04 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;荔枝&quot;</span>);</span><br><span class="line">        JCheckBox checkBox05 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">        JCheckBox checkBox06 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加第一个复选框的状态被改变的监听（其他复选框如果需要监听状态改变，则可按此方法添加监听）</span></span><br><span class="line">        checkBox01.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取事件源（即复选框本身）</span></span><br><span class="line">                JCheckBox checkBox = (JCheckBox) e.getSource();</span><br><span class="line">                System.out.println(checkBox.getText() + <span class="string">&quot; 是否选中: &quot;</span> + checkBox.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认第一个复选框选中</span></span><br><span class="line">        checkBox01.setSelected(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        panel.add(checkBox01);</span><br><span class="line">        panel.add(checkBox02);</span><br><span class="line">        panel.add(checkBox03);</span><br><span class="line">        panel.add(checkBox04);</span><br><span class="line">        panel.add(checkBox05);</span><br><span class="line">        panel.add(checkBox06);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\3.png" alt="3"></p><h2 id="JToggleButton（开关按钮）"><a href="#JToggleButton（开关按钮）" class="headerlink" title="JToggleButton（开关按钮）"></a>JToggleButton（开关按钮）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JToggleButton.html">javax.swing.JToggleButton</a></p><p>JToggleButton 是 JRadioButton, JCheckBox 的父类，主要实现一个按钮的两种状态（选中 和 未选中）来实现开关切换的效果。</p><p>JToggleButton 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无文本，默认未选中</span></span><br><span class="line">JToggleButton()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，默认未选中</span></span><br><span class="line">JToggleButton(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，并指定是否选中</span></span><br><span class="line">JToggleButton(String text, <span class="keyword">boolean</span> selected)</span><br></pre></td></tr></table></figure><p>JToggleButton 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置开关按钮的 文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置开关按钮是否选中状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断开关按钮是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置开关按钮是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置开关按钮在 默认(关)、被选中(开)、不可用 时显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPressedIcon</span><span class="params">(Icon pressedIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledIcon</span><span class="params">(Icon disabledIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本之间的间距</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br></pre></td></tr></table></figure><p>JToggleButton 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加状态改变监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：默认的开关按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建开关按钮</span></span><br><span class="line">        JToggleButton toggleBtn = <span class="keyword">new</span> JToggleButton(<span class="string">&quot;开关按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 toggleBtn 的状态被改变的监听</span></span><br><span class="line">        toggleBtn.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取事件源（即开关按钮本身）</span></span><br><span class="line">                JToggleButton toggleBtn = (JToggleButton) e.getSource();</span><br><span class="line">                System.out.println(toggleBtn.getText() + <span class="string">&quot; 是否选中: &quot;</span> + toggleBtn.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(toggleBtn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\4.png" alt="4"></p><p>代码实例：自定义图片开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建开关按钮</span></span><br><span class="line">        JToggleButton toggleBtn = <span class="keyword">new</span> JToggleButton();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先设置不绘制按钮边框</span></span><br><span class="line">        toggleBtn.setBorderPainted(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 选中(开) 和 未选中(关) 时显示的图片</span></span><br><span class="line">        toggleBtn.setSelectedIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;toggle_on.png&quot;</span>));</span><br><span class="line">        toggleBtn.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;toggle_off.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 toggleBtn 的状态被改变的监听</span></span><br><span class="line">        toggleBtn.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取事件源（即开关按钮本身）</span></span><br><span class="line">                JToggleButton toggleBtn = (JToggleButton) e.getSource();</span><br><span class="line">                System.out.println(toggleBtn.getText() + <span class="string">&quot; 是否选中: &quot;</span> + toggleBtn.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(toggleBtn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JTextField（文本框）"><a href="#JTextField（文本框）" class="headerlink" title="JTextField（文本框）"></a>JTextField（文本框）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JTextField.html">javax.swing.JTextField</a></p><p>JTextField 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 默认显示的文本</span></span><br><span class="line"><span class="comment"> * columns: 用来计算首选宽度的列数；如果列设置为 0，则首选宽度将是组件实现的自然结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JTextField()</span><br><span class="line"></span><br><span class="line">JTextField(String text)</span><br><span class="line"></span><br><span class="line">JTextField(<span class="keyword">int</span> columns)</span><br><span class="line"></span><br><span class="line">JTextField(String text, <span class="keyword">int</span> columns)</span><br></pre></td></tr></table></figure><p>JTextField 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文本框中的文本</span></span><br><span class="line"><span class="function">String <span class="title">getText</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框的 文本、字体 和 字体颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置颜色，分别为: 光标颜色、呈现选中部分的背景颜色、选中部分文本的颜色、不可用时文本的颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCaretColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本内容的水平对齐方式</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框是否可编辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 下面方法定义在 java.awt.Component 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断组件当前是否拥有焦点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFocusOwner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br></pre></td></tr></table></figure><p>JTextField 复制粘贴相关方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置光标开始位置，selectionStart &gt;= 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionStart</span><span class="params">(<span class="keyword">int</span> selectionStart)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置光标结束位置，selectionEnd &gt;= selectionStart</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionEnd</span><span class="params">(<span class="keyword">int</span> selectionEnd)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 复制选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 剪切选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 粘贴文本到文本框</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paste</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>JTextField 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加焦点事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFocusListener</span><span class="params">(FocusListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加文本框内的 文本改变 监听器</span></span></span><br><span class="line"><span class="function">textField.<span class="title">getDocument</span><span class="params">()</span>.<span class="title">addDocumentListener</span><span class="params">(DocumentListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加按键监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addKeyListener</span><span class="params">(KeyListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本框，指定可见列数为8列</span></span><br><span class="line">        <span class="keyword">final</span> JTextField textField = <span class="keyword">new</span> JTextField(<span class="number">8</span>);</span><br><span class="line">        textField.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        panel.add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮，点击后获取文本框中的文本</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        btn.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;提交: &quot;</span> + textField.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\5.png" alt="5"></p><h2 id="JPasswordField（密码框）"><a href="#JPasswordField（密码框）" class="headerlink" title="JPasswordField（密码框）"></a>JPasswordField（密码框）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JPasswordField.html">javax.swing.JPasswordField</a></p><p>JPasswordField 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 默认显示的文本</span></span><br><span class="line"><span class="comment"> * columns: 用来计算首选宽度的列数；如果列设置为 0，则首选宽度将是组件实现的自然结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JPasswordField()</span><br><span class="line"></span><br><span class="line">JPasswordField(String text)</span><br><span class="line"></span><br><span class="line">JPasswordField(<span class="keyword">int</span> columns)</span><br><span class="line"></span><br><span class="line">JPasswordField(String text, <span class="keyword">int</span> columns)</span><br></pre></td></tr></table></figure><p>JPasswordField 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取密码框输入的密码</span></span><br><span class="line"><span class="keyword">char</span>[] getPassword()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置密码框的 密码文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置密码框输入内容的水平对齐方式</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置密码框默认显示的密码字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEchoChar</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置密码框是否可编辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 下面方法定义在 java.awt.Component 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断组件当前是否拥有焦点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFocusOwner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br></pre></td></tr></table></figure><p>JPasswordField 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加焦点事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFocusListener</span><span class="params">(FocusListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加文本框内的文本改变监听器</span></span></span><br><span class="line"><span class="function">textField.<span class="title">getDocument</span><span class="params">()</span>.<span class="title">addDocumentListener</span><span class="params">(DocumentListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加按键监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addKeyListener</span><span class="params">(KeyListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建密码框，指定可见列数为10列</span></span><br><span class="line">        <span class="keyword">final</span> JPasswordField passwordField = <span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">        panel.add(passwordField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮，点击后获取密码框中输入的密码</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;提交，密码为: &quot;</span> + <span class="keyword">new</span> String(passwordField.getPassword()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\6.png" alt="6"></p><h2 id="JTextArea（文本区域）"><a href="#JTextArea（文本区域）" class="headerlink" title="JTextArea（文本区域）"></a>JTextArea（文本区域）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JTextArea.html">javax.swing.JTextArea</a></p><p>JTextArea 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 默认显示的文本</span></span><br><span class="line"><span class="comment"> * rows: 默认可见的行数</span></span><br><span class="line"><span class="comment"> * columns: 默认可见的列数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 默认由 rows 和 columns 决定首选大小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   JTextArea()</span><br><span class="line"></span><br><span class="line">JTextArea(String text)</span><br><span class="line"></span><br><span class="line">JTextArea(<span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span><br><span class="line"></span><br><span class="line">JTextArea(String text, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span><br></pre></td></tr></table></figure><p>JTextArea 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否自动换行，默认为 false</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLineWrap</span><span class="params">(<span class="keyword">boolean</span> wrap)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置自动换行方式。如果为 true，则将在单词边界（空白）处换行; 如果为 false，则将在字符边界处换行。默认为 false。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWrapStyleWord</span><span class="params">(<span class="keyword">boolean</span> word)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取文本框中的文本</span></span></span><br><span class="line"><span class="function">String <span class="title">getText</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 追加文本到文档末尾</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 替换部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceRange</span><span class="params">(String str, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框的 文本、字体 和 字体颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取内容的行数（以换行符计算，满行自动换下一行不算增加行数）</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取指定行（行数从0开始）的行尾（包括换行符）在全文中的偏移量</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineEndOffset</span><span class="params">(<span class="keyword">int</span> line)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取指定偏移量所在的行数（行数从0开始）</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineOfOffset</span><span class="params">(<span class="keyword">int</span> offset)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置颜色，分别为: 光标颜色、呈现选中部分的背景颜色、选中部分文本的颜色、不可用时文本的颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCaretColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框是否可编辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 下面方法定义在 java.awt.Component 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断组件当前是否拥有焦点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFocusOwner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br></pre></td></tr></table></figure><p>JTextArea 复制粘贴相关方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置光标开始位置，selectionStart &gt;= 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionStart</span><span class="params">(<span class="keyword">int</span> selectionStart)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置光标结束位置，selectionEnd &gt;= selectionStart</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionEnd</span><span class="params">(<span class="keyword">int</span> selectionEnd)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 复制选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 剪切选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 粘贴文本到文本框</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paste</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>JTextArea 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加焦点事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFocusListener</span><span class="params">(FocusListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加文本框内的 文本改变 监听器</span></span></span><br><span class="line"><span class="function">textField.<span class="title">getDocument</span><span class="params">()</span>.<span class="title">addDocumentListener</span><span class="params">(DocumentListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加按键监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addKeyListener</span><span class="params">(KeyListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 5 行 10 列的文本区域</span></span><br><span class="line">        <span class="keyword">final</span> JTextArea textArea = <span class="keyword">new</span> JTextArea(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 设置自动换行</span></span><br><span class="line">        textArea.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 添加到内容面板</span></span><br><span class="line">        panel.add(textArea);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个提交按钮，点击按钮获取输入文本</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;提交: &quot;</span> + textArea.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\7.png" alt="7"></p><h2 id="JComboBox（下拉列表框）"><a href="#JComboBox（下拉列表框）" class="headerlink" title="JComboBox（下拉列表框）"></a>JComboBox（下拉列表框）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html">javax.swing.JComboBox</a></p><p>JComboBox 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个 JComboBox 实例维护这一个 ComboBoxModel 实例。</span></span><br><span class="line"><span class="comment"> * ComboBoxModel 实例可以直接创建，也可以通过把 数组 或 集合 传递到 JComboBox 中间接创建。</span></span><br><span class="line"><span class="comment"> * JComboBox 内部创建的 ComboBoxModel 实例是 DefaultComboBoxModel。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   JComboBox()</span><br><span class="line"></span><br><span class="line">JComboBox(ComboBoxModel model)</span><br><span class="line"></span><br><span class="line">JComboBox(Object[] items)</span><br><span class="line"></span><br><span class="line">JComboBox(Vector&lt;?&gt; items)</span><br></pre></td></tr></table></figure><p>JComboBox 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置选中的索引</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的索引</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSelectedIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的数据项</span></span></span><br><span class="line"><span class="function">Object <span class="title">getSelectedItem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置选项数据模型</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setModel</span><span class="params">(ComboBoxModel&lt;?&gt; model)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取维护选项数据的 ComboBoxModel。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 再通过 model.getElementAt(int index) 和 model.getSize() </span></span></span><br><span class="line"><span class="function"><span class="comment">// 可分别 获取指定索引的选项数据 和 选项数量。</span></span></span><br><span class="line"><span class="function">ComboBoxModel&lt;?&gt; <span class="title">getModel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加选项选中状态改变的监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addItemListener</span><span class="params">(ItemListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置下拉列表框是否可编辑，默认不可编辑。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果设置为可编辑，则除了选择指定的选项值外，还允许用户自行输入值（自行输入的值索引为-1）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个标签</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;水果：&quot;</span>);</span><br><span class="line">        panel.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要选择的条目</span></span><br><span class="line">        String[] listData = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;荔枝&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个下拉列表框</span></span><br><span class="line">        <span class="keyword">final</span> JComboBox&lt;String&gt; comboBox = <span class="keyword">new</span> JComboBox&lt;String&gt;(listData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加条目选中状态改变的监听器</span></span><br><span class="line">        comboBox.addItemListener(<span class="keyword">new</span> ItemListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 只处理选中的状态</span></span><br><span class="line">                <span class="keyword">if</span> (e.getStateChange() == ItemEvent.SELECTED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;选中: &quot;</span> + comboBox.getSelectedIndex() + <span class="string">&quot; = &quot;</span> + comboBox.getSelectedItem());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认选中的条目</span></span><br><span class="line">        comboBox.setSelectedIndex(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加到内容面板</span></span><br><span class="line">        panel.add(comboBox);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\8.png" alt="8"></p><h2 id="JProgressBar（进度条）"><a href="#JProgressBar（进度条）" class="headerlink" title="JProgressBar（进度条）"></a>JProgressBar（进度条）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JProgressBar.html">javax.swing.JProgressBar</a></p><p>JProgressBar 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法中的参数含义:</span></span><br><span class="line"><span class="comment"> * orient: 进度条的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL，默认为水平方向</span></span><br><span class="line"><span class="comment"> * min: 最小进度值</span></span><br><span class="line"><span class="comment"> * max: 最大进度值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">JProgressBar()</span><br><span class="line"></span><br><span class="line">JProgressBar(<span class="keyword">int</span> orient)</span><br><span class="line"></span><br><span class="line">JProgressBar(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span><br><span class="line"></span><br><span class="line">JProgressBar(<span class="keyword">int</span> orient, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span><br></pre></td></tr></table></figure><p>JProgressBar 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 最小进度值、最大进度值、当前进度值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMinimum</span><span class="params">(<span class="keyword">int</span> min)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaximum</span><span class="params">(<span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前进度值</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前进度的百分比</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPercentComplete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 是否绘制百分比文本（进度条中间显示的百分数）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStringPainted</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置进度条进度是否为不确定模式</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIndeterminate</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置进度条的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> newOrientation)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加进度条的进度改变监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_PROGRESS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_PROGRESS = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> currentProgress = MIN_PROGRESS;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个进度条</span></span><br><span class="line">        <span class="keyword">final</span> JProgressBar progressBar = <span class="keyword">new</span> JProgressBar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置进度的最小值 和最大值</span></span><br><span class="line">        progressBar.setMinimum(MIN_PROGRESS);</span><br><span class="line">        progressBar.setMaximum(MAX_PROGRESS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前进度值</span></span><br><span class="line">        progressBar.setValue(currentProgress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制百分比文本（进度条中间显示的百分数）</span></span><br><span class="line">        progressBar.setStringPainted(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加进度改变通知</span></span><br><span class="line">        progressBar.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前进度值: &quot;</span> + progressBar.getValue() + <span class="string">&quot;; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;进度百分比: &quot;</span> + progressBar.getPercentComplete());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加到内容面板</span></span><br><span class="line">        panel.add(progressBar);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟延时操作进度, 每隔 0.5 秒更新进度</span></span><br><span class="line">        <span class="keyword">new</span> Timer(<span class="number">500</span>, <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                currentProgress++;</span><br><span class="line">                <span class="keyword">if</span> (currentProgress &gt; MAX_PROGRESS) &#123;</span><br><span class="line">                    currentProgress = MIN_PROGRESS;</span><br><span class="line">                &#125;</span><br><span class="line">                progressBar.setValue(currentProgress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\9.png" alt="9"></p><h1 id="JavaSwing-其他组件"><a href="#JavaSwing-其他组件" class="headerlink" title="JavaSwing 其他组件"></a>JavaSwing 其他组件</h1><h2 id="JFileChooser（文件选择器）"><a href="#JFileChooser（文件选择器）" class="headerlink" title="JFileChooser（文件选择器）"></a>JFileChooser（文件选择器）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JFileChooser.html">javax.swing.JFileChooser</a></p><p>JFileChooser 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * currentDirectory: 打开文件选取器时默认显示的文件夹（默认为用户文件夹）</span></span><br><span class="line"><span class="comment"> * currentDirectoryPath: 打开文件选取器时默认显示的文件夹（默认为用户文件夹）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JFileChooser()</span><br><span class="line"></span><br><span class="line">JFileChooser(File currentDirectory)</span><br><span class="line"></span><br><span class="line">JFileChooser(String currentDirectoryPath)</span><br></pre></td></tr></table></figure><p>JFileChooser 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置默认显示的文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCurrentDirectory</span><span class="params">(File dir)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文件选择模式, 可选值如下:</span></span></span><br><span class="line"><span class="function"><span class="comment">//     JFileChooser.FILES_ONLY: 只能选文件</span></span></span><br><span class="line"><span class="function"><span class="comment">//     JFileChooser.DIRECTORIES_ONLY: 只能选文件夹</span></span></span><br><span class="line"><span class="function"><span class="comment">//     JFileChooser.FILES_AND_DIRECTORIES: 文件和文件夹都可以选</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFileSelectionMode</span><span class="params">(<span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置是否允许同时选择多个（默认为不允许）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMultiSelectionEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加可供用户选择的文件过滤器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChoosableFileFilter</span><span class="params">(FileFilter filter)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置默认使用的文件过滤器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFileFilter</span><span class="params">(FileFilter filter)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置默认被选中的文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedFile</span><span class="params">(File file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedFiles</span><span class="params">(File[] selectedFiles)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 显示 打开文件 或 保存文件 的对话框（线程将被阻塞, 直到选择框被关闭）。</span></span></span><br><span class="line"><span class="comment"><span class="function"> *</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 参数: </span></span></span><br><span class="line"><span class="comment"><span class="function"> *     parent: 文件选取器对话框的父组件, 对话框将会尽量显示在靠近 parent 的中心; 如果传 null, 则显示在屏幕中心。</span></span></span><br><span class="line"><span class="comment"><span class="function"> * </span></span></span><br><span class="line"><span class="comment"><span class="function"> * 返回值:</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     JFileChooser.CANCEL_OPTION: 点击了取消或关闭</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     JFileChooser.APPROVE_OPTION: 点击了确认或保存</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     JFileChooser.ERROR_OPTION: 出现错误</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showOpenDialog</span><span class="params">(Component parent)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showSaveDialog</span><span class="params">(Component parent)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取选择的文件（一般在用户选择完文件点击了确认或保存后通过该方法获取选中的文件）</span></span></span><br><span class="line"><span class="function">File <span class="title">getSelectedFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function">File[] <span class="title">getSelectedFiles</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">400</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域, 用于显示相关信息</span></span><br><span class="line">        <span class="keyword">final</span> JTextArea msgTextArea = <span class="keyword">new</span> JTextArea(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">        msgTextArea.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">        panel.add(msgTextArea);</span><br><span class="line"></span><br><span class="line">        JButton openBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">        openBtn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                showFileOpenDialog(jf, msgTextArea);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(openBtn);</span><br><span class="line"></span><br><span class="line">        JButton saveBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">        saveBtn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                showFileSaveDialog(jf, msgTextArea);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(saveBtn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 打开文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFileOpenDialog</span><span class="params">(Component parent, JTextArea msgTextArea)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个默认的文件选取器</span></span><br><span class="line">        JFileChooser fileChooser = <span class="keyword">new</span> JFileChooser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认显示的文件夹为当前文件夹</span></span><br><span class="line">        fileChooser.setCurrentDirectory(<span class="keyword">new</span> File(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件选择的模式（只选文件、只选文件夹、文件和文件均可选）</span></span><br><span class="line">        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);</span><br><span class="line">        <span class="comment">// 设置是否允许多选</span></span><br><span class="line">        fileChooser.setMultiSelectionEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加可用的文件过滤器（FileNameExtensionFilter 的第一个参数是描述, 后面是需要过滤的文件扩展名 可变参数）</span></span><br><span class="line">        fileChooser.addChoosableFileFilter(<span class="keyword">new</span> FileNameExtensionFilter(<span class="string">&quot;zip(*.zip, *.rar)&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;rar&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置默认使用的文件过滤器</span></span><br><span class="line">        fileChooser.setFileFilter(<span class="keyword">new</span> FileNameExtensionFilter(<span class="string">&quot;image(*.jpg, *.png, *.gif)&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开文件选择框（线程将被阻塞, 直到选择框被关闭）</span></span><br><span class="line">        <span class="keyword">int</span> result = fileChooser.showOpenDialog(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">            <span class="comment">// 如果点击了&quot;确定&quot;, 则获取选择的文件路径</span></span><br><span class="line">            File file = fileChooser.getSelectedFile();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果允许选择多个文件, 则通过下面方法获取选择的所有文件</span></span><br><span class="line">            <span class="comment">// File[] files = fileChooser.getSelectedFiles();</span></span><br><span class="line"></span><br><span class="line">            msgTextArea.append(<span class="string">&quot;打开文件: &quot;</span> + file.getAbsolutePath() + <span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 选择文件保存路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFileSaveDialog</span><span class="params">(Component parent, JTextArea msgTextArea)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个默认的文件选取器</span></span><br><span class="line">        JFileChooser fileChooser = <span class="keyword">new</span> JFileChooser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置打开文件选择框后默认输入的文件名</span></span><br><span class="line">        fileChooser.setSelectedFile(<span class="keyword">new</span> File(<span class="string">&quot;测试文件.zip&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开文件选择框（线程将被阻塞, 直到选择框被关闭）</span></span><br><span class="line">        <span class="keyword">int</span> result = fileChooser.showSaveDialog(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">            <span class="comment">// 如果点击了&quot;保存&quot;, 则获取选择的保存路径</span></span><br><span class="line">            File file = fileChooser.getSelectedFile();</span><br><span class="line">            msgTextArea.append(<span class="string">&quot;保存到文件: &quot;</span> + file.getAbsolutePath() + <span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\13.png" alt="13"></p><h2 id="JDialog、JOptionPane（对话框）"><a href="#JDialog、JOptionPane（对话框）" class="headerlink" title="JDialog、JOptionPane（对话框）"></a>JDialog、JOptionPane（对话框）</h2><p>官方 JavaDocsApi：</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html">javax.swing.JDialog</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html">javax.swing.JOptionPane</a></li></ul><p>JDialog 可以创建自定义有的对话框，或者调用 JOptionPane 中的多个静态方法快速创建各种标准的对话框。</p><p>JOptionPane 是 Java Swing 内部已实现好的，以静态方法的形式提供调用，能够快速方便的弹出要求用户提供值或向其发出通知的标准对话框。</p><p>JOptionPane 提供的<strong>标准对话框</strong>类型分为以下几种:</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>showMessageDialog</td><td>消息对话框，向用户展示一个消息，没有返回值。</td></tr><tr><td>showConfirmDialog</td><td>确认对话框，询问一个问题是否执行。</td></tr><tr><td>showInputDialog</td><td>输入对话框，要求用户提供某些输入。</td></tr><tr><td>showOptionDialog</td><td>选项对话框，上述三项的大统一，自定义按钮文本，询问用户需要点击哪个按钮。</td></tr></tbody></table></div><p>上述四个类型的方法（包括其若干重载）的参数遵循一致的模式，下面介绍各<strong>参数</strong>的含义:</p><p>(1) parentComponent：对话框的父级组件，决定对话框显示的位置，对话框的显示会尽量紧靠组件的中心，如果传 null，则显示在屏幕的中心。</p><p>(2) title：对话框标题。</p><p>(3) message：消息内容。</p><p>(4) messageType：消息类型，主要是提供默认的对话框图标。可能的值为：</p><ul><li>JOptionPane.PLAIN_MESSAGE 简单消息（不使用图标）</li><li>JOptionPane.INFORMATION_MESSAGE 信息消息（默认）</li><li>JOptionPane.QUESTION_MESSAGE 问题消息</li><li>JOptionPane.WARNING_MESSAGE 警告消息</li><li>JOptionPane.ERROR_MESSAGE 错误消息</li></ul><p>(5) icon：自定义的对话框图标，如果传 null，则图标类型由 messageType 决定。</p><p>(6) optionType：选项按钮的类型。</p><p>(7) options、initialValue：自定义的选项按钮（如果传 null，则选项按钮由 optionType 决定），以及默认选中的选项按钮。</p><p>(8) selectionValues、initialSelectionValue：提供的输入选项，以及默认选中的选项。</p><p>下面是 JOptionPane 类中各标准对话框的静态方法重载:</p><p>消息对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMessageDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                              String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Icon icon)</span></span></span><br></pre></td></tr></table></figure><p>确认对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">showConfirmDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                             Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                             String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> optionType, </span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                             Icon icon)</span></span></span><br></pre></td></tr></table></figure><p>输入对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">showInputDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                              String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Icon icon, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object[] selectionValues, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object initialSelectionValue)</span></span></span><br></pre></td></tr></table></figure><p>选项对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">showOptionDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                            String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">int</span> optionType, </span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Icon icon, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Object[] options, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Object initialValue)</span></span></span><br></pre></td></tr></table></figure><p><strong>代码实例：标准对话框</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 消息对话框（信息消息）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn01 = <span class="keyword">new</span> JButton(<span class="string">&quot;showMessageDialog（信息消息）&quot;</span>);</span><br><span class="line">        btn01.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 消息对话框无返回, 仅做通知作用</span></span><br><span class="line">                JOptionPane.showMessageDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;Information Message&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;消息标题&quot;</span>,</span><br><span class="line">                        JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 2. 消息对话框（警告消息）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn02 = <span class="keyword">new</span> JButton(<span class="string">&quot;showMessageDialog（警告消息）&quot;</span>);</span><br><span class="line">        btn02.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 消息对话框无返回, 仅做通知作用</span></span><br><span class="line">                JOptionPane.showMessageDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;Warning Message&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;消息标题&quot;</span>,</span><br><span class="line">                        JOptionPane.WARNING_MESSAGE</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 3. 确认对话框</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn03 = <span class="keyword">new</span> JButton(<span class="string">&quot;showConfirmDialog（确认对话框）&quot;</span>);</span><br><span class="line">        btn03.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 返回用户点击的选项, 值为下面三者之一:</span></span><br><span class="line"><span class="comment">                 *     是:   JOptionPane.YES_OPTION</span></span><br><span class="line"><span class="comment">                 *     否:   JOptionPane.NO_OPTION</span></span><br><span class="line"><span class="comment">                 *     取消: JOptionPane.CANCEL_OPTION</span></span><br><span class="line"><span class="comment">                 *     关闭: JOptionPane.CLOSED_OPTION</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">int</span> result = JOptionPane.showConfirmDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;确认删除？&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;提示&quot;</span>,</span><br><span class="line">                        JOptionPane.YES_NO_CANCEL_OPTION</span><br><span class="line">                );</span><br><span class="line">                System.out.println(<span class="string">&quot;选择结果: &quot;</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 4. 输入对话框（文本框输入）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn04 = <span class="keyword">new</span> JButton(<span class="string">&quot;showInputDialog（输入对话框）&quot;</span>);</span><br><span class="line">        btn04.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 显示输入对话框, 返回输入的内容</span></span><br><span class="line">                String inputContent = JOptionPane.showInputDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;输入你的名字:&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;默认内容&quot;</span></span><br><span class="line">                );</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的内容: &quot;</span> + inputContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 5. 输入对话框（下拉框选择）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn05 = <span class="keyword">new</span> JButton(<span class="string">&quot;showInputDialog（下拉框选择）&quot;</span>);</span><br><span class="line">        btn05.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                Object[] selectionValues = <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;苹果&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 显示输入对话框, 返回选择的内容, 点击取消或关闭, 则返回null</span></span><br><span class="line">                Object inputContent = JOptionPane.showInputDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;选择一项: &quot;</span>,</span><br><span class="line">                        <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">                        JOptionPane.PLAIN_MESSAGE,</span><br><span class="line">                        <span class="keyword">null</span>,</span><br><span class="line">                        selectionValues,</span><br><span class="line">                        selectionValues[<span class="number">0</span>]</span><br><span class="line">                );</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的内容: &quot;</span> + inputContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 6. 选项对话框</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn06 = <span class="keyword">new</span> JButton(<span class="string">&quot;showOptionDialog（选项对话框）&quot;</span>);</span><br><span class="line">        btn06.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 选项按钮</span></span><br><span class="line">                Object[] options = <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;苹果&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 显示选项对话框, 返回选择的选项索引, 点击关闭按钮返回-1</span></span><br><span class="line">                <span class="keyword">int</span> optionSelected = JOptionPane.showOptionDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;请点击一个按钮选择一项&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;对话框标题&quot;</span>,</span><br><span class="line">                        JOptionPane.YES_NO_CANCEL_OPTION,</span><br><span class="line">                        JOptionPane.ERROR_MESSAGE,</span><br><span class="line">                        <span class="keyword">null</span>,</span><br><span class="line">                        options,    <span class="comment">// 如果传null, 则按钮为 optionType 类型所表示的按钮（也就是确认对话框）</span></span><br><span class="line">                        options[<span class="number">0</span>]</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (optionSelected &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;点击的按钮: &quot;</span> + options[optionSelected]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 垂直排列按钮</span></span><br><span class="line">        Box vBox = Box.createVerticalBox();</span><br><span class="line">        vBox.add(btn01);</span><br><span class="line">        vBox.add(btn02);</span><br><span class="line">        vBox.add(btn03);</span><br><span class="line">        vBox.add(btn04);</span><br><span class="line">        vBox.add(btn05);</span><br><span class="line">        vBox.add(btn06);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.add(vBox);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\14.png" alt="14"></p><p><strong>代码实例：自定义对话框</strong></p><p>对话框 JDialog 和 JFrame 都是继承自 java.awt.Window，用法与 JFrame 类似。</p><p>对话框分为 模态 和 非模态:</p><ul><li>模态: 弹出对话框后，对话框的父级窗口不可操作。</li><li>非模态: 弹出对话框后，对话框的父级窗口可以正常操作。</li></ul><p>对话框不能最小化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;显示自定义对话框&quot;</span>);</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                showCustomDialog(jf, jf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示一个自定义的对话框</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner 对话框的拥有者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentComponent 对话框的父级组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCustomDialog</span><span class="params">(Frame owner, Component parentComponent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个模态对话框</span></span><br><span class="line">        <span class="keyword">final</span> JDialog dialog = <span class="keyword">new</span> JDialog(owner, <span class="string">&quot;提示&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置对话框的宽高</span></span><br><span class="line">        dialog.setSize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">        <span class="comment">// 设置对话框大小不可改变</span></span><br><span class="line">        dialog.setResizable(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置对话框相对显示的位置</span></span><br><span class="line">        dialog.setLocationRelativeTo(parentComponent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个标签显示消息内容</span></span><br><span class="line">        JLabel messageLabel = <span class="keyword">new</span> JLabel(<span class="string">&quot;对话框消息内容&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮用于关闭对话框</span></span><br><span class="line">        JButton okBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">        okBtn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 关闭对话框</span></span><br><span class="line">                dialog.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对话框的内容面板, 在面板内可以根据自己的需要添加任何组件并做任意是布局</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加组件到面板</span></span><br><span class="line">        panel.add(messageLabel);</span><br><span class="line">        panel.add(okBtn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置对话框的内容面板</span></span><br><span class="line">        dialog.setContentPane(panel);</span><br><span class="line">        <span class="comment">// 显示对话框</span></span><br><span class="line">        dialog.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\15.png" alt="15"></p><h2 id="JMenuBar（菜单栏）"><a href="#JMenuBar（菜单栏）" class="headerlink" title="JMenuBar（菜单栏）"></a>JMenuBar（菜单栏）</h2><p>官方 JavaDocsApi：</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuBar.html">javax.swing.JMenuBar</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html">javax.swing.JMenu</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html">javax.swing.JMenuItem</a>，<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html">javax.swing.JCheckBoxMenuItem</a>，<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html">javax.swing.JRadioButtonMenuItem</a></li></ul><p>JMenuBar 表示一个菜单栏；</p><p>JMenu 表示菜单栏上的一个一级菜单；</p><p>JMenuItem, JCheckBoxMenuItem, JRadioButtonMenuItem 分别表示普通的子菜单、带复选框的子菜单、带单选按钮的子菜单。</p><p>JMenu、JCheckBoxMenuItem、JRadioButtonMenuItem 均继承自 JMenuItem。</p><p>JMenuItem 常用构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 菜单显示的文本</span></span><br><span class="line"><span class="comment"> * icon: 菜单显示的图标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">JMenuItem()</span><br><span class="line"></span><br><span class="line">JMenuItem(String text)</span><br><span class="line"></span><br><span class="line">JMenuItem(Icon icon)</span><br><span class="line"></span><br><span class="line">JMenuItem(String text, Icon icon)</span><br></pre></td></tr></table></figure><p>JMenuItem 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置菜单显示的文本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置菜单显示的图标</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置菜单的键盘助记符</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMnemonic</span><span class="params">(<span class="keyword">int</span> mnemonic)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置修改键，使用键盘快捷键直接触发菜单项的动作</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAccelerator</span><span class="params">(KeyStroke keyStroke)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 例如按下 ALT+N 键触发菜单项动作:</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     menuItem.setMnemonic(KeyEvent.VK_N);</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.ALT_MASK));</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加菜单被点击的监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActionListener</span><span class="params">(ActionListener l)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 绑定菜单项的动作命令名称，如果所有菜单项使用同一个监听器，</span></span></span><br><span class="line"><span class="function"><span class="comment">// 可以再监听器回调时通过命令名称区别是哪个菜单项触发的动作。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setActionCommand</span><span class="params">(String actionCommand)</span></span></span><br></pre></td></tr></table></figure><p>JCheckBoxMenuItem、JRadioButtonMenuItem 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 复选框/单选按钮 是否选中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断 复选框/单选按钮 是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加 复选框/单选按钮 状态被改变的监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>JMenu 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 子菜单 到 JMenu 中</span></span><br><span class="line"><span class="function">JMenuItem <span class="title">add</span><span class="params">(JMenuItem menuItem)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加一个子菜单分割线</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addSeparator</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个菜单栏</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenuBar menuBar = <span class="keyword">new</span> JMenuBar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一级菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenu fileMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">        JMenu editMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">        JMenu viewMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;视图&quot;</span>);</span><br><span class="line">        JMenu aboutMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;关于&quot;</span>);</span><br><span class="line">        <span class="comment">// 一级菜单添加到菜单栏</span></span><br><span class="line">        menuBar.add(fileMenu);</span><br><span class="line">        menuBar.add(editMenu);</span><br><span class="line">        menuBar.add(viewMenu);</span><br><span class="line">        menuBar.add(aboutMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建 &quot;文件&quot; 一级菜单的子菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenuItem newMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">        JMenuItem openMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">        JMenuItem exitMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">        <span class="comment">// 子菜单添加到一级菜单</span></span><br><span class="line">        fileMenu.add(newMenuItem);</span><br><span class="line">        fileMenu.add(openMenuItem);</span><br><span class="line">        fileMenu.addSeparator();       <span class="comment">// 添加一条分割线</span></span><br><span class="line">        fileMenu.add(exitMenuItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建 &quot;编辑&quot; 一级菜单的子菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenuItem copyMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">        JMenuItem pasteMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">        <span class="comment">// 子菜单添加到一级菜单</span></span><br><span class="line">        editMenu.add(copyMenuItem);</span><br><span class="line">        editMenu.add(pasteMenuItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建 &quot;视图&quot; 一级菜单的子菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> JCheckBoxMenuItem checkBoxMenuItem = <span class="keyword">new</span> JCheckBoxMenuItem(<span class="string">&quot;复选框子菜单&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> JRadioButtonMenuItem radioButtonMenuItem01 = <span class="keyword">new</span> JRadioButtonMenuItem(<span class="string">&quot;单选按钮子菜单01&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> JRadioButtonMenuItem radioButtonMenuItem02 = <span class="keyword">new</span> JRadioButtonMenuItem(<span class="string">&quot;单选按钮子菜单02&quot;</span>);</span><br><span class="line">        <span class="comment">// 子菜单添加到一级菜单</span></span><br><span class="line">        viewMenu.add(checkBoxMenuItem);</span><br><span class="line">        viewMenu.addSeparator();                <span class="comment">// 添加一个分割线</span></span><br><span class="line">        viewMenu.add(radioButtonMenuItem01);</span><br><span class="line">        viewMenu.add(radioButtonMenuItem02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其中两个 单选按钮子菜单，要实现单选按钮的效果，需要将它们放到一个按钮组中</span></span><br><span class="line">        ButtonGroup btnGroup = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        btnGroup.add(radioButtonMenuItem01);</span><br><span class="line">        btnGroup.add(radioButtonMenuItem02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认第一个单选按钮子菜单选中</span></span><br><span class="line">        radioButtonMenuItem01.setSelected(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 菜单项的点击/状态改变事件监听，事件监听可以直接设置在具体的子菜单上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 设置 &quot;新建&quot; 子菜单被点击的监听器</span></span><br><span class="line">        newMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;新建  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置 &quot;打开&quot; 子菜单被点击的监听器</span></span><br><span class="line">        openMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;打开  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置 &quot;退出&quot; 子菜单被点击的监听器</span></span><br><span class="line">        exitMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;退出  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 复选框子菜单 状态改变 监听器</span></span><br><span class="line">        checkBoxMenuItem.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;复选框是否被选中: &quot;</span> + checkBoxMenuItem.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 单选按钮子菜单 状态改变 监听器</span></span><br><span class="line">        radioButtonMenuItem01.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;单选按钮01 是否被选中: &quot;</span> + radioButtonMenuItem01.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最后 把菜单栏设置到窗口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jf.setJMenuBar(menuBar);</span><br><span class="line"></span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\16.png" alt="16"></p><h2 id="JPopupMenu（弹出菜单）"><a href="#JPopupMenu（弹出菜单）" class="headerlink" title="JPopupMenu（弹出菜单）"></a>JPopupMenu（弹出菜单）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html">javax.swing.JPopupMenu</a></p><p>弹出菜单是一个可弹出并显示一系列选项的悬浮小窗口。通常通过单击鼠标右键触发弹出显示。</p><p>JPopupMenu 的使用和 JMenuBar 类似。</p><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接在内容面板上添加鼠标监听器</span></span><br><span class="line">        panel.addMouseListener(<span class="keyword">new</span> MouseListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标点击（按下并抬起）</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标按下</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标释放</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是鼠标右键，则显示弹出菜单</span></span><br><span class="line">                <span class="keyword">if</span> (e.isMetaDown()) &#123;</span><br><span class="line">                    showPopupMenu(e.getComponent(), e.getX(), e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标进入组件区域</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标离开组件区域</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showPopupMenu</span><span class="params">(Component invoker, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 弹出菜单 对象</span></span><br><span class="line">        JPopupMenu popupMenu = <span class="keyword">new</span> JPopupMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 一级菜单</span></span><br><span class="line">        JMenuItem copyMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">        JMenuItem pasteMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">        JMenu editMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;编辑&quot;</span>);   <span class="comment">// 需要 添加 二级子菜单 的 菜单，使用 JMenu</span></span><br><span class="line">        JMenuItem fileMenu = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 二级菜单</span></span><br><span class="line">        JMenuItem findMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;查找&quot;</span>);</span><br><span class="line">        JMenuItem replaceMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;替换&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加 二级菜单 到 &quot;编辑&quot;一级菜单</span></span><br><span class="line">        editMenu.add(findMenuItem);</span><br><span class="line">        editMenu.add(replaceMenuItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 一级菜单 到 弹出菜单</span></span><br><span class="line">        popupMenu.add(copyMenuItem);</span><br><span class="line">        popupMenu.add(pasteMenuItem);</span><br><span class="line">        popupMenu.addSeparator();       <span class="comment">// 添加一条分隔符</span></span><br><span class="line">        popupMenu.add(editMenu);</span><br><span class="line">        popupMenu.add(fileMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加菜单项的点击监听器</span></span><br><span class="line">        copyMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;复制 被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        findMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;查找 被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在指定位置显示弹出菜单</span></span><br><span class="line">        popupMenu.show(invoker, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\17.png" alt="17"></p><p><strong>参考资料：</strong></p><ul><li><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html">Java swing 官方文档</a></p></li><li><p><a href="http://php-note.com/article/1719.html">Java Swing 图形界面开发 系列教程</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://10185102110.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin语法</title>
    <link href="http://10185102110.github.io/2021/10/10/Kotlin%20%E8%AF%AD%E6%B3%95/"/>
    <id>http://10185102110.github.io/2021/10/10/Kotlin%20%E8%AF%AD%E6%B3%95/</id>
    <published>2021-10-10T12:06:36.000Z</published>
    <updated>2021-10-22T14:52:17.867Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>Kotlin 中定义一个变量，只允许在变量前声明两种关键字：val 和 var。 </p><ul><li><p>val（value的简写）用来声明一个不可变的变量，这种变量在初始赋值之后就再也不能重新赋值，对应 Java 中的 final 变量。 </p></li><li><p>var（variable的简写）用来声明一个可变的变量，这种变量在初始赋值之后仍然可以再被重新赋值，对应 Java 中的非 final 变量。</p></li></ul><p>编译器怎么知道变量的类型？</p><p>举个例子，对于以下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">10</span></span><br><span class="line">    println(<span class="string">&quot;a =&quot;</span> + a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码使用 val 关键字定义了一个变量 a，并将它赋值为 10，这里 a 就会被自动推导成整型变量。因为既然你要把一个整数赋值给 a，那么 a 就只能是整型变量，而如果你要把一个字符串赋值给 a 的话，那么 a 就会被自动推导成字符串变量，这就是 Kotlin 的类型推导机制。</p><p>但是 Kotlin 的类型推导机制并不总是可以正常工作的，比如说如果我们对一个变量延迟赋值的话，Kotlin 就无法自动推导它的类型，这时候就需要显式地声明变量类型才行，语法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>Kotlin 完全抛弃了 Java 中的基本数据类型，全部使用了对象数据类型。在 Java 中 int 是关键字，而在 Kotlin 中 Int 变成了一个类，它拥有自己的方法和继承结构。</p><p>Java 和 Kotlin 数据类型对照表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Java 基本数据类型</th><th style="text-align:center">Kotlin 对象数据类型</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">Int</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">Char</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr></tbody></table></div><h2 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h2><p>延迟初始化使用的是 lateinit 关键字，它可以告诉 Kotlin 编译器，晚些时候对这个变量进行初始化，这样就不用在一开始的时候将它赋值为 null 了。但是要确保它在被任何地方调用之前已经完成了初始化工作。</p><p>可以通过代码来判断一个全局变量是否已经完成了初始化，这样在某些时候能够有效地避免重复对某一个变量进行初始化操作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter: MsgAdapter</span><br><span class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">if</span> (!::adapter.isInitialized) &#123;</span><br><span class="line"> adapter = MsgAdapter(msgList)</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>自定义一个函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1:<span class="type">Int</span>,num2:<span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> max(num1,num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun 是定义函数的关键字，紧跟的是函数名，后面括号里声明参数，参数的声明格式是“参数名：参数类型”；括号后面是可选的，用于声明返回值的类型，没有返回值可以不写。</p><p>当一个函数中只有一行代码时，Kotlin 允许我们不必编写函数体，可以直接将唯一的一行代码写在函数定义的尾部，中间用等号连接即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = max(num1, num2)</span><br></pre></td></tr></table></figure><p>由于 max() 函数返回的是一个 Int 值，而我们在 largerNumber() 函数的尾部又使用等号连接了 max() 函数，因此 Kotlin 可以推导出 largerNumber() 函数返回的必然也是一个 Int 值，这样就不用再显式地声明返回值类型。</p><h2 id="函数的参数默认值"><a href="#函数的参数默认值" class="headerlink" title="函数的参数默认值"></a>函数的参数默认值</h2><p>给参数设置默认值，可以不给该参数传值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printParams</span><span class="params">(num: <span class="type">Int</span>, str: <span class="type">String</span> = <span class="string">&quot;hello&quot;</span>)</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;num is <span class="variable">$num</span> , str is <span class="variable">$str</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> printParams(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：num is 123, str is hello</span></span><br></pre></td></tr></table></figure><p>如果第一个参数也有默认值，上述写法就行不通了，可以用键值对的方式来传参。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printParams</span><span class="params">(num: <span class="type">Int</span> = <span class="number">100</span>, str: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;num is <span class="variable">$num</span> , str is <span class="variable">$str</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> printParams(str = <span class="string">&quot;world&quot;</span>, num = <span class="number">123</span>) <span class="comment">//顺序没有影响</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主构造函数也可以设置默认值。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> sno: String = <span class="string">&quot;&quot;</span>, <span class="keyword">val</span> grade: <span class="built_in">Int</span> = <span class="number">0</span>, name: String = <span class="string">&quot;&quot;</span>, age: <span class="built_in">Int</span> = <span class="number">0</span>) : Person(name, age) &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="定义静态方法"><a href="#定义静态方法" class="headerlink" title="定义静态方法"></a>定义静态方法</h2><p>单例类的写法会将整个类中的所有方法全部变成类似于静态方法的调用方式，而如果只是希望让类中的某一个方法变成静态方法的调用方式该怎么办呢？这时就可以使用 companion object，示例如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doAction1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;do action1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">doAction2</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">&quot;do action2&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类中直接定义了一个 doAction1() 方法，又在 companion objec t中定义了一个 doAction2() 方法。现在这两个方法就有了本质的区别，因为 doAction1() 方法是一定要先创建 Util 类的实例才能调用的，而 doAction2() 方法可以直接使用 Util.doAction2() 的方式调用。</p><p>不过，doAction2() 方法其实也并不是静态方法，companion object 这个关键字实际上会在 Util 类的内部创建一个伴生类，而 doAction2() 方法就是定义在这个伴生类里面的实例方法。只是 Kotlin 会保证 Util 类始终只会存在一个伴生类对象，因此调用 Util.doAction2() 方法实际上就是调用了 Util 类中伴生对象的 doAction2() 方法。</p><p>如果确实需要定义真正的静态方法， Kotlin 仍然提供了两种实现方式：注解和顶层方法。</p><ul><li><p>注解。如果给单例类或 companion object 中的方法加上 @JvmStatic 注解，那么 Kotlin 编译器就会将这些方法编译成真正的静态方法。注意，@JvmStatic 注解只能加在单例类或 companion object 中的方法上，如果尝试加在一个普通方法上，会直接提示语法错误。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">doAction1</span><span class="params">()</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;do action1&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"> <span class="meta">@JvmStatic</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">doAction2</span><span class="params">()</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;do action2&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>顶层方法。顶层方法指的是那些没有定义在任何类中的方法，比如 main() 方法。Kotlin 编译器会将所有的顶层方法全部编译成静态方法。</p><p>想要定义一个顶层方法，先创建一个 Kotlin 文件，现在这个文件中定义的任何方法都会是顶层方法，比如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;do something&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是在 Kotlin 代码中调用，很简单，所有的顶层方法都可以在任何位置被直接调用，不用管包名路径，也不用创建实例，直接键入 doSomething() 即可。</p><p>但如果是在 Java 代码中调用，需要用 文件名.方法名 的形式来调用。</p></li></ul><h1 id="逻辑控制"><a href="#逻辑控制" class="headerlink" title="逻辑控制"></a>逻辑控制</h1><h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h2><p>与 Java 中的 if 区别不大，上面的函数可以写成以下形式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line"> value = num1</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> value = num2</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但 Kotlin 中的 if 是可以有返回值的，可以改写成以下形式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> value = <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">        num1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        num2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步简化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (num1 &gt; num2) num1 <span class="keyword">else</span> num2</span><br></pre></td></tr></table></figure><h2 id="when-条件语句"><a href="#when-条件语句" class="headerlink" title="when 条件语句"></a>when 条件语句</h2><p>类似于 Java 中的 switch 语句，但它又远比 switch 语句强大得多。</p><p>when 语句允许传入一个任意类型的参数，然后可以在 when 的结构体中定义一系列的条件，格式是： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匹配值 -&gt; &#123; 执行逻辑 &#125;</span><br></pre></td></tr></table></figure><p>当执行逻辑只有一行代码时，{ }可以省略。</p><p>编写一个查询考试成绩的功能，输入一个学生的姓名，返回该学生考试的分数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> (name) &#123;</span><br><span class="line">    <span class="string">&quot;Tom&quot;</span> -&gt; <span class="number">86</span></span><br><span class="line">    <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span></span><br><span class="line">    <span class="string">&quot;Jack&quot;</span> -&gt; <span class="number">95</span></span><br><span class="line">    <span class="string">&quot;Lily&quot;</span> -&gt; <span class="number">100</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>when 语句还允许进行类型匹配。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Number是Kotlin内置的一个抽象类，Int、Long、Float、Double等与数字相关的类都是它的子类</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">checkNumber</span><span class="params">(num: <span class="type">Number</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (num) &#123;</span><br><span class="line">        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; println(<span class="string">&quot;number is Int&quot;</span>)</span><br><span class="line">        <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; println(<span class="string">&quot;number is Double&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;number not support&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>when 语句还有一种不带参数的用法。</p><p>假设所有名字以 Tom 开头的人的分数都是 86 分，这种场景如果用带参数的 when语句就无法实现，而使用不带参数的 when 语句就可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(name: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> &#123;</span><br><span class="line"> name.startsWith(<span class="string">&quot;Tom&quot;</span>) -&gt; <span class="number">86</span></span><br><span class="line"> name == <span class="string">&quot;Jim&quot;</span> -&gt; <span class="number">77</span></span><br><span class="line"> name == <span class="string">&quot;Jack&quot;</span> -&gt; <span class="number">95</span></span><br><span class="line"> name == <span class="string">&quot;Lily&quot;</span> -&gt; <span class="number">100</span></span><br><span class="line"> <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>Kotlin 提供了 while 循环和 for 循环，其中 while 循环不管是在语法还是使用技巧上都和 Java 中的 while 循环没有任何区别。</p><p>Kotlin 在 for 循环方面做了很大幅度的修改，Java 中最常用的 for-i 循环在 Kotlin 中直接被舍弃了，而 Java 中另一种 for-each 循环则被 Kotlin 进行了大幅度的加强，变成了 for-in 循环。</p><p>区间的概念：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个0到10的区间，并且两端都是闭区间</span></span><br><span class="line"><span class="keyword">val</span> range = <span class="number">0.</span><span class="number">.10</span></span><br><span class="line"><span class="comment">//左闭右开区间</span></span><br><span class="line"><span class="keyword">val</span> range = <span class="number">0</span> until <span class="number">10</span></span><br><span class="line"><span class="comment">//降序闭区间</span></span><br><span class="line"><span class="keyword">val</span> range = <span class="number">10</span> downTo <span class="number">1</span></span><br></pre></td></tr></table></figure><p>有了区间之后，我们就可以通过 for-in 循环来遍历这个区间：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.10</span>) &#123;</span><br><span class="line"> println(i)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，for-in 循环每次执行循环时会在区间范围内递增 1，如果想跳过其中的一些元素，可以使用 step 关键字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">10</span> step <span class="number">2</span>) &#123;</span><br><span class="line"> println(i)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is eating. He is &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> p = Person()</span><br><span class="line">    p.name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">    p.age = <span class="number">19</span></span><br><span class="line">    p.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 中实例化一个类的方式和 Java 是基本类似的，只是去掉了 new 关键字而已。</p><h2 id="可见性修饰符"><a href="#可见性修饰符" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h2><p>Java 和 Kotlin 函数可见性修饰符对照表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">Java</th><th style="text-align:center">Kotlin</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">所有类可见</td><td style="text-align:center">所有类可见（默认）</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">当前类可见</td><td style="text-align:center">当前类可见</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">当前类、子类、同一包路径下的类可见</td><td style="text-align:center">当前类、子类可见</td></tr><tr><td style="text-align:center">default</td><td style="text-align:center">同一包路径下的类可见（默认）</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">internal</td><td style="text-align:center">无</td><td style="text-align:center">同一模块中的类可见</td></tr></tbody></table></div><h2 id="继承与构造函数"><a href="#继承与构造函数" class="headerlink" title="继承与构造函数"></a>继承与构造函数</h2><p>Kotlin 默认所有非抽象类都是不可以被继承的，如果想让一个类被继承，加上 open 关键字就可以。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">Person</span></span>() &#123;</span><br><span class="line"> <span class="keyword">var</span> sno = <span class="string">&quot;&quot;</span></span><br><span class="line"> <span class="keyword">var</span> grade = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 将构造函数分成了两种：<strong>主构造函数</strong>和<strong>次构造函数</strong>。</p><p>主构造函数是最常用的构造函数，每个类默认都会有一个不带参数的主构造函数，当然也可以显式地给它指明参数。主构造函数的特点是没有函数体，直接定义在类名的后面即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> sno: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>) : Person() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于构造函数中的参数是在创建实例的时候传入的，因此可以将参数全部声明成 val。</p><p>主构造函数没有函数体，如果想在主构造函数中编写一些逻辑，使用 init 结构体，所有主构造函数中的逻辑都可以写在里面。</p><p>将 Person 改造一下，将姓名和年龄都放到主构造函数当中，Person类现在已经没有无参的构造函数。由于子类中的构造函数必须调用父类中的构造函数，在 Student 类的主构造函数中加上 name 和 age 这两个参数，再将这两个参数传给 Person 类的构造函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> sno: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>, name: String, age: <span class="built_in">Int</span>) : Person(name,age) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;sno is &quot;</span> + sno)</span><br><span class="line">        println(<span class="string">&quot;grade is &quot;</span> + grade)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> student = Student(<span class="string">&quot;a123&quot;</span>, <span class="number">5</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">19</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在 Student 类的主构造函数中增加 name 和 age 这两个字段时，不能再将它们声明成 val，因为在主构造函数中声明成 val 或者 var 的参数将自动成为该类的字段，这就会导致和父类中同名的 name 和 age 字段造成冲突。</p><p>任何一个类只能有一个主构造函数，但是可以有多个次构造函数。次构造函数也可以用于实例化一个类，只不过它是有函数体的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(<span class="keyword">val</span> sno: String, <span class="keyword">val</span> grade: <span class="built_in">Int</span>, name: String, age: <span class="built_in">Int</span>) : Person(name,age) &#123;</span><br><span class="line">    <span class="comment">//第一个次构造函数接收name和age参数，通过this关键字调用主构造函数，并将sno和grade这两个参数赋值成初始值</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, name, age) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个次构造函数不接收任何参数，通过this关键字调用第一个次构造函数，并将name和age参数也赋值成初始值</span></span><br><span class="line">    <span class="keyword">constructor</span>() : <span class="keyword">this</span>(<span class="string">&quot;&quot;</span>, <span class="number">0</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//三种实例化方式</span></span><br><span class="line">    <span class="keyword">val</span> student1 = Student()</span><br><span class="line">    <span class="keyword">val</span> student2 = Student(<span class="string">&quot;Jack&quot;</span>, <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">val</span> student3 = Student(<span class="string">&quot;a123&quot;</span>, <span class="number">5</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">19</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看一种非常特殊的情况：类中只有次构造函数，没有主构造函数。当一个类没有显式地定义主构造函数且定义了次构造函数时，它就是没有主构造函数的，因此继承 Person 类时就不用加上括号了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">Person &#123;</span></span></span><br><span class="line">    <span class="comment">//由于没有主构造函数，次构造函数只能直接调用父类的构造函数</span></span><br><span class="line"> <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">super</span>(name, age) &#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>(name: String, age: <span class="built_in">Int</span>) : Person(name, age), Study &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is reading.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(name + <span class="string">&quot; is doing homework.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> student = Student(<span class="string">&quot;Jack&quot;</span>, <span class="number">19</span>)</span><br><span class="line">    doStudy(student)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于Student类实现了Study接口，因此Student类的实例是可以传递给doStudy()函数的</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>)</span></span> &#123;</span><br><span class="line">    study.readBooks()</span><br><span class="line">    study.doHomework()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于继承和实现接口，Kotlin 统一使用冒号，中间用逗号进行分隔。接口的后面不用加上括号，因为它没有构造 函数。</p><p>对接口中的函数进行默认实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Study</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">readBooks</span><span class="params">()</span></span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">doHomework</span><span class="params">()</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;do homework default implementation.&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接口中的一个函数拥有了函数体，这个函数体中的内容就是它的默认实现。现在当一个类去实现 Study接口时，只会强制要求实现 readBooks() 函数，而 doHomework() 函数则可以自由选择实现或者不实现，不实现时就会自动使用默认的实现逻辑。</p><h2 id="数据类与单例类"><a href="#数据类与单例类" class="headerlink" title="数据类与单例类"></a>数据类与单例类</h2><p>在一个规范的系统架构中，数据类通常占据着非常重要的角色，它们用于将服务器端或数据库中的数据映射到内存中，为编程逻辑提供数据模型的支持。</p><p>数据类通常需要重写 <code>equals()</code>、<code>hashCode()</code>、<code>toString()</code> 这几个方法。equals() 方法用于判断两个数据类是否相等。hashCode() 方法是 equals() 的配套方法，需要一起重写，否则会导致 HashMap、HashSet 等 hash 相关的系统类无法正常工作。toString() 方法用于提供更清晰的输入日志。</p><p>构建一个手机数据类，只有品牌和价格两个字段。</p><p>如果用 Java 实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cellphone</span> </span>&#123;</span><br><span class="line"> String brand;</span><br><span class="line"> <span class="keyword">double</span> price;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Cellphone</span><span class="params">(String brand, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.brand = brand;</span><br><span class="line"> <span class="keyword">this</span>.price = price;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Cellphone) &#123;</span><br><span class="line"> Cellphone other = (Cellphone) obj;</span><br><span class="line"> <span class="keyword">return</span> other.brand.equals(brand) &amp;&amp; other.price == price;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> brand.hashCode() + (<span class="keyword">int</span>) price;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;Cellphone(brand=&quot;</span> + brand + <span class="string">&quot;, price=&quot;</span> + price + <span class="string">&quot;)&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的功能使用 Kotlin 来实现只需要一行代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Cellphone</span></span>(<span class="keyword">val</span> brand: String, <span class="keyword">val</span> price: <span class="built_in">Double</span>)</span><br></pre></td></tr></table></figure><p>data 关键字声明这个类是数据类，Kotlin 会根据主构造函数中的参数帮你将 equals()、hashCode()、toString() 等固定且无实际逻辑意义的方法自动生成。</p><p>单例类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">singletonTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;singletonTest is called.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Singleton.singletonTest() <span class="comment">//类似于Java静态方法的调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda编程"><a href="#Lambda编程" class="headerlink" title="Lambda编程"></a>Lambda编程</h1><h2 id="集合的创建与遍历"><a href="#集合的创建与遍历" class="headerlink" title="集合的创建与遍历"></a>集合的创建与遍历</h2><p>创建一个包含许多水果名称的集合，可以这么做：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = ArrayList&lt;String&gt;()</span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>)</span><br><span class="line">list.add(<span class="string">&quot;Banana&quot;</span>)</span><br><span class="line">list.add(<span class="string">&quot;Orange&quot;</span>)</span><br><span class="line">list.add(<span class="string">&quot;Pear&quot;</span>)</span><br><span class="line">list.add(<span class="string">&quot;Grape&quot;</span>)</span><br></pre></td></tr></table></figure><p>Kotlin 专门提供了一个内置的 <code>listOf()</code> 函数来简化初始化集合的写法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">        println(fruit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>listOf()</code> 函数创建的是一个不可变的集合，可变集合需要用 <code>mutableListOf()</code> 函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = mutableListOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br><span class="line">list.add(<span class="string">&quot;Watermelon&quot;</span>)</span><br></pre></td></tr></table></figure><p>Set 集合的用法一样，只是将创建集合的方式换成了 <code>setOf()</code> 和 <code>mutableSetOf()</code> 函数而已。</p><p>Map 集合使用类似于数组下标的语法结构：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map = HashMap&lt;String, <span class="built_in">Int</span>&gt;()</span><br><span class="line"><span class="comment">//添加数据</span></span><br><span class="line">map[<span class="string">&quot;Apple&quot;</span>] = <span class="number">1</span></span><br><span class="line">map[<span class="string">&quot;Banana&quot;</span>] = <span class="number">2</span></span><br><span class="line">map[<span class="string">&quot;Orange&quot;</span>] = <span class="number">3</span></span><br><span class="line">map[<span class="string">&quot;Pear&quot;</span>] = <span class="number">4</span></span><br><span class="line">map[<span class="string">&quot;Grape&quot;</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure><p>Kotlin 提供了一对 mapOf() 和 mutableMapOf() 函数来继续简化 Map 的用法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> map = mapOf(<span class="string">&quot;Apple&quot;</span> to <span class="number">1</span>, <span class="string">&quot;Banana&quot;</span> to <span class="number">2</span>, <span class="string">&quot;Orange&quot;</span> to <span class="number">3</span>, <span class="string">&quot;Pear&quot;</span> to <span class="number">4</span>, <span class="string">&quot;Grape&quot;</span> to <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> ((fruit, number) <span class="keyword">in</span> map) &#123;</span><br><span class="line">        println(<span class="string">&quot;fruit is &quot;</span> + fruit + <span class="string">&quot;, number is &quot;</span> + number)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合的函数式-API"><a href="#集合的函数式-API" class="headerlink" title="集合的函数式 API"></a>集合的函数式 API</h2><p>思考一个需求：在一个水果集合里面找到单词最长的那个水果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> lambda = &#123; fruit: String -&gt; fruit.length &#125;</span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxByOrNull(lambda)</span><br></pre></td></tr></table></figure><p>Lambda 就是一小段可以作为参数传递的代码，Lambda 表达式的语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;参数名1: 参数类型, 参数名2: 参数类型 -&gt; 函数体&#125;</span><br></pre></td></tr></table></figure><p>参数列表的结尾使用一个 -&gt; 符号，表示参数列表的结束以及函数体的开始，函数体中可以编写任意行代码，并且最后一行代码会自动作为 Lambda 表达式的返回值。</p><p>可以看到，maxByOrNull 函数实质上就是接收了一个 Lambda 参数而已，并且这个 Lambda 参数是完全按照刚才学习的表达式的语法结构来定义的。</p><p>简化代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以直接将lambda表达式传入函数当中</span></span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxByOrNull(&#123; fruit: String -&gt; fruit.length &#125;)</span><br><span class="line"><span class="comment">//当Lambda参数是函数的最后一个参数时，可以将Lambda表达式移到函数括号的外面</span></span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxByOrNull() &#123; fruit: String -&gt; fruit.length &#125;</span><br><span class="line"><span class="comment">//如果Lambda参数是函数的唯一一个参数的话，还可以将函数的括号省略</span></span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxByOrNull &#123; fruit: String -&gt; fruit.length &#125;</span><br><span class="line"><span class="comment">//由于类型推导机制，不必声明参数类型</span></span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxByOrNull &#123; fruit -&gt; fruit.length &#125;</span><br><span class="line"><span class="comment">//当Lambda表达式的参数列表中只有一个参数时，可以使用it关键字来代替                           </span></span><br><span class="line"><span class="keyword">val</span> maxLengthFruit = list.maxByOrNull &#123; it.length &#125;                                 </span><br></pre></td></tr></table></figure><p>集合中几个常见的函数式 API：</p><ul><li><p>map 函数。用于将集合中的每个元素都映射成一个另外的值，映射的规则在 Lambda 表达式中指定，最终生成一个新的集合。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> newList = list.map &#123; it.uppercase() &#125; <span class="comment">//变成大写</span></span><br><span class="line">    <span class="keyword">for</span> (fruit <span class="keyword">in</span> newList) &#123;</span><br><span class="line">        println(fruit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>filter 函数。用来过滤集合中的数据。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> newList = list.filter &#123; it.length &lt;= <span class="number">5</span> &#125;.map &#123; it.uppercase() &#125;</span><br><span class="line">    <span class="keyword">for</span> (fruit <span class="keyword">in</span> newList) &#123;</span><br><span class="line">        println(fruit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>any 和 all 函数。any 函数用于判断集合中是否至少存在一个元素满足指定条件，all 函数用于判断集合中是否所有元素都满足指定条件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> anyResult = list.any &#123; it.length &lt;= <span class="number">5</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> allResult = list.all &#123; it.length &lt;= <span class="number">5</span> &#125;</span><br><span class="line">    println(<span class="string">&quot;anyResult is &quot;</span> + anyResult + <span class="string">&quot;, allResult is &quot;</span> + allResult)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Java-函数式-API-的使用"><a href="#Java-函数式-API-的使用" class="headerlink" title="Java 函数式 API 的使用"></a>Java 函数式 API 的使用</h2><p>条件限制：如果我们在 Kotlin 代码中调用了一个 Java 方法，并且该方法接收一个 Java 单抽象方法接口参数，就可以使用函数式 API。</p><p>举个例子：</p><p>Java 原生 API 中有一个最为常见的单抽象方法接口——Runnable接口。这个接口中只有一个待实现的 run() 方法，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于任何一个 Java 方法，只要它接收 Runnable 参数，就可以使用函数式 API。不过 Runnable 接口主要还是结合线程来一起使用的。</p><p>Thread 类的构造方法中接收了一个Runnable 参数，可以使用如下 Java 代码创建并执行一个子线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;Thread is running&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>翻译成 Kotlin 版本：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread(<span class="keyword">object</span> : Runnable &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line"> println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;).start()</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.因为Runnable类中只有一个待实现方法，即使这里没有显式地重写run()方法，Kotlin也能自动明白Runnable后面的Lambda表达式就是要在run()方法中实现的内容。</span></span><br><span class="line"><span class="comment"> *2.如果一个Java方法的参数列表中有且仅有一个Java单抽象方法接口参数，可以将接口名进行省略</span></span><br><span class="line"><span class="comment"> *3.当Lambda表达式是方法的最后一个参数时，可以将Lambda表达式移到方法括号的外面</span></span><br><span class="line"><span class="comment"> *4.如果Lambda表达式还是方法的唯一一个参数，还可以将方法的括号省略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Thread &#123;</span><br><span class="line"> println(<span class="string">&quot;Thread is running&quot;</span>)</span><br><span class="line">&#125;.start()</span><br></pre></td></tr></table></figure><h1 id="空指针检查"><a href="#空指针检查" class="headerlink" title="空指针检查"></a>空指针检查</h1><h2 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>)</span></span> &#123;</span><br><span class="line"> study.readBooks()</span><br><span class="line"> study.doHomework()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 默认所有的参数和变量都不可为空，所以这里传入的 Study 参数也一定不会为空，我们可以放心地调用它的任何函数。也就是说，Kotlin 将空指针异常的检查提前到了编译时期，如果我们的程序存在空指针异常的风险，那么在编译的时候会直接报错，修正之后才能成功运行，这样就可以保证程序在运行时期不会出现空指针异常了。</p><p>如果需要可为空的类型，只需要在类名后面加个 ‘?’。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    doStudy(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(study != <span class="literal">null</span>)&#123;</span><br><span class="line">        study.readBooks()</span><br><span class="line"> study.doHomework()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判空辅助工具"><a href="#判空辅助工具" class="headerlink" title="判空辅助工具"></a>判空辅助工具</h2><ul><li><p><code>?.</code> 操作符：当对象不为空时正常调用相应的方法，当对象为空时则什么都不做。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">a.doSomething()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a?.doSomething()</span><br></pre></td></tr></table></figure><p>使用 <code>?.</code> 操作符对 doStudy() 函数进行优化， 代码如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;</span><br><span class="line"> study?.readBooks()</span><br><span class="line"> study?.doHomework()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>?:</code> 操作符：左右两边都接收一个表达式， 如果左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c = <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123; a &#125; <span class="keyword">else</span> &#123; b &#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c = a ?: b</span><br></pre></td></tr></table></figure></li></ul><p>要编写一个函数用来获得一段文本的长度，使用传统的写法就可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getTextLength</span><span class="params">(text: <span class="type">String</span>?)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (text != <span class="literal">null</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> text.length</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助 <code>?.</code> 和 <code>`?:</code> 操作符简化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getTextLength</span><span class="params">(text: <span class="type">String</span>?)</span></span> = text?.length ?: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>不过 Kotlin 的空指针检查机制也并非总是那么智能，有的时候我们可能从逻辑上已经将空指针异常处理了，但是 Kotlin 的编译器并不知道，这个时候它还是会编译失败。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content: String? = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (content != <span class="literal">null</span>) &#123;</span><br><span class="line">        printUpperCase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printUpperCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> upperCase = content.uppercase()</span><br><span class="line">    println(upperCase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 printUpperCase() 函数并不知道外部已经对 content 变量进行了非空检查，在调用 uppercase() 方法时，还认为这里存在空指针风险，从而无法编译通过。</p><p>在这种情况下，如果我们想要强行通过编译，可以使用非空断言工具：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printUpperCase</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> upperCase = content!!.uppercase()</span><br><span class="line">    println(upperCase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>let 函数。将原始调用对象作为参数传递到 Lambda 表达式中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.let &#123; obj2 -&gt;</span><br><span class="line"> <span class="comment">// 编写具体的业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了 obj 对象的 let 函数，然后 Lambda 表达式中的代码就会立即执行，并且这个 obj 对象本身还会作为参数传递到 Lambda 表达式中。不过，为了防止变量重名，这里将参数名改成了 obj2，但实际上它们是同一个对象。</p><p>let 函数的特性配合 <code>?.</code> 操作符 可以在空指针检查的时候起到很大的作用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;</span><br><span class="line"> study?.readBooks()</span><br><span class="line"> study?.doHomework()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;</span><br><span class="line"> study?.let &#123; stu -&gt;</span><br><span class="line"> stu.readBooks()</span><br><span class="line"> stu.doHomework()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;</span><br><span class="line"> study?.let &#123;</span><br><span class="line"> it.readBooks()</span><br><span class="line"> it.doHomework()</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let 函数是可以处理全局变量的判空问题的，而 if 判断语句则无法做到这一点。</p></li></ul><h1 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h1><h2 id="字符串内嵌表达式"><a href="#字符串内嵌表达式" class="headerlink" title="字符串内嵌表达式"></a>字符串内嵌表达式</h2><p>用 <code>$&#123;&#125;</code> 代替加号连接符，实现字符串拼接，如果表达式只有一个变量，可以省略大括号。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> brand = <span class="string">&quot;Samsung&quot;</span></span><br><span class="line"><span class="keyword">val</span> price = <span class="number">1299.99</span></span><br><span class="line">println(<span class="string">&quot;Cellphone(brand=<span class="variable">$brand</span>, price=<span class="variable">$price</span>)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="标准函数-with、run-和-apply"><a href="#标准函数-with、run-和-apply" class="headerlink" title="标准函数 with、run 和 apply"></a>标准函数 with、run 和 apply</h2><ul><li><p>with 函数</p><p>接收两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个 Lambda 表达式。with 函数会在 Lambda 表达式中提供第一个参数对象的上下文，并使用 Lambda 表达式中的最后一行代码作为返回值返回。示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> result = with(obj) &#123;</span><br><span class="line"> <span class="comment">// 这里是obj的上下文</span></span><br><span class="line"> <span class="string">&quot;value&quot;</span> <span class="comment">// with函数的返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以在连续调用同一个对象的多个方法时让代码变得更加精简。</p><p>比如有一个水果列表，现在我们想吃完所有水果，并将结果打印出来，就可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> builder = StringBuilder()</span><br><span class="line">    builder.append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">        builder.append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    builder.append(<span class="string">&quot;Ate all fruits.&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = builder.toString()</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码连续调用了很多次 builder 对象的方法。这时可以考虑使用 with 函数来让代码变得更加精简：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = with(StringBuilder()) &#123;</span><br><span class="line">        append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> (fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">            append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        append(<span class="string">&quot;Ate all fruits.&quot;</span>)</span><br><span class="line">        toString()</span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>run 函数</p><p>run 函数通常不会直接调用， 而是要在某个对象的基础上调用；run函数只接收一个 Lambda 参数，并且会在 Lambda 表达式中提供调用对象的上下文。其他方面和 with 函数是一样的，包括也会使用 Lambda 表达式中的最后一行代码作为返回值返回。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = StringBuilder().run &#123;</span><br><span class="line">        append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> (fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">            append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        append(<span class="string">&quot;Ate all fruits.&quot;</span>)</span><br><span class="line">        toString()</span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>apply 函数</p><p>apply 函数和 run 函数也是极其类似的，都要在某个对象上调用，并且只接收一个 Lambda 参数，也会在Lambda 表达式中提供调用对象的上下文，但是 apply 函数无法指定返回值，而是自动返回调用对象本身。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>, <span class="string">&quot;Grape&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = StringBuilder().apply &#123;</span><br><span class="line">        append(<span class="string">&quot;Start eating fruits.\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> (fruit <span class="keyword">in</span> list) &#123;</span><br><span class="line">            append(fruit).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        append(<span class="string">&quot;Ate all fruits.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(result.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 启动 Activity 的代码也可以优化：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(context, SecondActivity::<span class="keyword">class</span>.java).apply &#123;</span><br><span class="line"> putExtra(<span class="string">&quot;param1&quot;</span>, <span class="string">&quot;data1&quot;</span>)</span><br><span class="line"> putExtra(<span class="string">&quot;param2&quot;</span>, <span class="string">&quot;data2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">context.startActivity(intent)</span><br></pre></td></tr></table></figure></li></ul><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><p>统计字符串中字母的数量，可以这样写：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> StringUtil &#123;</span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">lettersCount</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> (char <span class="keyword">in</span> str) &#123;</span><br><span class="line"> <span class="keyword">if</span> (char.isLetter()) &#123;</span><br><span class="line"> count++</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> count</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;ABC123xyz!@#&quot;</span></span><br><span class="line"><span class="keyword">val</span> count = StringUtil.lettersCount(str)</span><br></pre></td></tr></table></figure><p>还可以将 <code>lettersCount()</code> 函数添加到 String 类。</p><p>定义扩展函数的语法结构：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> ClassName.<span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义扩展函数只需要在函数名的前面加上一个 ClassName. 的语法结构，就表示将该函数添加到指定类当中。</p><p>优化后的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lettersCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> (char <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (char.isLetter()) &#123;</span><br><span class="line"> count++</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> count = <span class="string">&quot;ABC123xyz!@#&quot;</span>.lettersCount()</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>例如重载加法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) &#123;</span><br><span class="line"> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(money: <span class="type">Money</span>)</span></span>: Money &#123;</span><br><span class="line"> <span class="keyword">val</span> sum = value + money.value</span><br><span class="line"> <span class="keyword">return</span> Money(sum)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> money1 = Money(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> money2 = Money(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> money3 = money1 + money2</span><br><span class="line">println(money3.value)</span><br></pre></td></tr></table></figure><p>语法糖表达式和实际调用函数对照表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">语法糖表达式</th><th style="text-align:center">实际调用函数</th></tr></thead><tbody><tr><td style="text-align:center">a + b</td><td style="text-align:center">a.plus(b)</td></tr><tr><td style="text-align:center">a - b</td><td style="text-align:center">a.minus(b)</td></tr><tr><td style="text-align:center">a * b</td><td style="text-align:center">a.times(b)</td></tr><tr><td style="text-align:center">a / b</td><td style="text-align:center">a.div(b)</td></tr><tr><td style="text-align:center">a % b</td><td style="text-align:center">a.rem(b)</td></tr><tr><td style="text-align:center">a++</td><td style="text-align:center">a.inc()</td></tr><tr><td style="text-align:center">a—</td><td style="text-align:center">a.dec()</td></tr><tr><td style="text-align:center">+a</td><td style="text-align:center">a.unaryPlus()</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:center">a.unaryMinus()</td></tr><tr><td style="text-align:center">!a</td><td style="text-align:center">a.not()</td></tr><tr><td style="text-align:center">a == b</td><td style="text-align:center">a.equals(b)</td></tr><tr><td style="text-align:center">a &gt; b</td><td style="text-align:center">a.equals(b)</td></tr><tr><td style="text-align:center">a &lt; b</td><td style="text-align:center">a.equals(b)</td></tr><tr><td style="text-align:center">a &gt;= b</td><td style="text-align:center">a.equals(b)</td></tr><tr><td style="text-align:center">a &lt;= b</td><td style="text-align:center">a.compareTo(b)</td></tr><tr><td style="text-align:center">a..b</td><td style="text-align:center">a.rangeTo(b)</td></tr><tr><td style="text-align:center">a[b]</td><td style="text-align:center">a.get(b)</td></tr><tr><td style="text-align:center">a[b] = c</td><td style="text-align:center">a.set(b, c)</td></tr><tr><td style="text-align:center">a in b</td><td style="text-align:center">b.contains(a)</td></tr></tbody></table></div><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>如果一个函数接收另一个函数作为参数，或者返回值的类型是另一个函数，那么该函数就称为高阶函数。</p><p>示例代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">example</span><span class="params">(func: (<span class="type">String</span>, <span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line"> func(<span class="string">&quot;hello&quot;</span>, <span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>-&gt; 左边的部分用来声明该函数接收的参数，多个参数之间使用逗号隔开，如果不接收任何参数，写一对空括号即可；而 -&gt; 右边的部分用于声明该函数的返回值类型，如果没有返回值就使用 Unit，它相当于 Java 中的 void。</p><p><strong>参考资料：</strong></p><p>[1] 郭霖 ：第一行代码 Android（第3版)）. 北京：人民邮电出版社，2020</p><p>[2] <a href="https://kotlinlang.org/docs/home.html">Kotlin docs | Kotlin (kotlinlang.org)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h1&gt;&lt;p&gt;Kotlin 中定义一个变量，只允许在变量前声明两种关键字：val 和 var。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p</summary>
      
    
    
    
    <category term="Android" scheme="http://10185102110.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="http://10185102110.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>系统测试</title>
    <link href="http://10185102110.github.io/2021/09/28/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2021/09/28/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-28T08:15:36.000Z</published>
    <updated>2021-11-01T12:47:23.284Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>系统测试是对已经集成好的软件进行彻底的测试，此外还需要检测它与系统中的其他部分能否协调工作，以验证软件系统的正确性和性能等是否满足需求规格说明所指定的要求。</p><p>系统测试通常是消耗测试资源最多的地方。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p><img src="0.png" alt=""></p><h1 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h1><p>系统测试很困难，并且没有一套通用的方法，因此系统测试需要创造性。</p><p>下面是几类常用的系统测试。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>性能测试就是对软件的运行性能指标进行测试，判断系统集成之后在实际的使用环境下能否稳定、可靠地运行。为记录软件的运行性能，经常需要在系统中安装必须的测量仪表或者软件。</p><p>在性能测试中，主要考虑以下两个方面：</p><ul><li><p>时间性能</p><p>时间主要指软件的一个具体事务的响应时间。响应时间的长短并无一个绝对统一的标准。</p></li><li><p>空间性能</p><p>指软件运行时消耗的系统资源，它直接决定了系统的最低配置、推荐配置。</p></li></ul><p>性能测试最终要达到的目标：</p><p>（1）判断被测系统是否满足预期的性能需求；</p><p>（2）判断系统的性能表现。</p><h2 id="强度测试"><a href="#强度测试" class="headerlink" title="强度测试"></a>强度测试</h2><p>也称压力测试、负载测试。强度测试模拟实际情况下软/硬件环境和用户使用过程的系统负荷，长时间或超负荷地运行测试软件来测试系统，以检验系统能力的最高限度，从而了解系统的可靠性、稳定性等。</p><p>例如，将输入的数据值提高一个或几个数量级来测试输入功能的响应等。</p><h2 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h2><p>目的在于检查系统对非法侵入的防范能力，验证安装在系统内的保护机构是否确实能够对系统进行保护。安全性测试设法设计出一些测试用例试图突破系统的安全保密措施。</p><p>理论上只要有足够的时间和资源，没有不可进入的系统，因此系统安全的设计准则是使非法侵入的代价超过被保护信息的价值。</p><p>典型的安全性测试考虑的问题如下：</p><p>（1）系统能否检测到无效参数，并予以合适的处理；</p><p>（2）系统能否检测到无效指令，并进行适当的处理；</p><p>（3）系统能否正确保存系统配置数据，系统发生故障时能否恢复；</p><p>（4）系统能否将配置数据导出，并在其他计算机上进行备份；</p><p>（5）系统能否导入配置数据，并正常使用导入的数据；</p><p>（6）能否不输入密码就登录系统；</p><p>（7）系统对多次无效密码的输入能否进行适当的处理；</p><p>（8）执行严格的安全性功能能否比系统的其他部分具有更高的有效性；</p><p>（9）是否具备防止主要错误或自然意外方面的能力；</p><p>（10）是否具有较高的安全性控制精度，包括错误的数量、频率和严重性。</p><p>（11）系统对各种指令或操作的反应时间如何；</p><p>（12）是否具有较高的吞吐量，吞吐量包括用户和服务请求的峰值与均值。</p><h2 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><p>要对新软件进行兼容性测试，需要知道以下信息：</p><ul><li>软件要求与哪种操作系统、Web 浏览器、应用软件保持兼容，如果要测试的软件是一个平台，那么设计要求哪些应用软件能在它上面运行；</li><li>软件使用哪种数据与其他平台和软件进行交互和共享信息。</li></ul><ol><li><p>向前兼容和向后兼容</p><p>向前兼容指可以使用软件的未来版本；</p><p>向后兼容指可以使用软件的以前版本。</p></li><li><p>不同版本之间的兼容性</p><p>不可能在一个操作系统上测试所有的软件程序，因此决定哪些是必须测试的，决定的原则如下：</p><p>（1）流行程度</p><p>（2）年头：应该选择 3 年以内的程序和版本。</p><p>（3）类型：把软件分为画图、字处理、数据库、通信等类型，每一种类型选择一个软件进行测试。</p><p>（4）生产厂商：根据开发软件的公司来选择软件。</p></li><li><p>标准和规范</p><p>适用于软件平台的表追和规范分为高级标准和低级标准。</p><p>高级标准是产品普遍应遵守的，例如 Microsoft Windows 认证徽标。</p><p>低级标准是对产品开发细节的描述。</p></li><li><p>数据共享兼容性</p><p>针对数据共享进行测试需要考虑以下几个方面：</p><p>（1）文件能够正常地在各种介质中进行保存和读取；</p><p>（2）文件能够正确导入和导出；</p><p>（3）能够支持剪切、复制及粘贴等基本操作；</p><p>（4）支持软件在不同版本间的数据转换。</p></li></ol><h2 id="恢复测试"><a href="#恢复测试" class="headerlink" title="恢复测试"></a>恢复测试</h2><p>目的是检查系统的容错能力，在恢复性测试过程中采用多种人工干预的方式使系统失效，从而检验系统的恢复能力。若系统能够自动从失效中恢复，测试的重点在于对重新初始化、数据恢复、重启等功能的正确性验证；若系统必须经人工干预后才能从失效中恢复，测试重点还包括评估平均恢复时间（Mean Time Between Failures，MTTR）是否在规定的范围内。</p><p>在恢复性测试中主要考虑以下问题：</p><p>（1）是否存在潜在的灾难和已确认的系统失效导致的结果会怎样；</p><p>（2）系统保护和恢复过程是否为错误提供了足够的反应；</p><p>（3）恢复过程是否能够正确工作。</p><h2 id="用户图形界面测试"><a href="#用户图形界面测试" class="headerlink" title="用户图形界面测试"></a>用户图形界面测试</h2><p>优秀用户界面的基本构成标准：</p><p>（1）规范化：典型规范化要求包含第一次打开应用程序时应显示有关系统基本信息的屏幕，各种窗口应该有最小化、恢复和关闭按钮，有约定成俗的正确图标，有正确标题，数据的规范显示等。</p><p>（2）灵活性：主要针对熟练的用户而言，多样化的选择，例如界面皮肤、更换字体等。</p><p>（3）正确性：根据产品说明书对照即可发现问题。</p><p>（4）直观性</p><p>（5）舒适性</p><p>（6）实用性</p><p>（7）一致性：遵循公开的标准和规范。</p><p>（8）帮助：系统应提供详尽、可靠的帮助文档。</p><p>（9）独特性</p><p>（10）多窗口应用与系统资源：尽可能占用最低限度的资源，多窗口要保证用户操作方便。</p><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><p>目标如下：</p><p>（1）安装程序能够正确运行；</p><p>（2）程序安装正确；</p><p>（3）程序安装后能够正确运行；</p><p>（4）完善性安装后程序仍能正确运行。</p><p>安装前测试重点：</p><p>（1）是否需要专业人员安装；</p><p>（2）确认打包程序的特性。</p><p>安装过程中的测试重点：</p><p>（1）安装过程应与安装手册中描述的步骤完全一致；</p><p>（2）安装过程应符合一般的安装流程；</p><p>（3）检验安装过程中的所有默认选项；</p><p>（4）检验安装过程中的所有典型选项；</p><p>（5）应对安装环境进行限制；</p><p>（6）应测试不同的安装组合（包括参数组合、控件执行顺序的组合、产品组件安装顺序的组合等）；</p><p>（7）在安装过程中应有明显、合理的操作提示；</p><p>（8）应验证软件使用许可证号或注册码；</p><p>（9）应能识别大部分硬件。</p><p>对于安装过程中的异常情况，应考虑以下方面：</p><p>（1）应测试安装空间不足的情况；</p><p>（2）测试异常配置或状态（如断电、断网、数据库终止等）；</p><p>（3）安装过程中应允许终止，终止安装后能确保系统恢复原状。</p><p>安装之后的测试重点：</p><p>（1）能否产生正确的目录结构和文件；</p><p>（2）动态库是否正确；</p><p>（3）软件能否正确运行；</p><p>（4）在所有运行环境上验证安装过程；</p><p>（5）安装后系统是否对其他应用程序造成不正常影响；</p><p>（6）Web 服务是否有冲突；</p><p>（7）系统升级后原有应用程序能否正常运行。</p><p>此外还有软件卸载的测试。</p><h2 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h2><p>如果系统需求规格说明书中有可靠性要求，就需要进行可靠性测试。</p><p>通常使用以下指标来度量系统的可靠性：平均无故障时间是否超过规定的时限、因故障停机的时间一年内不应超过多少时间等。</p><h2 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h2><p>配置测试是用各种硬件和软件平台以及不同设置检查软件操作的过程，以保证测试的软件可以使用尽可能多的硬件组合。</p><p>如果没有时间和计划测试所有的配置，就需要把成千上万种可能的配置缩减到可以接受的范围，即测试的目标。在计划配置测试时一般采用的过程如下：</p><p>（1）确定所需的硬件类型；</p><p>（2）确定哪些硬件型号和驱动程序可以使用；</p><p>（3）确定可能的硬件特性、模式和选项；</p><p>（4）将硬件配置缩减到可以控制的范围内；</p><p>（5）明确使用硬件配置的软件特性；</p><p>（6）设计在每种配置中要执行的测试用例；</p><p>（7）反复测试直到满意为止。</p><h2 id="可用性测试"><a href="#可用性测试" class="headerlink" title="可用性测试"></a>可用性测试</h2><ul><li>符合标准和规范</li><li>直观性</li><li>一致性</li><li>灵活性</li><li>舒适性</li><li>正确性</li><li>实用性</li></ul><h2 id="文档资料测试"><a href="#文档资料测试" class="headerlink" title="文档资料测试"></a>文档资料测试</h2><h2 id="网站测试"><a href="#网站测试" class="headerlink" title="网站测试"></a>网站测试</h2><p>一般网络测试包括以下内容：</p><ul><li><p>文字测试</p><p>可以用测试文档的方法进行测试，检查用户等级、术语、内容、准确度，特别是可能过期的内容。</p></li><li><p>链接测试</p><p>（1）测试所有链接是否按指示的那样链接到了正确的页面；</p><p>（2）测试所链接的页面是否存在；</p><p>（3）保证网站上没有孤立的页面，即没有链接指向的页面；</p><p>（4）链接测试必须在集成测试阶段完成。</p></li><li><p>图形测试</p><p>一个 Web 页的图形可以包括图片、动画、边框、颜色、字体、背景、按钮等，内容如下：</p><p>（1）确保图形有明确用途，避免浪费带宽；</p><p>（2）图片的大小和质量很重要；</p><p>（3）检测是否所有图形都正确载入和显示了；</p><p>（4）验证所有页面字体的风格是否一致；</p><p>（5）背景颜色是否与字体颜色和前景颜色搭配；</p><p>（6）验证文字回绕是否正确。</p></li><li><p>表单测试</p><p>表单是指网页上用于输入和选择信息的文本框、列表框、其他域。</p><p>检测域的大小是否正确，数据接收是否正确，可选域是否真正可选等内容。</p></li><li><p>动态内容测试</p><p>动态内容指根据当前条件发生变化的文字和图形，例如日期、时间、用户喜好或者具体的用户操作等。</p></li><li><p>数据库测试</p><p>在使用了数据库的 Web 应用系统中一般可能出现两种故障：一是数据一致性故障，二是输出故障。前者主要是用户提交的表单信息不正确引起，后者主要是网络速度或程序设计问题引起的。</p></li><li><p>服务器性能和加载测试</p><p>模拟数百万个链接和下载。</p></li><li><p>安全性测试</p><p>（1）测试有效的和无效的用户名和密码，是否可以不登录而直接浏览某个页面；</p><p>（2）检测网页是否有超时的限制，即用户登录后在一定时间内没有操作是否需要重新登录；</p><p>（3）当使用安全套接字时检测加密是否正确、信息是否完整；</p><p>（4）服务器端的脚本是否构成安全漏洞。</p></li></ul><h2 id="常见的测试工具"><a href="#常见的测试工具" class="headerlink" title="常见的测试工具"></a>常见的测试工具</h2><ul><li><p>负载压力测试</p><p>LoadRunner(商用)、JMeter(开源)</p></li><li><p>功能测试</p><p>WinRunner</p></li><li><p>白盒测试</p><p>JUnit5</p></li><li><p>测试管理</p><p>TestDirector、TestManager</p></li></ul><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;系统测试是对已经集成好的软件进行彻底的测试，此外还需要检测它与系统中的其他部分能否协调工作，以验证软件系统的正确性</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>集成测试</title>
    <link href="http://10185102110.github.io/2021/09/27/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2021/09/27/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-27T12:06:36.000Z</published>
    <updated>2021-09-27T13:18:30.029Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>集成测试是在单元测试的基础上将多个模块组合在一起进行测试的过程，主要检查各个软件单元之间的相互接口是否正确，是介于单元测试与系统测试之间的过渡阶段，是单元测试的扩展和延伸。</p><p>不经过单元测试的模块不应进行集成测试。</p><p>通过单元测试和集成测试仅能保证软件开发的功能得以实现，不能确认在实际运行时能否满足用户的需求。</p><h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><p>集成测试使用黑盒测试方法测试集成的功能，并对以前的集成进行回归测试。</p><ul><li>将各模块连接起来时检查各个模块相互调用时、数据穿越模块接口时是否会丢失；</li><li>各子功能组合起来能否达到预期要求的各项功能；</li><li>一个模块的功能是否会对其他模块的功能产生不利影响；</li><li>全局数据结构是否有问题，是否会被异常修改；</li><li>单个模块的误差累积起来是否会放大，从而达到不可接受的程度。</li></ul><h2 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h2><p>对于传统软件，集成测试划分为 $3$ 个层次，即模块内集成测试、子系统内集成测试和子系统间集成测试。</p><p>对于面向对象的应用系统，可以分为两个阶段，即类内集成测试和类间集成测试。</p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>所有公共接口都要被测试到；</li><li>关键模块必须进行充分的测试；</li><li>集成测试应当按一定的层次进行；</li><li>集成测试应当尽早开始，并以总体设计为基础；</li><li>当接口发生修改时，涉及的相关接口必须进行再测试。</li></ul><h1 id="集成测试策略"><a href="#集成测试策略" class="headerlink" title="集成测试策略"></a>集成测试策略</h1><p>在对两个以上的模块进行集成时需要考虑和周围模块的关系，因此需要设计若干辅助测试模块。</p><p>辅助测试模块分为以下两种：</p><ul><li><strong>驱动模块</strong>（Driver）：用来模拟被测模块的上级调用模块，功能比真正的上级模块简单得多，仅仅是接受测试数据，并向被测模块传送测试数据，启动被测模块，回收并输出测试结果。</li><li><strong>桩模块</strong>（Stub）：用来模拟被测模块在执行过程中所要调用的模块，接受被测模块输出的数据并完成它所指派的任务。</li></ul><p>假设被测程序的结构如图 $1$ 所示，由 $6$ 个模块组成：</p><p><img src="1.png" alt=""></p><h2 id="非渐增式集成"><a href="#非渐增式集成" class="headerlink" title="非渐增式集成"></a>非渐增式集成</h2><p>非渐增式集成测试采用一步到位的方法进行测试，即对所有模块进行个别的单元测试后按程序结构图将各模块连接起来，把连接后的程序当作一个整体进行测试。</p><p>在进行单元测试时，根据在结构图中的地位对模块 B 和 D 配备了驱动模块和桩模块，对模块 C、E、F 只配备了驱动模块，如图 $2$；对主模块 A 只配备了 $3$ 个桩模块来模拟被它调用的 B、C 和 D，如图 $3$。</p><p><img src="2.png" alt=""></p><p><img src="3.png" alt=""></p><p>对它们分别进行单元测试以后，再按照图 $1$ 所示的结构图连接起来进行集成测试。</p><h2 id="渐增式集成"><a href="#渐增式集成" class="headerlink" title="渐增式集成"></a>渐增式集成</h2><p>基本思路是首先将各模块独立地进行单元测试，然后将这些模块逐步组装成较大的系统，边组装边测试，以发现在组装时产生的错误，最终组装成一个符合要求的软件系统。</p><p>按照不同的次序实施，有下面两种测试策略：</p><ol><li><p>自顶向下增量式集成测试</p><p>该测试方法是按照程序结构图，首先利用桩模块测试主模块，通过测试后用实际的模块替代桩模块进行测试，重复以上步骤，直至替代了所有的桩模块。</p><p>在测试过程中，决定模块测试次序的基本原则如下：</p><p>（1）尽早测试关键的模块，即比较重要、比较复杂的可能出错或含有新算法的模块；</p><p>（2）尽早测试包含输入、输出功能的模块。</p><p>又可以分为：</p><ul><li>深度优先策略</li><li>广度优先策略</li></ul></li><li><p>自底向上增量式集成测试</p><p>该测试方法是按照程序结构图，首先利用驱动模块测试最底层模块，通过测试后用实际的模块替代驱动模块进行测试，重复以上步骤，直至替代了所有的驱动模块。</p><p>在测试过程中，决定测试次序的基本原则是该模块的所有下级模块都被测试过了。</p></li></ol><p>两种测试方法的比较：</p><p><img src="0.png" alt=""></p><h2 id="其他集成测试策略"><a href="#其他集成测试策略" class="headerlink" title="其他集成测试策略"></a>其他集成测试策略</h2><ol><li><p>三明治集成测试</p><p>三明治集成测试是将自顶向下测试和自底向上测试有机结合起来，采用并行的自顶向下、自底向上集成方式形成改进的三明治方法。采用持续集成的策略。</p></li><li><p>核心系统先行集成测试</p><p>先对核心软件部件进行集成测试，在测试通过的基础上再按各外围软件部件的重要程度逐个集成到核心系统中。</p></li><li><p>高频集成测试</p><p>指同步于软件开发过程每隔一段时间对开发团队的现有代码进行一次集成测试。</p></li></ol><h1 id="面向对象的集成策略"><a href="#面向对象的集成策略" class="headerlink" title="面向对象的集成策略"></a>面向对象的集成策略</h1><p>传统的集成测试通过集成完成的功能模块进行测试，而对于面向对象程序，相互调用的功能分布在程序的不同类中，根本无法在编译不完成的程序上对类进行测试；此外面向对象程序具有动态性，程序的控制流往往无法确定，因此只能对整个编译后的程序做基于<strong>黑盒技术</strong>的集成测试。</p><h2 id="对象交互"><a href="#对象交互" class="headerlink" title="对象交互"></a>对象交互</h2><p>对象交互是一个对象向另一个对象发出请求，接收者执行一些操作来完成这个请求。</p><p>类与类交互的方式（类接口）主要有：</p><ul><li>公共操作将一个或多个类命名为正式参数的类型；</li><li>公共操作将一个或多个命名作为返回值的类型；</li><li>类的方法创建另一个类的实例；</li><li>类的方法引用某个类的全部实例。</li></ul><p>对象交互的测试根据类的类型可以分为原始类测试、汇集类测试和协作类测试。</p><p>原始类测试使用类的单元测试技术。</p><ol><li><p>汇集类测试</p><p>汇集类：这些类在说明中使用对象，但是实际上从不和这些对象中的任何一个进行协作，即从不请求这些对象的服务。汇集类会表现出以下一个或多个行为：</p><ul><li>存放这些对象的引用，通常表现程序中对象之间的一对多的关系；</li><li>创建这些对象的实例；</li><li>删除这些对象的实例。</li></ul><p>可以使用测试原始类的方式来测试汇集类，测试驱动程序要创建一些实例，作为消息中心的参数被传送给一个正在测试的集合。测试用例主要目的是保证那些实例被正确加入集合并被正确地从集合中移出，测试用例说明的集合会对其容量有所限制。假如在实际应用中可能要加入 30-50 条信息，那么生成的测试用例至少要增加 50 条信息。</p></li><li><p>协作类测试</p><p>这种类在它们的一个或多个操作中使用其他对象，并将其作为实现中不可缺少的一部分。</p></li></ol><h2 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h2><p>面向对象的集成测试分两步进行，先静态测试，再动态测试。</p><p>设计测试用例可参考下列步骤：</p><p>（1）先选定检测的类，仔细给出类的状态和相应的行为、类或成员函数间传递的消息、输入或输出的界定等；</p><p>（2）确定覆盖标准；</p><p>（3）利用结构关系图，确定待测类的所有关联；</p><p>（4）根据程序中类的对象构造测试用例，确认使用什么输入激发类的状态、使用类的服务和期望结果。</p><h2 id="常用测试技术"><a href="#常用测试技术" class="headerlink" title="常用测试技术"></a>常用测试技术</h2><ol><li><p>抽样测试</p><p>首先定义测试总体，然后定义一种方法，从测试用例总体中选择哪些被构建、哪些被执行。</p></li><li><p>正交阵列测试</p><p>正交阵列测试提供了一种特殊的抽样方法。正交阵列矩阵中的每一列代表一个因素，即一个变量代表程序中的一个特定的类状态，特定的状态数构成了级别。在正交阵列中，将各个因素可能组合成配对方式。</p><p>例如有 $3$ 个因素 A、B、C，每个因素有 $3$ 个级别 1、2、3，共有 27 种可能组合情况，即 A 的 $3$ 种情况 $\times$ </p><p>B 的 $3$ 种情况 $\times$​ C 的 $3$ 种情况，假定一个给定级别仅出现 $2$ 次，那么就只有下表所示的配对组合方式。</p><p>|      |  A   |  B   |  C   |<br>| :—: | :—: | :—: | :—: |<br>|  1   |  1   |  1   |  3   |<br>|  2   |  1   |  2   |  2   |<br>|  3   |  1   |  3   |  1   |<br>|  4   |  2   |  1   |  2   |<br>|  5   |  2   |  2   |  1   |<br>|  6   |  2   |  3   |  3   |<br>|  7   |  3   |  1   |  1   |<br>|  8   |  3   |  2   |  3   |<br>|  9   |  3   |  3   |  2   |</p><p>正交阵列测试使用平衡设计，每个配对级别仅出现一次。</p></li></ol><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件缺陷</title>
    <link href="http://10185102110.github.io/2021/09/26/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/"/>
    <id>http://10185102110.github.io/2021/09/26/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/</id>
    <published>2021-09-26T13:19:36.000Z</published>
    <updated>2021-09-27T13:19:22.780Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>术语：</p><ul><li><p>软件错误</p><p>指在软件生存期内的不希望或不可接受的人为错误，其结果是导致软件缺陷的产生。软件错误是一种人为过程，相对于软件本身是一种外部行为。</p></li><li><p>软件缺陷</p><p>存在于软件之中的那些不希望或不可接受的偏差，结果是软件运行于某一特定条件时出现软件故障，这时称软件缺陷被激活。</p></li><li><p>软件故障</p><p>指软件运行过程中出现的一种不希望或不可接受的内部状态。若没有适当的措施加以处理，便产生软件失效，软件故障是一种动态行为。</p></li><li><p>软件失效</p><p>指软件运行时产生的一种不希望或不可接受的外部行为结果。</p></li></ul><p>软件失效的机理：</p><p>软件错误是一种人为错误，一个软件错误必定产生一个或多个软件缺陷，当一个软件缺陷被激活时便产生一个软件故障；同一个软件缺陷在不同条件下被激活可能产生不同的软件故障。软件故障如果没有及时用容错措施加以处理便不可避免地导致软件失效。</p><h1 id="软件缺陷的属性"><a href="#软件缺陷的属性" class="headerlink" title="软件缺陷的属性"></a>软件缺陷的属性</h1><ul><li><p>缺陷标识（Identifier）：标记某个缺陷的一组符号，每个缺陷必须有一个唯一的标识。</p></li><li><p><strong>缺陷类型</strong>（Type）：一般包括功能缺陷、用户界面缺陷、文档缺陷、软件配置缺陷、性能缺陷、系统/模块接口缺陷等。</p><p>| 缺陷类型编号 |       缺陷类型        |                             描述                             |<br>| :—————: | :—————————-: | :—————————————————————————————: |<br>|      10      |      F-Function       | 影响重要的特性、用户界面、产品接口、硬件结构接口和全局数据结构，并且设计文档需要正式的变更等缺陷 |<br>|      20      |     A-Assignment      | 需要修改少量代码，如初始化或控制块，声明、重复命名，范围、限定等缺陷 |<br>|      30      |      I-Interface      | 与其他组件、模块或设备驱动程序、调用参数、控制块或参数列表相互影响的缺陷 |<br>|      40      |      C-Checking       |            提示的错误信息，不适当的数据验证等缺陷            |<br>|      50      | B Build/package/merge |           由于配置库、变更管理或版本控制引起的错误           |<br>|      60      |    D-Documentation    |                   影响发布和维护，包括注释                   |<br>|      70      |      G-Algorithm      |                           算法错误                           |<br>|      80      |   U-User Interface    | 人机交互特性：屏幕格式、确认用户输入、功能有效性、页面排版等缺陷 |<br>|      90      |     P-Performance     |     不满足系统可测量的属性值，如执行时间、事务处理速率等     |<br>|     100      |        N-Norms        |         不符合各种标准的要求，如编码标准、设计符号等         |</p></li><li><p>缺陷严重程度（Severity）：指因缺陷引起的故障对软件产品的影响程度。</p><p>|  #   | 缺陷严重等级 |                             描述                             |<br>| :—: | :—————: | :—————————————————————————————: |<br>|  1   |   Critical   |       不能执行正常工作功能或重要功能，或者危及人身安全       |<br>|  2   |    Major     |         严重影响系统要求或基本功能的实现，且无法更正         |<br>|  3   |    Minor     | 严重影响系统要求或基本功能的实现，但存在合理的更正方法（重新安装或重新启动该软件不属于更正方法） |<br>|  4   |   Cosmetic   |  使操作者不方便或遇到麻烦，但它不影响执行工作功能或重要功能  |<br>|  5   |    Other     |                           其他错误                           |</p></li><li><p>缺陷优先级（Priority）：指缺陷必须被修复的紧急程度。</p><p>|  #   |     缺陷优先级      |        描述        |<br>| :—: | :————————-: | :————————: |<br>|  1   | Resolve Immediately |    必须立即解决    |<br>|  2   |    Normal Queue     |  需要排队等待修复  |<br>|  3   |     Not Urgent      | 可以在方便时被纠正 |</p></li><li><p>缺陷状态（Status）：指缺陷通过一个跟踪修复过程的进展情况。</p><p>| 缺陷状态  |             描述             |<br>| :———-: | :—————————————: |<br>| Submitted |         已提交的缺陷         |<br>|   Open    |  确认“提交的缺陷”，等待处理  |<br>| Rejected  | 拒绝“提交的缺陷”，不需要修复 |<br>| Resolved  |          缺陷被修复          |<br>|  Closed   |  确认被修复的缺陷，将其关闭  |</p></li><li><p>缺陷起源（Origin）：指缺陷引起的故障第一次被检测到的阶段。</p><p>|   缺陷起源   |         描述         |<br>| :—————: | :—————————: |<br>| Requirement  | 在需求阶段发现的缺陷 |<br>| Architecture | 在构架阶段发现的缺陷 |<br>|    Design    | 在设计阶段发现的缺陷 |<br>|     Code     | 在编码阶段发现的缺陷 |<br>|     Test     | 在测试阶段发现的缺陷 |</p></li><li><p>缺陷来源（Source）：指引起缺陷的起因。</p><p>|   缺陷来源   |          描述          |<br>| :—————: | :——————————: |<br>| Requirement  | 由于需求问题引起的缺陷 |<br>| Architecture | 由于构架问题引起的缺陷 |<br>|    Design    | 由于设计问题引起的缺陷 |<br>|     Code     | 由于编码问题引起的缺陷 |<br>|     Test     | 由于测试问题引起的缺陷 |<br>| Integration  | 由于集成问题引起的缺陷 |</p></li><li><p>缺陷根源（Root Cause）：指发生错误的根本因素。</p></li></ul><h1 id="缺陷六要素"><a href="#缺陷六要素" class="headerlink" title="缺陷六要素"></a>缺陷六要素</h1><ul><li>缺陷标识</li><li>缺陷名称</li><li>缺陷优先级</li><li>缺陷严重程度</li><li>缺陷的复现步骤：用例的步骤、预期结果、实际结果。</li><li>附件：截图/日志/视频，目的是为缺陷佐证。</li></ul><h1 id="缺陷生命周期"><a href="#缺陷生命周期" class="headerlink" title="缺陷生命周期"></a>缺陷生命周期</h1><p>基本的软件缺陷生命周期：</p><p>发现缺陷$\rightarrow$分配缺陷$\rightarrow$修复缺陷$\rightarrow$验证缺陷$\rightarrow$解决缺陷</p><p>软件的状态在其生命周期中的变化如下：</p><p>（1）创建（Open）：缺陷从隐藏在产品中被发现。</p><p>（2）已分配（Assigned）：得到缺陷修复请求后，将修复任务分配给相应的开发人员进行修复。</p><p>（3）已修复（Fixed）：开发人员根据缺陷的描述重现缺陷的症状、修复缺陷，然后提交给测试人员验证修改。</p><p>（4）验证（Validate）：测试人员验证修改的有效性，若修正得到确认，缺陷状态变为“已确认”。</p><p>（5）关闭（Close）：测试人员关闭这个缺陷，结束其生命周期。</p><p>实践中的软件缺陷生命周期：</p><p><img src="0.png" alt=""></p><h1 id="IEEE-软件缺陷报告模板"><a href="#IEEE-软件缺陷报告模板" class="headerlink" title="IEEE 软件缺陷报告模板"></a>IEEE 软件缺陷报告模板</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">        IEEE 829-1998 软件测试文档编制标准软件缺陷报告模板</span></span><br><span class="line"><span class="code">                           目录</span></span><br><span class="line"><span class="code">1.软件缺陷报告标识符</span></span><br><span class="line"><span class="code">2.软件缺陷总结</span></span><br><span class="line"><span class="code">3.软件缺陷描述</span></span><br><span class="line"><span class="code">  3.1  输入</span></span><br><span class="line"><span class="code">  3.2  期望结果</span></span><br><span class="line"><span class="code">  3.3  实际结果</span></span><br><span class="line"><span class="code">  3.4  异常情况</span></span><br><span class="line"><span class="code">  3.5  日期和时间</span></span><br><span class="line"><span class="code">  3.6  软件缺陷发生的步骤</span></span><br><span class="line"><span class="code">  3.7  测试环境</span></span><br><span class="line"><span class="code">  3.8  再现测试</span></span><br><span class="line"><span class="code">  3.9  测试人员</span></span><br><span class="line"><span class="code">  3.10 见证人</span></span><br><span class="line"><span class="code">4.影响</span></span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;软件错误&lt;/p&gt;
&lt;p&gt;指在软件生存期内的不希望或不可接受的人为错误，其结</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>高质量代码</title>
    <link href="http://10185102110.github.io/2021/09/23/%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81/"/>
    <id>http://10185102110.github.io/2021/09/23/%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81/</id>
    <published>2021-09-23T07:58:03.000Z</published>
    <updated>2021-09-27T13:20:25.045Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><h2 id="程序的书写格式"><a href="#程序的书写格式" class="headerlink" title="程序的书写格式"></a>程序的书写格式</h2><h3 id="版本的声明格式"><a href="#版本的声明格式" class="headerlink" title="版本的声明格式"></a>版本的声明格式</h3><p>每个 C++/C 的通常分为两个文件，一个文件用于保存程序的声明，称为头文件；另一个用于保存程序的实现，称为定义文件。</p><p>在头文件和 C 程序文件中都必须包含版权和版本的声明。</p><p>版权和版本的声明位于头文件和定义文件的开头，主要内容如下：</p><ul><li>版权信息；</li><li>文件名称、标识符、摘要；</li><li>当前版本号、作者/修改者、完成日期；</li><li>版本历史信息。</li></ul><blockquote><p>【范例 1】</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Copyright @2016，北京侏罗纪公司XX部</span></span><br><span class="line"><span class="comment">//All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//文件名称：filename.h</span></span><br><span class="line"><span class="comment">//文件标识：见配置管理计划书</span></span><br><span class="line"><span class="comment">//摘   要：简要描述本文件的内容</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//当前版本：2.1</span></span><br><span class="line"><span class="comment">//作   者：输入作者名字</span></span><br><span class="line"><span class="comment">//完成日期：2016年3月20日</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//取代版本：2.0</span></span><br><span class="line"><span class="comment">//原作者 ：输入作者名字</span></span><br><span class="line"><span class="comment">//完成日期：2016年2月10日</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="头文件的书写格式"><a href="#头文件的书写格式" class="headerlink" title="头文件的书写格式"></a>头文件的书写格式</h3><p>用户可以通过头文件来调用库功能。</p><p>在很多场合源代码不便向用户公布，向用户提供头文件和二进制的库即可，用户只需要按照头文件中的接口声明来调用库功能，而不必关系接口是怎么实现的，编译器会从库中提取相应的代码。</p><p>头文件能加强类型安全检查，如果某个接口被实现或被使用时其方式与头文件中的声明不一致，编译器就会指出错误。</p><p>头文件必须包含下列内容：</p><ul><li>版权和版本声明；</li><li>预处理块；</li><li>函数和类结构声明等。</li></ul><p>正确使用预处理块：为了防止头文件被重复引用，应当用 <code>ifndef-define-endif</code> 结构产生预处理块。</p><p>正确引用头文件的格式：</p><p>（1）用 #include<filename.h> 格式引用标准库的头文件（编译器从标准库目录搜索）；</p><p>（2）用 #include “filename.h” 格式引用非标准库的头文件（编译器从用户的工作目录搜索）。</p><p>在头文件中只存放“声明“，而不存放”定义“。为了代码风格一致，建议将成员函数的定义与声明分开。</p><blockquote><p>【范例 2】</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版权和版本声明见范例1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> GRAPHICS_H</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> GRAPHICS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">   ...</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">(...)</span></span>;</span><br><span class="line">   ...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="定义文件的书写格式"><a href="#定义文件的书写格式" class="headerlink" title="定义文件的书写格式"></a>定义文件的书写格式</h3><p>定义文件必须包含以下内容：</p><ul><li><p>版权和版本声明；</p></li><li><p>对一些头文件的引用；</p></li><li>程序的实现体（数据和代码）。</li></ul><blockquote><p>【范例 3】</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版权和版本声明见范例1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;graphics.h&quot;</span></span></span><br><span class="line">   ...</span><br><span class="line">       </span><br><span class="line"><span class="comment">//全局函数的实现体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类成员函数的实现体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空行的使用"><a href="#空行的使用" class="headerlink" title="空行的使用"></a>空行的使用</h3><p>空行起着分隔程序段落的作用，而且不会浪费内存。</p><p>在一个函数体内，逻辑上密切相关的语句之间不加空行，其他地方应加空行分割。</p><ul><li>关键字之后要留空格。例如 <code>const、virtual、inline、case</code> 等关键字之后至少留一个空格，否则无法辨析关键字。<code>if、for、while</code> 等关键字之后应留一个空格再跟 ‘<code>(</code>‘，以突出关键字。</li><li>函数名之后不要留空格，紧跟 ‘<code>(</code>‘ 以区别于关键字。</li><li>‘<code>,</code>’ 之后要留空格，如果 ‘<code>;</code>‘ 不是一行的结束符号，其后也要留空格。</li><li>赋值操作符、比较操作符、算术操作符、逻辑操作符等二元操作符的前后要加空格。</li><li>一元操作符如 ’<code>!</code>’，’<code>++</code>‘，‘<code>&amp;</code>’（地址运算符） 等前后不加空格。</li><li>‘<code>[]</code>’，’<code>.</code>‘，’<code>-&gt;</code>‘ 这类操作符前后不加空格。</li></ul><h2 id="Windows-程序命名规则"><a href="#Windows-程序命名规则" class="headerlink" title="Windows 程序命名规则"></a>Windows 程序命名规则</h2><p>匈牙利命名法是一种编程时的命名规范，基本原则是变量名=属性+类型+对象描述，其中每个对象名都要求有明确的含义，可以取对象全称的一部分。</p><p>在 Windows 下开发程序应该尽量使用匈牙利命名法，用小写字母的前缀表示变量的类型，前缀的下一个字母用大写。</p><p>常见的数据类型前缀：</p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">类型</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">bool</td><td style="text-align:center">bIsParent</td></tr><tr><td style="text-align:center">by/byte</td><td style="text-align:center">byte</td><td style="text-align:center">byFlag</td></tr><tr><td style="text-align:center">ch</td><td style="text-align:center">char</td><td style="text-align:center">chText</td></tr><tr><td style="text-align:center">fn</td><td style="text-align:center">函数变量</td><td style="text-align:center">fnCallback</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">句柄</td><td style="text-align:center">hWnd</td></tr><tr><td style="text-align:center">i/n</td><td style="text-align:center">int</td><td style="text-align:center">iValue/nValue</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">unsigned int</td><td style="text-align:center">uFlag</td></tr><tr><td style="text-align:center">dw</td><td style="text-align:center">dword</td><td style="text-align:center">dwData</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">指针</td><td style="text-align:center">pBuffer</td></tr><tr><td style="text-align:center">sz/str</td><td style="text-align:center">字符串</td><td style="text-align:center">szBuffer</td></tr><tr><td style="text-align:center">lpstr/lpsz</td><td style="text-align:center">lpstr</td><td style="text-align:center">lpstrMessage</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">word</td><td style="text-align:center">wData</td></tr><tr><td style="text-align:center">x,y</td><td style="text-align:center">坐标</td><td style="text-align:center">xPos，yPos</td></tr><tr><td style="text-align:center">m_</td><td style="text-align:center">类成员变量</td><td style="text-align:center">m_bFlag</td></tr><tr><td style="text-align:center">g_</td><td style="text-align:center">全局变量</td><td style="text-align:center">g_bFlag</td></tr></tbody></table></div><p>常见的控件名前缀：</p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">控件类型</th></tr></thead><tbody><tr><td style="text-align:center">frm/wnd</td><td style="text-align:center">窗口</td></tr><tr><td style="text-align:center">cmd/btn</td><td style="text-align:center">按钮</td></tr><tr><td style="text-align:center">cmb/combo</td><td style="text-align:center">下拉式列表框</td></tr><tr><td style="text-align:center">txt</td><td style="text-align:center">文本输入框</td></tr><tr><td style="text-align:center">lbl</td><td style="text-align:center">标签</td></tr><tr><td style="text-align:center">grd</td><td style="text-align:center">Grid、网络</td></tr><tr><td style="text-align:center">scr</td><td style="text-align:center">滚动条</td></tr><tr><td style="text-align:center">lst</td><td style="text-align:center">列表框</td></tr><tr><td style="text-align:center">frame</td><td style="text-align:center">框架</td></tr></tbody></table></div><p>对于多个单词组成的变量名，每个单词的首字母应该大写。</p><p>类名和数据结构定义用大写字母开头的单词组合而成，类名前加前缀‘<code>C</code>’，数据结构不加前缀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNode</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLeafNode</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>&#125;;</span><br></pre></td></tr></table></figure><p>变量和参数用小写字母开头的单词组合而成，即第一个单词全部小写，后续单词首字母大写。</p><p>函数名用大写字母开头的单词组合而成。</p><h2 id="共性规则"><a href="#共性规则" class="headerlink" title="共性规则"></a>共性规则</h2><ul><li><p>较短的单词可以去掉元音形成缩写，较长的单词可取单词的头几个字形成缩写。</p><p>一些单词有公认的缩写，例如：</p><p>|   单词    | 缩写 |<br>| :———-: | :—: |<br>|   temp    | tmp  |<br>|   flag    | flg  |<br>| statistic | stat |<br>| increment | inc  |<br>|  message  | msg  |</p></li><li><p>应该在源文件的开始处对所使用的缩写或约定进行必要的注释说明。</p></li><li><p>Windows 下的源代码通常采用“大小写混排”的方式，如 AddChild；而 UNIX/Linux 应用程序的标识符通常采用“小写+下划线”的方式，如 add_child。</p></li><li><p>在程序中不要出现仅靠大小写区分的相似标识符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容易混淆</span></span><br><span class="line"><span class="keyword">int</span> x,X;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FOO</span><span class="params">(<span class="keyword">float</span> x)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在程序中不要出现标识符完全相同的局部变量和全局变量。</p></li><li><p>变量的名字应使用“形容词+名词”或“名词”的形式，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> value;</span><br><span class="line"><span class="keyword">float</span> oldValue;</span><br><span class="line"><span class="keyword">float</span> newValue;</span><br></pre></td></tr></table></figure></li><li><p>全局函数的名字应使用“动词“或”动词+名词“的形式。类的成员函数应只使用”动词“，被省略掉的名词就是对象本身。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DrawBox</span>(); <span class="comment">//全局函数</span></span><br><span class="line">box-&gt;<span class="built_in">Draw</span>(); <span class="comment">//类的成员函数</span></span><br></pre></td></tr></table></figure></li><li><p>用正确的反义词组命名具有互斥意义的变量或相反动作的函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> minValue;</span><br><span class="line"><span class="keyword">int</span> maxValue;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SetValue</span><span class="params">(...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetValue</span><span class="params">(...)</span></span>;</span><br></pre></td></tr></table></figure><p>常见的反义词组：</p><p>|    正     |    反     |<br>| :———-: | :———-: |<br>|    add    |  remove   |<br>|  insert   |  delete   |<br>| increment | decrement |<br>|    min    |    max    |<br>|   next    | previous  |<br>|   send    |  receive  |<br>|    cut    |   paste   |<br>|   begin   |    end    |<br>|   first   |   last    |<br>|    put    |    get    |<br>|   lock    |  unlock   |<br>|    old    |    new    |<br>|  source   |  target   |<br>|    up     |   down    |<br>|  create   |  destroy  |<br>|   open    |   close   |<br>|   start   |   stop    |<br>|   show    |   hide    |</p></li><li><p>应该避免名字中出现数字编号，如 Value1，Value2 等，除非逻辑上需要编号。</p></li></ul><h2 id="表达式和表达语句"><a href="#表达式和表达语句" class="headerlink" title="表达式和表达语句"></a>表达式和表达语句</h2><ul><li><p>复合表达式</p><p>如 ”<code>a = b = c = 0</code>“ 这样的表达式称为复合表达式，它书写简洁，可以提高编译效率，但要防止滥用复合表达式。</p><ul><li><p>不要编写太复杂的复合表达式，如：</p><p><code>i = a &gt;= b &amp;&amp; c&lt;d &amp;&amp; c + f &lt;= g + b;</code></p><p><code>* stat_poi ++ +=1;</code></p><p>应改为 <code>* stat_poi +=1; stat_poi++;</code></p></li><li><p>不要有多用途的复合表达式，如：</p><p><code>d = (a = b + c) + r;</code></p><p>该表达式既求 a 值又求 d 值，应该拆分为两个独立语句。</p></li><li><p>已删除的对象指针要赋予空指针值。</p></li></ul></li><li><p>if 语句</p><ul><li><p>不可将布尔变量直接与 TRUE、FALSE 或者 1、0 进行比较。</p><p>因为 TRUE 的值是什么并没有统一的标准。</p><p>flag 与零值比较的标准 if 语句如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag)   <span class="comment">//表示flag为真</span></span><br><span class="line"><span class="keyword">if</span>(!flag)  <span class="comment">//表示flag为假</span></span><br></pre></td></tr></table></figure></li><li><p>整型变量不可模仿布尔风格。</p><p>整型变量 value 与零值比较的标准 if 语句如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(value == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>不可将浮点变量用 “==” 或 “!=” 与任何数字比较。</p><p>因为 float 和 double 变量都有精度限制，应该设法转化成“&gt;=”或“&lt;=”形式。</p><p>例如浮点变量 x，E 是允许的误差（即精度）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x == <span class="number">0.0</span>)</span><br><span class="line"><span class="comment">//转化为</span></span><br><span class="line"><span class="keyword">if</span>((x&gt;=-E) &amp;&amp; (x&lt;=E))</span><br></pre></td></tr></table></figure></li><li><p>指针变量应该用“==”或“!=”与 NULL 比较。</p></li></ul></li><li><p>循环语句的效率</p><p>提高循环体效率的基本方法是降低循环体的复杂性。</p><ul><li><p>在多重循环中，应当将最长的循环放在最内层，将最短的循环放在最外层，以减少 CPU 跨切循环层的次数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//低效率</span></span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">0</span>;row &lt; <span class="number">100</span>;row++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (col = <span class="number">0</span>;col &lt; <span class="number">5</span>;col++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + a[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高效率</span></span><br><span class="line"><span class="keyword">for</span> (col = <span class="number">0</span>;col &lt; <span class="number">5</span>;col++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (raw = <span class="number">0</span>;raw &lt; <span class="number">100</span>;raw++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + a[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果循环体内存在逻辑判断，并且循环次数很大，宜将逻辑判断移到循环体外面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//效率低但程序简介</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition)</span><br><span class="line">        <span class="built_in">DoSomething</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">DoOtherthing</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//效率高但程序不简洁</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">        <span class="built_in">DoSomething</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">        <span class="built_in">DoOtherthing</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>C++ 类中的常量</p><p>const 修饰的数据成员只在某个对象生命周期内是常量，对于整个类而言却是可变的，因为类可以创建多个对象，不同对象的 const 成员的值可以不同。</p><p>若要建立在整个类中都恒定的常量，应该用枚举类型来实现，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">enum</span>&#123;</span>SIZE1 = <span class="number">100</span>,SIZE2 = <span class="number">200</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> array[SIZE1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>枚举常量不会占用对象的存储空间，它们在编译时被全部求值。缺点是它隐含的数据类型是整数，最大值有限且不能表示浮点数。</p></li></ul><h1 id="函数设计规则"><a href="#函数设计规则" class="headerlink" title="函数设计规则"></a>函数设计规则</h1><p>函数接口的两个要素是参数和返回值。在 C++ 中，函数参数和返回值的传递方式有 $3$ 种，即<strong>值传递、指针传递和引用传递</strong>。</p><h2 id="函数外部特性的注释规则"><a href="#函数外部特性的注释规则" class="headerlink" title="函数外部特性的注释规则"></a>函数外部特性的注释规则</h2><p>函数外部特性的注释必须在函数体上部采用中文说明，标准格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//输入参数：</span><br><span class="line">//参数1：（指出物理意义、量纲和取值范围）</span><br><span class="line">//...</span><br><span class="line">//参数N：</span><br><span class="line">//函数返回：（指出物理意义、量纲和取值范围）</span><br><span class="line">//功能描述：</span><br><span class="line">//注意事项：</span><br><span class="line">//...</span><br></pre></td></tr></table></figure><p>公用代码库中的函数必须说明对公用代码库的影响和要求，例如可重用性等。</p><p>使用的全局变量，特别是修改全局变量时，必须进行说明。</p><h2 id="参数规则"><a href="#参数规则" class="headerlink" title="参数规则"></a>参数规则</h2><ul><li><p>参数命名要恰当，顺序要遵循程序员的习惯，一般将目的参数放前面，源参数放后面。</p></li><li><p>如果参数是指针，且仅作输入用，应在类型前加 const，防止该指针在函数体内被修改。</p></li><li><p>对仅作输入的参数尽量使用 const 修饰符。</p><p>如果输入参数以值传递的方式传递对象，宜改用 ”const &amp;“ 方式来传递，这样可以省去临时对象的构造和析构过程。</p></li><li><p>参数默认值只能出现在函数声明中，不能出现在定义体内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>,<span class="keyword">int</span> y = <span class="number">0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>,<span class="keyword">int</span> y = <span class="number">0</span>)</span>  <span class="comment">//错误</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个参数，参数只能从后往前依次默认。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y = <span class="number">0</span>，<span class="keyword">int</span> z = <span class="number">0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>,<span class="keyword">int</span> y,<span class="keyword">int</span> z = <span class="number">0</span>)</span></span>;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li><li><p>避免函数有太多参数，尽量控制在 $5$ 个以内。</p></li><li><p>尽量不使用类型和数目不确定的参数，否则在编译时会丧失严格的类型安全检查。</p></li><li><p>非调度函数应减少控制参数，尽量使用数据参数，降低代码的控制耦合。</p></li></ul><h2 id="函数内部的实现规则"><a href="#函数内部的实现规则" class="headerlink" title="函数内部的实现规则"></a>函数内部的实现规则</h2><p>函数体内的局部变量的声明与应用应遵循标准 C 的语法，即需要用到的所有局部变量在函数定义的开始部分统一声明，而不能在首次引用的代码行同时进行声明和定义。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,i;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;代码风格&quot;&gt;&lt;a href=&quot;#代码风格&quot; class=&quot;headerlink&quot; title=&quot;代码风格&quot;&gt;&lt;/a&gt;代码风格&lt;/h1&gt;&lt;h2 id=&quot;程序的书写格式&quot;&gt;&lt;a href=&quot;#程序的书写格式&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>白盒测试</title>
    <link href="http://10185102110.github.io/2021/09/21/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2021/09/21/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-21T12:06:36.000Z</published>
    <updated>2021-09-21T12:08:22.041Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>白盒测试法，又称为<strong>结构测试或逻辑驱动测试</strong>，前提是测试者完全知道程序的结构和处理算法，这种方法按照程序内部的逻辑测试程序，检测程序中的主要执行通路是否都能按照预定要求工作。</p><p>主要对程序模块进行以下检查：</p><ul><li>对程序模块的所有独立的执行路径至少测试一次；</li><li>对所有逻辑判定取“真”与取“假”的两种情况都至少测试一次；</li><li>在循环的边界和运行界限内执行循环体；</li><li>测试内部数据结构的有效性。</li></ul><p>白盒测试的特点是依据软件设计说明书进行测试、对程序内部细节的严密检验、针对特定条件设计测试用例，对软件的逻辑路径进行覆盖测试。</p><p>白盒测试法可以分为静态方法和动态方法：</p><ul><li><p>静态分析是一种不通过执行程序而进行测试的技术。关键功能是检查软件的表示和描述是否一致、没有冲突或歧义，是任何进一步测试执行的前提。</p><p>静态方法可以借助辅助工具自动执行，比如数据流分析器、语法分析器。</p><p>软件检视是静态方法的重要手工技术。</p></li><li><p>动态分析主要特点是当软件系统在模拟的或真实的环境中执行之前、之中、之后对软件系统行为的分析。</p><p>最重要的技术是路径测试和分支测试。</p></li></ul><h1 id="控制流测试"><a href="#控制流测试" class="headerlink" title="控制流测试"></a>控制流测试</h1><p>程序的结构主要有 3 种，即顺序结构、分支结构和循环结构。</p><p>其中，顺序结构的测试比较简单，只需构造合适的测试用例使得程序的每条语句都执行一遍即可。</p><p>分支结构和循环结构由于路径和循环次数比较多，测试较复杂。</p><p>逻辑驱动覆盖包括分支结构的测试和循环结构的测试，分支测试又包括语句覆盖、分支覆盖、条件覆盖、分支—条件覆盖、条件组合覆盖及路径覆盖。</p><blockquote><p>【例题】</p><p>以 C++ 语言程序为例，算法流程如下图。</p></blockquote><p><img src="0.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a,b,x;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;x;</span><br><span class="line">    <span class="comment">// S</span></span><br><span class="line">    <span class="keyword">if</span>((a&gt;<span class="number">1</span>)&amp;&amp;(b==<span class="number">0</span>))  <span class="comment">// A</span></span><br><span class="line">        x=x/a;  <span class="comment">// B</span></span><br><span class="line">    <span class="keyword">if</span>((a==<span class="number">2</span>)||(x&gt;<span class="number">1</span>))  <span class="comment">// C</span></span><br><span class="line">        x=x+<span class="number">1</span>;  <span class="comment">// D</span></span><br><span class="line">    cout&lt;&lt;x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// E</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h2><p>语句覆盖是在测试时首先设计若干个测试用例，然后运行被测程序，使程序中的每个可执行语句至少执行一次。</p><p>对于上面的程序片段：</p><p>CASE1：(A=2,B=0,X=2) 可以做到语句覆盖；</p><p>CASE2：(A=2,B=1,X=3) 显然没有达到语句覆盖。</p><p>语句覆盖可以保证程序中的每个语句都得到执行，但发现不了判定中逻辑运算的错误，可以说是最弱的逻辑覆盖准则。</p><h2 id="判定-分支-覆盖"><a href="#判定-分支-覆盖" class="headerlink" title="判定(分支)覆盖"></a>判定(分支)覆盖</h2><p>按判定覆盖准则进行测试指设计若干测试用例，运行被测程序，使得程序中每个判断的取真分支和取假分支至少执行一次。</p><p>以上述程序片段为例，可以选用两组测试用例：</p><p>CASE3：(A=2,B=0,X=3) </p><p>CASE4：(A=1,B=0,X=1) </p><p>但是如果将 X&gt;1 错写成 X&lt;1，CASE2 却不影响结果，说明判定覆盖无法确定判断条件的错误。</p><h2 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h2><p>条件覆盖指设计测试用例，执行被测程序后，要使每个判断中每个条件的可能取值至少满足一次。</p><p>在上述程序段中，第一个判断应考虑 $4$ 种情况：</p><div class="table-container"><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">表达式的值</th><th style="text-align:center">类别</th></tr></thead><tbody><tr><td style="text-align:center">a&gt;1</td><td style="text-align:center">取真值</td><td style="text-align:center">记为 A</td></tr><tr><td style="text-align:center">a&gt;1</td><td style="text-align:center">取假值</td><td style="text-align:center">记为 a</td></tr><tr><td style="text-align:center">b=0</td><td style="text-align:center">取真值</td><td style="text-align:center">记为 B</td></tr><tr><td style="text-align:center">b=0</td><td style="text-align:center">取假值</td><td style="text-align:center">记为 b</td></tr></tbody></table></div><p>第二个判断应考虑 $4$ 种情况：</p><div class="table-container"><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">表达式的值</th><th style="text-align:center">类别</th></tr></thead><tbody><tr><td style="text-align:center">a=2</td><td style="text-align:center">取真值</td><td style="text-align:center">记为 C</td></tr><tr><td style="text-align:center">a=2</td><td style="text-align:center">取假值</td><td style="text-align:center">记为 c</td></tr><tr><td style="text-align:center">x&gt;1</td><td style="text-align:center">取真值</td><td style="text-align:center">记为 D</td></tr><tr><td style="text-align:center">x&gt;1</td><td style="text-align:center">取假值</td><td style="text-align:center">记为 d</td></tr></tbody></table></div><p>条件覆盖是否能做到判定覆盖呢？</p><div class="table-container"><table><thead><tr><th style="text-align:center">测试用例</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">x</th><th style="text-align:center">路径</th><th style="text-align:center">覆盖条件</th></tr></thead><tbody><tr><td style="text-align:center">CASE5</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">SACDE</td><td style="text-align:center">AbCd</td></tr><tr><td style="text-align:center">CASE6</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">SACDE</td><td style="text-align:center">aBcD</td></tr></tbody></table></div><p>上述条件覆盖测试用例并没有覆盖全部 $4$ 个分支，只覆盖了 $2$ 个分支。为解决该问题，需要对条件和分支兼顾，增加测试用例：</p><div class="table-container"><table><thead><tr><th style="text-align:center">测试用例</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">x</th><th style="text-align:center">路径</th><th style="text-align:center">覆盖条件</th></tr></thead><tbody><tr><td style="text-align:center">CASE5</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">SACDE</td><td style="text-align:center">AbCd</td></tr><tr><td style="text-align:center">CASE6</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">SACDE</td><td style="text-align:center">aBcD</td></tr><tr><td style="text-align:center">CASE7</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">SABCDE</td><td style="text-align:center">ABCD</td></tr></tbody></table></div><p>条件覆盖只能保证每个条件至少有一次为真，而不考虑所有的判定分支。</p><h2 id="判定-条件覆盖"><a href="#判定-条件覆盖" class="headerlink" title="判定-条件覆盖"></a>判定-条件覆盖</h2><p>判定-条件覆盖要求设计足够的测试用例，使得判断中每个条件的所有可能至少出现一次，并且每个判断本身的判定结果也至少出现一次。</p><p>优点是满足判定覆盖准则和和条件覆盖准则，缺点是未考虑条件的组合情况。</p><h2 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h2><p>按路径覆盖要求进行测试指设计足够多的测试用例要求覆盖程序中所有可能的路径。</p><p>优点是覆盖率高，缺点是有些路径不可能执行到。</p><h2 id="循环测试"><a href="#循环测试" class="headerlink" title="循环测试"></a>循环测试</h2><p>循环分为 $4$ 种类型，即简单循环、嵌套循环、连锁循环和非结构循环。</p><p>对于简单循环，测试应包括以下几种，其中 $n$ 表示循环允许的最大次数。</p><ul><li>零次循环：从循环入口直接跳到循环出口；</li><li>一次循环：查找循环初始值方面的错误；</li><li>二次循环：检查在多次循环时才暴露的错误；</li><li>$m$ 次循环：此时的 $m&lt;n$，同上。</li></ul><p>对于嵌套循环，不能将简单循环的测试方法简单地扩大到嵌套循环，因为可能的测试次数将随嵌套层次的增加呈几何级增长。</p><h1 id="基本路径测试"><a href="#基本路径测试" class="headerlink" title="基本路径测试"></a>基本路径测试</h1><p>基本路径测试法是在程序控制流图的基础上通过分析控制构造的环路复杂性导出基本可执行路径集合，从而设计测试用例的方法，保证程序的每个可执行语句至少执行一次。</p><h2 id="程序的控制流图"><a href="#程序的控制流图" class="headerlink" title="程序的控制流图"></a>程序的控制流图</h2><p>控制流图是程序流程图的简化，在控制流图中只有两种图形符号：</p><ul><li>结点：以标有编号的圆圈表示。一个结点包含一个或多个连续的无分支语句，结点不允许含有复合结点。</li><li>控制流线：以箭头表示。表示程序执行的顺序。</li></ul><p>在将程序流程图简化成控制流图时应注意以下几点：</p><ul><li>在多分支结构中，分支汇聚处应有一个汇聚结点；</li><li>边和结点圈定的范围叫区域，当对区域计数时，图形外的区域也应记为一个区域；</li><li>如果判断中的条件表达式是由多个逻辑运算符连接的复合表达式，则需要改为一系列只有单条件的嵌套判断。</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>程序流程图如下：</p><p><img src="1.png" alt=""></p><p><strong>第一步：画出控制流图</strong></p><p>上图中存在复合表达式，需要分解为简单条件，对应的程序控制流程图如下所示：</p><p><img src="2.png" alt=""></p><p><strong>第二步：计算环路复杂度</strong></p><p>环路复杂度用于计算程序的基本的独立路径数目，为确保所有语句至少执行一次的测试数量的上界。</p><p>环路复杂度的计算：</p><p>（1）给定流图 G 的环路复杂度 V(G)，定义为 $V(G)=E-N+2$，E 是流图中边的数量，N 是流图中结点的数量；</p><p>（2）给定流图 G 的环路复杂度 V(G)，定义为 $V(G)=P+1$，P 是流图 G 中判定结点的数量。</p><p>上图的环路复杂度 $V(G)=10-7+2=5$，对应流图中有 $5$ 个区域。</p><p><strong>第三步：确定独立路径集合</strong></p><p>独立路径是指和其他的独立路径相比至少引入一个新处理语句或一个新判断的程序通路。</p><p>V(G) 值正好等于该程序的独立路径数。</p><ul><li>路径1：1-2-4-7</li><li>路径2：1-2-3-4-7</li><li>路径3：1-3-4-7</li><li>路径4：1-2-4-5-7</li><li>路径5：1-2-4-5-6-7</li></ul><p>注意，独立路径集合不是唯一的。</p><p><strong>第四步：准备测试用例</strong></p><h1 id="程序插装"><a href="#程序插装" class="headerlink" title="程序插装"></a>程序插装</h1><p>一种基本的测试手段。在测试程序中经常采用在程序中设置断点或打印输出语句，在执行过程中了解程序的一些动态特性的方式。如果想要了解程序在某次运行中所有可执行语句被覆盖的情况或者每个语句实际的执行次数，可以在程序的特定部位插入记录动态特性的语句，把运行中的一些重要事件记录下来。</p><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;白盒测试法，又称为&lt;strong&gt;结构测试或逻辑驱动测试&lt;/strong&gt;，前提是测试者完全知道程序的结构和处理算</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>黑盒测试</title>
    <link href="http://10185102110.github.io/2021/09/20/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2021/09/20/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-20T08:30:36.000Z</published>
    <updated>2021-09-21T12:08:06.446Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>黑盒测试法把程序看作一个黑盒子，完全不考虑程序的内部结构和处理过程。</p><p>测试方法主要有等价类划分法、边界值分析法、因果图法和功能图法。</p><h1 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>等价类划分法不考虑程序的内部结构，把所有可能的输入数据划分成若干个子集，然后从每一个子集中选取少数具有代表性的数据作为测试用例。</p><p>等价类：某个输入域的子集合。</p><p>有效等价类：指对于程序的规格说明书来说合理的、有意义的输入数据构成的集合，可检验程序是否实现了规格说明书中所规定的功能和性能。</p><p>无效等价类：与有效等价类相反，即不符合需求规格说明书。</p><h2 id="确定等价类的原则"><a href="#确定等价类的原则" class="headerlink" title="确定等价类的原则"></a>确定等价类的原则</h2><ul><li>在输入条件规定了取值范围或值的个数的情况下可以确定一个有效等价类和两个无效等价类；</li><li>在输入条件规定了输入值的集合或规定了”必须如何“的情况下可以确定一个有效等价类和一个无效等价类；</li><li>在输入条件是一个布尔量的情况下可以确定一个有效等价类和一个无效等价类；</li><li>在规定了输入数据的一组值（n 个）并且程序要对每个输入值分别处理的情况下可以确定 n 个有效等价类和一个无效等价类；</li><li>在规定了输入数据必须遵守的规则的情况下可以确定一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）；</li><li>在确知已划分的等价类中各元素在程序处理中的方式不同的情况下应将该等价类进一步划分。</li></ul><p>确立了等价类之后建立等价类表，如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">输入条件</th><th style="text-align:center">有效等价类</th><th style="text-align:center">无效等价类</th><th style="text-align:center">输入条件</th><th style="text-align:center">有效等价类</th><th style="text-align:center">无效等价类</th></tr></thead><tbody><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table></div><h2 id="设计测试用例"><a href="#设计测试用例" class="headerlink" title="设计测试用例"></a>设计测试用例</h2><p>从划分的等价类中按以下 $3$ 个原则设计测试用例：</p><ul><li>每一个等价类规定一个唯一的编号；</li><li>设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，然后重复该步骤，直到所有的有效等价类都被覆盖；</li><li>设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复该步骤直到所有无效等价类被覆盖。</li></ul><blockquote><p>【例题】</p><p>根据下面给出的规格说明，利用等价类划分的方法给出足够的测试用例。</p><p>”一个程序读入 3 个数，把这 3 个数值看作一个三角形的 3 条边的长度值。这个程序要打印出信息，说明这个程序是不等边的、是等腰的还是等边的。“</p></blockquote><p>设三角形的 $3$ 条边分别为 $A,B,C$。</p><p>如果它们能构成三角形的 $3$ 条边，必须满足 $A&gt;0,B&gt;0,C&gt;0,$且 $A+B&gt;C,B+C&gt;A,A+C&gt;B$。</p><p>如果是等腰的，还要判断 $A=B$ 或 $B=C$ 或 $A=C$。</p><p>如果是等边的，则需判断 $A=B$ 且 $B=C$ 且 $A=C$。</p><p>列出等价类表，如下：</p><p><img src="3.png" alt=""></p><p>设计测试用例，输入顺序是【A,B,C】，如下表：</p><div class="table-container"><table><thead><tr><th>用例编号</th><th>【A,B,C】</th><th>覆盖等价类</th><th>输出</th></tr></thead><tbody><tr><td>1</td><td>【3，4，5】</td><td>1，2，3，4，5，6</td><td>一般三角形</td></tr><tr><td>2</td><td>【0，1，2】</td><td>7</td><td>不构成三角形</td></tr><tr><td>3</td><td>【1，0，2】</td><td>8</td><td>不构成三角形</td></tr><tr><td>4</td><td>【1，2，0】</td><td>9</td><td>不构成三角形</td></tr><tr><td>5</td><td>【1，2，3】</td><td>10</td><td>不构成三角形</td></tr><tr><td>6</td><td>【1，3，2】</td><td>11</td><td>不构成三角形</td></tr><tr><td>7</td><td>【3，1，2】</td><td>12</td><td>不构成三角形</td></tr><tr><td>8</td><td>【3，3，4】</td><td>1，2，3，4，5，6，13</td><td>等腰三角形</td></tr><tr><td>9</td><td>【3，4，4】</td><td>1，2，3，4，5，6，14</td><td>等腰三角形</td></tr><tr><td>10</td><td>【3，4，3】</td><td>1，2，3，4，5，6，15</td><td>等腰三角形</td></tr><tr><td>11</td><td>【3，4，5】</td><td>1，2，3，4，5，6，16</td><td>非等腰三角形</td></tr><tr><td>12</td><td>【3，3，3】</td><td>1，2，3，4，5，6，17</td><td>等边三角形</td></tr><tr><td>13</td><td>【3，4，4】</td><td>1，2，3，4，5，6，14，18</td><td>非等边三角形</td></tr><tr><td>14</td><td>【3，4，3】</td><td>1，2，3，4，5，6，15，19</td><td>非等边三角形</td></tr><tr><td>15</td><td>【3，3，4】</td><td>1，2，3，4，5，6，13，20</td><td>非等边三角形</td></tr></tbody></table></div><h1 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>边界值分析法是对等价类划分法的补充。</p><p>大量的测试实践经验表明，边界值是最容易出现问题的地方，也是测试的重点。</p><h2 id="边界条件"><a href="#边界条件" class="headerlink" title="边界条件"></a>边界条件</h2><p>普通边界条件在产品说明书中有定义，或者在使用软件的过程中确定。</p><h2 id="次边界条件"><a href="#次边界条件" class="headerlink" title="次边界条件"></a>次边界条件</h2><p>有些边界条件在软件内部，最终用户几乎看不到，但是软件测试仍有必要检查，这样的边界条件称为次边界条件或者内部边界条件。</p><p>常见的次边界条件是 ASCII 字符表，如果测试进行文本输入或文本转换的软件，在定义数据区间包含哪些值时可以参考以下，具体见附录。</p><p>另一种明显的软件缺陷是当软件要求输入时，用户不是没有输入正确信息，而是根本没有输入任何内容，只按了 Enter 键。这种情况需要特殊处理，不能将它们与合法情况和非法情况混合在一起。</p><h2 id="边界值的选择"><a href="#边界值的选择" class="headerlink" title="边界值的选择"></a>边界值的选择</h2><p>对边界值设计测试用例应遵循的原则：</p><ul><li>如果输入条件规定了值的范围，则应取到刚达到这个范围的边界的值，以及刚刚超过范围边界的值作为测试输入数据；</li><li>如果输入条件规定了值的个数，则用最大个数、最小个数、比最小个数少 1，比最大个数多 1 的数作为测试数据；</li><li>根据规格说明的每个输出条件使用前面的原则；</li><li>如果程序的规格说明给出的输入域或输出域是有序集合，则应选取集合的第一个元素和最后一个元素作为测试用例；</li><li>如果程序中使用了一个内部数据结构，则应当选择这个内部数据结构边界上的值作为测试用例；</li><li>分析规格说明，找出其他可能的边界条件。</li></ul><h1 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>因果图（Cause-effect diagram）（又名鱼骨图）法是从用自然语言书写的程序规格说明的描述中找出输入条件与输出或程序状态的改变，通过因果图转换成判定表。</p><p>前面的等价类划分法和边界值分析法都是着重考虑输入条件，并没有考虑到输入情况的各种组合，而因果图法考虑描述多种条件的组合相应地产生多个动作的形式来设计测试用例。</p><h2 id="设计方法"><a href="#设计方法" class="headerlink" title="设计方法"></a>设计方法</h2><p>利用因果图导出测试用例的步骤：</p><p>（1）分析程序规格说明的描述中哪些是原因，哪些是结果。原因常常是输入条件或输入条件的等价类，而结果是输出条件；</p><p>（2）分析程序规格说明的描述中语义的内容，并将其表示成连接各个原因与各个结果的”因果图“；</p><p>（3）标明约束条件；</p><p>（4）为判定表中每一列表示的情况设计测试用例。</p><p>通常，在因果图中用 $C_i$ 表示原因、用 $E_i$ 表示结果，其基本符号如下图所示：</p><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221210001415417.jpg" alt="img"></p><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221210556253202.jpg" alt="img"></p><p>约束符号如下：</p><ul><li>$E$（互斥）</li></ul><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221213458284298.jpg" alt="img"></p><ul><li>$I$（包含）</li></ul><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221214109843117.jpg" alt="img"></p><ul><li>$O$（唯一）</li></ul><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221214596567753.jpg" alt="img"></p><ul><li>$R$（要求）</li></ul><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221214351258993.jpg" alt="img"></p><ul><li>$M$（屏蔽）</li></ul><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221216586562242.jpg" alt="img"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>【例题】</p><p>有一个处理单价为 1 元 5 角钱的盒装饮料的自动售货机软件。若投入 1 元 5 角硬币，按下”可乐“”雪碧“或”红茶“按钮，相应的饮料就送出来。若投入的是 2 元硬币，在送出饮料的同时退还 5 角硬币。</p></blockquote><p>列出原因和结果：</p><p><img src="http://images.cnitblog.com/blog2015/731411/201503/221229012977380.jpg" alt="img"></p><p>确定原因与结果的逻辑关系，需要中间状态：</p><p>$C_{m1}$：已投币</p><p>$C_{m2}$：已按钮</p><p>设计因果图：</p><p><img src="0.png" alt=""></p><p>转换为决策表，每一列可作为确定测试用例的依据。</p><p><img src="1.png" alt=""></p><p>设计乘法器测试用例（等价类划分）：</p><p><img src="2.png" alt=""></p><h1 id="功能图法"><a href="#功能图法" class="headerlink" title="功能图法"></a>功能图法</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>程序的功能说明通常由动态说明和静态说明组成.动态说明描述了输入数据的次序或转移的次序，静态说明描述了输入条件与输出条件之间的对应关系。</p><p>功能图方法是用功能图形象地表示程序的功能说明，并机械地生成功能图的测试用例。</p><p>功能图模型由状态迁移图和逻辑功能模型构成。</p><ul><li>状态迁移图：由输入数据和当前状态，决定输出数据和后续状态。</li><li>逻辑功能模型：表示在状态中输入条件和输出条件之间的对应关系。逻辑功能模型只适合描述静态说明，输出数据仅由输入数据决定。</li></ul><h2 id="设计方法-1"><a href="#设计方法-1" class="headerlink" title="设计方法"></a>设计方法</h2><p>功能图实际上是一种黑盒、白盒混合用例的设计方法。</p><p>逻辑覆盖和路径测试属于白盒测试的内容。</p><p>逻辑覆盖是以程序内部的逻辑结构为基础的测试用例设计方法，由于覆盖测试的目标不同，逻辑覆盖可分为语句覆盖、判定覆盖、判定—条件覆盖、条件组合覆盖、路径覆盖。</p><p><strong>状态迁移图导出测试用例的步骤：</strong></p><p>（1）明确状态节点：分析被测对象的特性及需求规格说明书，明确被测对象的状态节点数量及相互迁移关系；</p><p>（2）绘制状态迁移图：圆圈表示状态节点，有向箭头表示状态间的迁移关系，根据需要在箭头旁标识迁移条件；</p><p>（3）绘制状态迁移树：根据状态迁移图，按照广度优先和深度优先搜索绘制状态迁移树。首先确定起始节点和终止节点，在绘制时，当路径上遇到终止节点时，不再扩展，遇到已经出现的节点也停止扩展；</p><p>（4）抽取测试路径设计用例：根据绘制好的状态迁移树，提取测试路径，从左到右，横向抽取，每条路径构成一条测试规则，然后再利用等价类和边界值等测试用例设计方法设计具体的测试用例。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>一个编辑文本的软件中有可以改变字体颜色的功能，其中可选的颜色共有黑、红、蓝三种颜色。<br>想要测试这个功能，首先，分析上述需求可以得出，该功能共有三种状态，假设红色为起始状态，那么可以得到如下的状态迁移图：</p><p><img src="4.png" alt=""></p><p>根据上述的状态迁移图，绘制出如下的状态迁移树：</p><p><img src="5.png" alt=""></p><p>从状态迁移树中，可以导出以下规则：</p><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">路径</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">红$\rightarrow$黑$\rightarrow$红</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">红$\rightarrow$黑$\rightarrow$蓝</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">红$\rightarrow$蓝$\rightarrow$红</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">红$\rightarrow$蓝$\rightarrow$黑</td></tr></tbody></table></div><p>最终，根据以上测试用例规则，可以导出如下测试用例：</p><div class="table-container"><table><thead><tr><th style="text-align:center">用例编号</th><th style="text-align:center">测试项目</th><th style="text-align:center">标题</th><th style="text-align:center">预期结果</th></tr></thead><tbody><tr><td style="text-align:center">Test-001</td><td style="text-align:center">改变字体颜色</td><td style="text-align:center">测试字体由红色变为黑色，再变为红色</td><td style="text-align:center">输入的内容由红色变为黑色，再变为红色</td></tr><tr><td style="text-align:center">Test-002</td><td style="text-align:center">改变字体颜色</td><td style="text-align:center">测试字体由红色变为黑色，再变为蓝色</td><td style="text-align:center">输入的内容由红色变为黑色，再变为红色</td></tr><tr><td style="text-align:center">Test-003</td><td style="text-align:center">改变字体颜色</td><td style="text-align:center">测试字体由红色变为蓝色，再变为红色</td><td style="text-align:center">输入的内容由红色变为黑色，再变为红色</td></tr><tr><td style="text-align:center">Test-004</td><td style="text-align:center">改变字体颜色</td><td style="text-align:center">测试字体由红色变为蓝色，再变为黑色</td><td style="text-align:center">输入的内容由红色变为黑色，再变为红色</td></tr></tbody></table></div><h1 id="比较与选择"><a href="#比较与选择" class="headerlink" title="比较与选择"></a>比较与选择</h1><p>以下是各种测试方法选择的综合策略：</p><ul><li>首先进行等价类划分，包括输入条件和输出条件的等价划分，将无限测试变成有限测试，这是减少工作量和提高效率最有效的方法；</li><li>在任何情况下都必须使用边界值分析法，经验表明，用这种方法设计出的测试用例发现程序错误的能力最强；</li><li>可以用错误推测法追加一些测试用例；</li><li>对照程序逻辑检查已设计出的测试用例的逻辑覆盖程度，如果没有达标，应当补充足够的测试用例；</li><li>如果程序的功能说明中含有输入条件的组合情况，则一开始就可以用因果图法和判定表驱动法；</li><li>对于参数配置类的软件要用正交试验法，选择较少的组合方式达到最佳效果；</li><li>对于业务流清晰的系统可以利用场景法贯穿整个测试案例过程。</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">ASCII 值 (10 进制)</th></tr></thead><tbody><tr><td style="text-align:center">Null</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">Space</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">33</td></tr><tr><td style="text-align:center">‘’</td><td style="text-align:center">34</td></tr><tr><td style="text-align:center">#</td><td style="text-align:center">35</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">36</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">37</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">38</td></tr><tr><td style="text-align:center">‘</td><td style="text-align:center">39</td></tr><tr><td style="text-align:center">(</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">)</td><td style="text-align:center">41</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">42</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">43</td></tr><tr><td style="text-align:center">,</td><td style="text-align:center">44</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">45</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">46</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">47</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">48</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">57</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">58</td></tr><tr><td style="text-align:center">;</td><td style="text-align:center">59</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">60</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">61</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">62</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">63</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">64</td></tr><tr><td style="text-align:center">A</td><td style="text-align:center">65</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">[</td><td style="text-align:center">91</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">]</td><td style="text-align:center">93</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">94</td></tr><tr><td style="text-align:center">_</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">`</td><td style="text-align:center">96</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">97</td></tr><tr><td style="text-align:center">z</td><td style="text-align:center">122</td></tr><tr><td style="text-align:center">{</td><td style="text-align:center">123</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td>124</td></tr><tr><td style="text-align:center">}</td><td style="text-align:center">125</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">126</td></tr></tbody></table></div><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;黑盒测试法把程序看作一个黑盒子，完全不考虑程序的内部结构和处理过程。&lt;/p&gt;
&lt;p&gt;测试方法主要有等价类划分法、边界值分析法、因果图法和功能图法。&lt;/p&gt;
&lt;h1 id=&quot;等价类划分法&quot;&gt;&lt;a href=&quot;#等价类划分法&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件测试基础</title>
    <link href="http://10185102110.github.io/2021/09/20/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://10185102110.github.io/2021/09/20/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-20T03:47:18.000Z</published>
    <updated>2021-09-27T12:05:36.338Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h2><p>根据 IEEE 的定义，软件由计算机程序、规程、文档和运行所需的数据组成，这些要素构成了软件工程过程中的各种配置。</p><h2 id="软件特征"><a href="#软件特征" class="headerlink" title="软件特征"></a>软件特征</h2><p>（1）软件是逻辑产品，不是物理产品，所以软件具有和硬件完全不同的特征。</p><ul><li>软件是由开发产生，不是用传统方法制造的；</li><li>软件不会像硬件那样有磨损；</li><li>软件不能通过已有构件组装，只能自己定义。</li></ul><p>（2）当前软件分为七大类：</p><ol><li>系统软件</li><li>应用软件</li><li>Web 应用软件</li><li>工程和科学软件</li><li>嵌入式软件</li><li>产品线软件</li><li>人工智能软件</li></ol><p>（3）软件工程是一种层次化技术。</p><ol><li>软件工程的根基在于对质量的关注。</li><li>软件工程的过程层是基础。过程层定义了关键过程区域的框架，确立上下各区域的关系，并规定了采用的技术方法，产生的工程产品，建立里程碑，质量保证以及管理变化。</li><li>软件工程的方法层涵盖一系列任务，如需求分析、设计、编程、测试、维护。</li><li>软件工程的工具层对过程层和方法层提供自动、半自动的支持。</li></ol><p>（4）<strong>软件质量</strong></p><p>生产高质量的软件是我们的首要目标。</p><p>IEEE 关于软件质量的定义：</p><ul><li>系统、部件或者过程满足规定需求的程度。</li><li>系统、部件或者过程满足顾客或者用户需要或期望的程度。</li></ul><p>各类软件综合起来可以看到 $6$ 个主要特征：</p><ol><li>功能性：软件实现的功能达到要求的和隐含的用户需求以及设计规范的程度。</li><li>可靠性：软件在指定条件和特定时间段内维持性能的能力程度。</li><li>易使用性：用户使用该软件所付出的学习精力。</li><li>效率：在指定条件下软件功能与所占资源之间的比值。</li><li>可维护性：当发现错误、运行环境改变或客户需求改变时程序能修改的容易程度。</li><li>可移植性：将软件从一种环境移入另一种环境的容易程度。</li></ol><h2 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h2><p>（1）软件测试是保证软件质量的关键步骤，是对软件规格说明、设计和编码的最后复审。</p><p>（2）软件测试工作可以这样概括：</p><ul><li>测试执行、模拟一个系统或者程序的操作；</li><li>测试在于带着发现问题和错误的意图来分析程序；</li><li>测试能够度量程序的功能和质量；</li><li>测试在于评价程序和项目工作产品的属性、能力，并且评估是否获得了期望。</li></ul><p>（3）<strong>软件测试的方法</strong></p><p>软件测试技术可以从不同角度加以分类。</p><p>从是否需要执行被测软件的角度分为静态测试和动态测试；</p><p>从是否针对系统的内部结构和具体实现算法的角度分为白盒测试和黑盒测试。</p><p>1.<strong>静态测试</strong></p><p>静态测试无需执行被测代码，而是借助专用的软件测试工具评审软件文档或程序，度量程序静态复杂度，通过分析或检查源程序的文法、结构、过程、接口等来检查程序的正确性，借以发现程序的不足之处来减少错误概率。</p><p>静态测试包含的内容如下：</p><ul><li>代码检查</li><li>静态结构分析：主要以图形的方式表现程序的内部结构，例如函数调用关系图、函数内部控制流图。</li><li>代码质量度量</li></ul><ol><li><strong>动态测试</strong></li></ol><p>动态测试通过人工或使用工具运行程序，使被测代码在相对真实的环境下运行，从多角度观察程序运行时能体现的功能、逻辑、行为、结构等行为，并通过检查、分析程序的执行状态、程序的外部表现来定位程序的错误。</p><p>动态测试由三部分组成：</p><ul><li>功能确认和接口测试</li><li>覆盖率分析</li><li>性能分析</li></ul><ol><li><strong>黑盒测试</strong></li></ol><p>也称为功能测试，是已知软件所需功能，通过测试来检测每个功能是否都能正常使用。</p><p>黑盒测试方法主要有等价类划分、边值分析、因果图、错误推测等。</p><p>该方法着眼于程序外部结构，不考虑内部逻辑结构，针对软件界面和软件功能进行测试。黑盒测试方法是穷举输入测试，只有把所有可能的输入都作为测试情况使用，才能查出程序中所有的错误。</p><ol><li><strong>白盒测试</strong></li></ol><p>也称结构测试或逻辑驱动测试，知道软件内部的工作过程，可通过测试来检测软件产品内部的动作是否按照规格说明书的规定正常进行，并且按照程序内部的结构测试程序来检验程序中的每条通路是否都能按照预定要求正确工作，而不考虑功能是否正确。</p><p>白盒测试方法主要有逻辑覆盖、域测试、路径测试、程序插桩、程序变异等。</p><ol><li><strong>灰盒测试</strong></li></ol><p>介于白盒与黑盒之间，关注输出对于输入的正确性，同时也关注内部表现。但这种关注不像白盒那样详细完整，只是通过一些表征性的现象、标志来判断内部的运行状态。</p><p>如果每次都通过白盒测试来操作，效率会很低，所以需要灰盒测试。</p><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li>HLD（High level Document）：概要设计说明书。</li><li>LLD（Low level Document）：详细设计说明书。</li><li>SRS（Software Requirements Specification）：需求规格说明书。</li></ul><h1 id="软件测试-1"><a href="#软件测试-1" class="headerlink" title="软件测试"></a>软件测试</h1><p>软件测试的核心是测试数据生成。</p><p>软件测试的实质是根据软件开发各阶段的规格说明和程序的内部结构精心选取一批测试数据，形成测试用例，并用这些测试用例去驱动被测程序，验证所得结果与预期结果是否一致。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>测试是程序的执行过程，目的在于发现错误；</li><li>一个好的测试用例在于能发现至今未发现的错误；</li><li>一个成功的测试用例是发现了至今未发现的错误的测试。</li></ul><p>测试一般不可能发现程序中的所有错误，测试只能证明程序中存在错误，但不能证明程序中不存在错误。</p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li><p>在整个开发过程中要尽早地和不断地进行软件测试。</p><p>不应把软件测试仅仅看作是软件开发的一个独立阶段，而应当贯穿到软件开发的各个阶段中。</p></li><li><p>在开始测试时不应默认程序中不存在错误。</p></li><li><p>在设计测试用例时要给出测试的预期结果。</p><p>一个测试用例必须包括两部分：对程序输入数据的描述和由这些输入数据应产生的输出结果的精确描述。</p></li><li><p>测试工作应避免由开发人员来承担。</p><p>从心理学上讲，让一个人否定自己所做的工作是一件沮丧的事情。另外，如果程序中包含了由于程序员对程序功能的误解而产生的错误，当程序员测试自己的程序时，往往还会带着同样的误解而使错误难以发现。</p></li><li><p>对合理的和不合理的输入数据都要进行测试。</p><p>为了提高程序的可靠性。合理的输入数据可以验证程序的正确性，而不合理的输入数据是指异常的、临界的、可能引起问题异变的输入数据。事实上，用户往往会不遵循合理的输入要求而进行一些非法的输入，如果系统不能对此做出正确反应，系统将很容易产生故障，甚至造成系统瘫痪。</p></li><li><p>重点测试错误群集的程序区段。</p></li><li><p>除检查程序功能是否完备外还要检查程序功能是否有多余。</p></li><li><p>用穷举测试是不可能的。</p></li><li><p>长期完整地保留所有的测试用例和测试文件，直到该软件产品被废弃为止。</p><p>因为测试不是一次完成的，在测试出错误并修改后需要继续测试。另外，以后进行维护时也需要这些测试文件进行后续测试。测试文件包括测试数据集、预期的结果、程序执行的记录等。</p></li></ul><h2 id="软件测试的种类"><a href="#软件测试的种类" class="headerlink" title="软件测试的种类"></a>软件测试的种类</h2><p>在进行软件测试时需要以下 3 类信息：</p><ul><li>软件配置：指需求说明书、设计说明书和源程序等。</li><li>测试配置：指测试方案、测试用例和测试驱动程序等。</li><li>测试工具：指计算机辅助测试的有关工具。</li></ul><p>通常综合测试分为 4 个步骤：</p><ol><li>单元测试（Unit Testing）</li><li>集成测试（Integrated Testing）</li><li>系统测试（System Testing）</li><li>验收测试（Acceptance Testing）</li></ol><p>另外，在所有测试过程中始终贯穿着回归测试（Regression Testing）。</p><p><img src="1.png" alt=""></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>单元测试指对软件中的最小可测试单元或基本组成单元进行检查和验证。</p><p>单元测试中选取的单元应可以清晰地与其他单元区分开，在某种意义上，单元的概念已经扩展为组件(Component)。</p><p>一般遵循以下<strong>单元选取原则</strong>：</p><ul><li>对于 C 语言这类面向过程的开发语言来说，单元常指一个函数或子过程。在特殊情况下，如果几个函数具有强耦合性，导致函数关系非常密切，应将这几个函数共同作为一个单元来测试。</li><li>对于 C++、Java 语言或 C# 等面向对象的开发语言来说，单元一般指一个类。然而某些基础类可能非常庞大，涉及大量属性和方法，甚至需要几个开发人员来编码完成，此时的测试应上升到集成测试的层面。</li><li>在图形化软件中，单元常指一个窗体或一个菜单。</li></ul><p>总之，单元是人为规定的最小的被测功能模块。而单元测试则是一小段代码，用于检测被测代码的一个很小的、很明确的功能是否正确。</p><h3 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h3><ul><li><p>接口测试</p><p>接口测试指对通过被测模块的数据流进行测试检查数据能否正确地输入和输出，主要对模块接口的以下方面进行测试：</p><ul><li>输入的实参与形参在个数、属性、量纲和顺序上是否匹配；</li><li>被测模块调用其他模块时传递的实参与被调用模块的形参是否匹配；</li><li>调用标准函数时传递的实参在个数、属性、量纲和顺序上是否正确；</li><li>是否存在与当前入口点无关的参数引用；</li><li>是否修改了只做输入用的只读形参；</li><li>全局变量在每个模块中的定义是否一致；</li><li>是否将某些约束条件作为形参来传递。</li></ul></li><li><p>局部数据结构测试</p><p>局部数据结构是最常见的缺陷来源，检查局部数据结构可以保证临时存储在模块内的数据在代码执行过程中是正确的和完整的。应考虑以下方面：</p><ul><li>是否存在不正确、不一致的数据类型说明；</li><li>是否存在未初始化或未赋值的错误；</li><li>变量是否存在初始化或默认值错误；</li><li>是否存在变量名拼写或书写错误；</li><li>是否存在不一致的数据类型；</li><li>是否出现上溢、下溢或地址异常。</li></ul></li><li><p>重要执行路径测试</p><p>对重要执行路径和循环的测试是最常用、最有效的测试技术，以发现因错误的计算、错误的比较和不适当的控制流而导致的缺陷。</p><p>常见的错误计算如下：</p><ul><li>操作符优先次序是否被正确理解；</li><li>是否存在混合模式的计算；</li><li>是否存在被零除的风险；</li><li>运算精度不够；</li><li>变量的初值是否正确；</li><li>表达式的符号是否正确。</li></ul><p>常见的比较和控制错误如下：</p><ul><li>是否存在不同数据类型变量之间的比较；</li><li>是否存在错误的逻辑运算符或优先次序；</li><li>是否存在因计算机表示的局限性导致浮点运算精度不够，致使期望值与实际值不相等的两值比较；</li><li>在关系表达式中是否存在错误的变量和比较符；</li><li>是否存在不可能的循环终止条件导致死循环；</li><li>是否存在迭代发散导致不能退出；</li><li>是否错误地修改了循环变量，导致循环次数多一次或少一次。</li></ul></li><li><p>错误处理测试</p><p>完善的设计应能预见各种出错条件，并设置适当的出错处理，以提高系统的容错能力，保证逻辑的正确性。</p><p>应考虑以下方面：</p><ul><li>输出的出错信息是否难以理解；</li><li>出错描述提供的信息是否不足，导致无法对错误进行定位；</li><li>显示的错误是否与实际遇到的缺陷不符合；</li><li>对错误条件的处理是否正确；</li><li>在程序自定义的出错处理运行之前缺陷条件是否已经引起系统干预。</li></ul></li><li><p>边界条件测试</p><p>程序最容易在边界上出错，应注意以下方面：</p><ul><li>输入/输出数据的等价类边界；</li><li>选择条件和循环条件的边界；</li><li>复杂数据结构的边界。</li></ul></li></ul><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>在对模块进行测试时，每个模块在整个软件系统中不是孤立的，不能独立运行，而需要由其他模块来调用和驱动，模块的执行还依赖被它调用的下级模块。因此，为了模拟模块与它周围模块的关系，需要设计辅助测试模块。</p><p>辅助测试模块分为以下两种：</p><ul><li><strong>驱动模块</strong>（Driver）：用来模拟被测模块的上级调用模块，功能比真正的上级模块简单得多，仅仅是接受测试数据，并向被测模块传送测试数据，启动被测模块，回收并输出测试结果。</li><li><strong>桩模块</strong>（Stub）：用来模拟被测模块在执行过程中所要调用的模块，接受被测模块输出的数据并完成它所指派的任务。</li></ul><p>图（a）表示被测软件的结构，图（b）表示用驱动模块和桩模块建立的测试模块 B 的环境。</p><p><img src="2.png" alt=""></p><p>驱动模块和桩模块的编写会给软件开发带来额外开销，而且不必和最终的软件一起提交，因此在保证测试质量的前提下尽量避免开发驱动模块和桩模块。当测试单元较简单时，可以直接与被测模块放在一起执行测试；当测试单元较复杂时，最好利用驱动模块或桩模块构建测试环境运行程序。</p><h3 id="测试技术"><a href="#测试技术" class="headerlink" title="测试技术"></a>测试技术</h3><p>用于单元测试的主要技术如下：</p><ul><li><p>静态测试</p><p>静态测试是指不运行被测程序本身，仅通过分析或检查源程序的语法、结构、过程、接口等来检查程序的正确性。静态测试的结果可用于进一步的查错，并未测试用例选取提供指导。</p></li><li><p>白盒测试</p><p>白盒测试也称结构测试或逻辑驱动测试，是按照程序内部的结构测试程序，通过测试来检测产品内部动作是否按照设计规格说明书的规定正常进行，检验程序中的每条通路是否都能按预定要求正确工作。</p><p>白盒测试的原则如下：</p><p>（1）每条语句至少执行一次；</p><p>（2）每个判定的每个分支至少执行一次；</p><p>（3）每个判定的每个条件应取到各种可能的值；</p><p>（4）每个判定中各条件的每一种组合至少出现一次；</p><p>（5）每一条可能的路径至少执行一次。</p></li><li><p>状态转换测试</p><p>被测单元可能具有多个不同的状态，在某些条件下状态会互相转换。状态转换测试就是要模拟使状态发生转换的各种用户操作场景，以及通过一些非正常技术手段来校验不允许发生的状态转换。</p></li><li><p>功能测试和非功能测试</p><p>功能测试就是对产品的各功能进行验证，根据产品特征、操作描述和用户方案测试一个产品的特性和可操作性行为，以确定它们满足设计需求。</p><p>非功能测试指在必要时对单元的性能（如系统响应时间、外部接口响应时间、CPU 的使用、内存使用的相容性）等方面进行测试。</p></li></ul><h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>集成测试是在单元测试的基础上将所有已通过单元测试的模块按照概要设计的要求组装成子系统或系统。</p><p>进行集成测试的目的是确保各单元模块组合在一起能够按照既定意图协作运行，并确保增量的行为正确。不经过单元测试的模块不应该进行集成测试，否则将对集成测试的效果和效率带来巨大的影响。</p><h3 id="测试内容-1"><a href="#测试内容-1" class="headerlink" title="测试内容"></a>测试内容</h3><p>集成测试的内容包括模块之间的接口以及集成后的功能，使用黑盒测试方法测试集成的功能，并对以前的集成进行回归测试。具体来说，集成测试包括以下内容：</p><ul><li>将各模块连接起来时穿越模块接口的数据是否会丢失；</li><li>各子功能组合起来能否达到预期要求的父功能；</li><li>模块的功能是否会对其他模块的功能产生不利影响；</li><li>全局数据结构是否有问题，是否会被异常修改；</li><li>单个模块的误差积累起来是否会放大到不可接受的程度。</li></ul><h3 id="测试方法-1"><a href="#测试方法-1" class="headerlink" title="测试方法"></a>测试方法</h3><ul><li><p>非增量式集成测试方法</p><p>基本思路是首先将各模块独立地进行单元测试，然后把所有模块组装在一起进行测试，最终得到一个符合要求的软件系统。</p><p>这种方法容易出现混乱，因为测试时可能发现一大堆错误，为每个错误进行定位和纠正非常困难，并且改正一个错误同时又可能引入新的错误。</p></li><li><p><strong>增量式集成测试方法</strong></p><p>基本思路是首先将各模块独立地进行单元测试，然后将这些模块逐步组装成较大的系统，边组装边测试，以发现在组装时产生的错误，最终组装成一个符合要求的软件系统。</p><p>按照不同的次序实施，有下面两种测试策略：</p><ul><li><p>自顶向下增量式集成测试</p><p>该测试方法是按照程序结构图，首先利用桩模块测试主模块，通过测试后用实际的模块替代桩模块进行测试，重复以上步骤，直至替代了所有的桩模块。</p><p>在测试过程中，决定模块测试次序的基本原则如下：</p><p>（1）尽早测试关键的模块，即比较重要、比较复杂的可能出错或含有新算法的模块；</p><p>（2）尽早测试包含输入、输出功能的模块。</p></li><li><p>自底向上增量式集成测试</p><p>该测试方法是按照程序结构图，首先利用驱动模块测试最底层模块，通过测试后用实际的模块替代驱动模块进行测试，重复以上步骤，直至替代了所有的驱动模块。</p><p>在测试过程中，决定测试次序的基本原则是该模块的所有下级模块都被测试过了。</p></li></ul></li></ul><p>两种测试方法的比较：</p><p><img src="0.png" alt=""></p><h3 id="测试技术-1"><a href="#测试技术-1" class="headerlink" title="测试技术"></a>测试技术</h3><p>集成测试主要是测试软件的结构问题，因为测试建立在模块的接口上，所以多为<strong>黑盒测试</strong>，适当辅以白盒测试。</p><p>集成测试一般覆盖的区域包括以下几个：</p><ul><li>从其他关联模块调用一个模块；</li><li>在关联模块间正确传输数据；</li><li>关联模块间的互相影响；</li><li>模块间接口的可靠性。</li></ul><p>执行集合测试应遵循下面的方法：</p><p>（1）确认组成一个完整系统的模块之间的关系；</p><p>（2）评审模块之间的交互、通信需求，确认出模块间的接口；</p><p>（3）使用上述信息产生一套测试用例；</p><p>（4）采用增量式测试，直到所有模块被功能集成进来。</p><h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>系统测试是将经过良好的集成测试的软件系统作为整个计算机系统的一部分与计算机硬件、外部设备、支持软件、数据以及人员等其它系统元素结合在一起，在实际使用环境下对计算机系统进行一系列的严格测试，从而发现软件中的潜在缺陷。</p><p>系统测试的最终目的是保证开发人员交付给用户的软件产品能够满足用户的需求，系统测试的测试用例应在实际的用户使用环境下来执行。</p><h3 id="测试内容-2"><a href="#测试内容-2" class="headerlink" title="测试内容"></a>测试内容</h3><p>几类常用的系统测试：</p><ul><li><p>功能测试</p><p>也称确认测试，根据软件需求规格说明书来检验被测系统是否满足用户的功能使用要求。</p><p>功能测试是系统测试中最基本的测试。</p></li><li><p>性能测试</p><p>性能测试检测软件运行时的性能，为记录软件的运行性能，经常需要安装必要的测试仪表或软件。</p></li><li><p>强度测试</p><p>强度测试检查系统能力的最高实际限度，即软件在一些超负荷情况下的运行情况。</p></li><li><p>可靠性测试</p><p>通常使用几个指标来度量系统的可靠性：平均无故障时间是否超过规定的时限、因故障而停机的时间在一年中不应超过多少时间等。</p></li><li><p>恢复测试</p><p>主要目的是检查系统的容错能力，可以采用人工干预方式。如果系统本身能够自动恢复，则应检查重新初始化、数据恢复和重新启动等机制是否正确。</p></li><li><p>安装测试</p><p>目的是找出那些在安装过程中出现的错误，而不是软件故障。</p></li><li><p>安全性测试</p><p>目的在于检查系统对非法入侵的防范能力。</p><p>理论上说没有不可进入的系统，因此系统安全设计的准则是使非法入侵的代价超过被保护信息的价值。</p></li><li><p>配置测试</p><p>操作系统、数据库管理系统以及信息交换系统等都是在许多硬件配置支持下工作的，如何保证软件在其设计和连接的硬件上正常工作是配置测试的工作目标。配置测试是用各种硬件和软件平台以及不同设置检查软件操作的过程，以保证测试的软件可以使用尽可能多的硬件组合。</p></li><li><p>可用性测试</p><p>可用性测试检测用户对所使用软件是否满意，具体体现为操作是否方便、用户界面是否友好等。</p><p>优秀的用户界面包括下面 7 个要素：符合标准和规范、直观性、一致性、灵活性、舒适性、正确性、实用性。</p></li><li><p>兼容性测试</p><p>检测软件之间能否正确地交互和共享信息，它是用其他软件检查软件操作的过程。</p></li><li><p>网站测试</p><p>一般来说包括以下几方面：文字测试、链接测试、图形测试、表单测试、动态内容测试、数据库测试、服务器性能和加载测试、安全性测试。</p></li></ul><h3 id="测试技术-2"><a href="#测试技术-2" class="headerlink" title="测试技术"></a>测试技术</h3><p>完全采用<strong>黑盒测试技术</strong>。</p><h2 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>验收测试是一种合格性测试，也称<strong>确认测试</strong>，是以用户为主，软件开发人员、实施人员和质量保证人员共同参与的测试。验收测试让软件用户决定是否接受产品，是一项确定产品是否能够满足合同或用户所规定需求的测试。</p><h3 id="测试内容-3"><a href="#测试内容-3" class="headerlink" title="测试内容"></a>测试内容</h3><ul><li>明确规定验收测试通过的标准；</li><li>确定验收测试方法；</li><li>确定验收测试的组织和可利用的资源；</li><li>制订验收测试计划，并进行评审；</li><li>设计验收测试的测试用例；</li><li>执行验收测试；</li><li>分析测试结果，决定是否验收。</li></ul><h3 id="测试技术-3"><a href="#测试技术-3" class="headerlink" title="测试技术"></a>测试技术</h3><p>完全采用<strong>黑盒测试</strong>技术。</p><p>多采用称为 $\alpha,\beta$ 测试的过程。</p><ul><li><p>$\alpha$ 测试</p><p>对一个早期的、不稳定的软件版本你进行验收测试。</p></li><li><p>$\beta$ 测试</p><p>对一个晚期的、更加稳定的软件版本进行验收测试。</p></li></ul><h2 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>回归测试是指修改了旧代码后重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。</p><p>回归测试作为软件生命周期的组成部分，在整个软件测试过程中占有很大的比重，软件开发的各个阶段都会进行多次回归测试。</p><h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><p>为了高效进行回归测试，需要对测试用例库进行维护，并依据一定的策略，选择相应的回归测试包。</p><ul><li><p>测试用例库的维护</p><p>软件在其生命周期中会频繁地被修改和推出新版本，新版本软件会添加一些新的功能。</p><p>测试用例的维护包括以下方面：</p><p>（1）删除过时的测试用例；</p><p>（2）改进不受控制的测试用例，使其达到可重复和可控制的要求；</p><p>（3）删除冗余的测试用例；</p><p>（4）增添新的测试用例。</p></li><li><p>回归测试包的选择</p><p>软件生命周期中，即使一个得到良好维护的测试用例库也可能变得相当大，所以有时不得不选择一个缩减的回归测试包来完成测试。</p><p>常用的选择回归测试包的方式：</p><ul><li>再测试全部用例：比较安全，但成本最高。</li><li>基于风险选择测试：基于一定的风险标准优先运行最关键的、可疑的测试。</li><li>基于操作剖面选择测试</li><li>再测试修改的部分</li></ul></li></ul><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><p>（1）识别出软件中被修改的过程；</p><p>（2）从原基线测试用例库 $T$ 中排除所有不再适用的测试用例，建立一个新的基线测试用例库 $T_0$；</p><p>（3）依据一定策略从  $T_0$ 中选择测试用例，测试被修改的软件；</p><p>（4）如果有必要，生成新的测试用例集  $T_1$，用于测试  $T_0$ 无法充分测试的软件部分。</p><h3 id="测试技术-4"><a href="#测试技术-4" class="headerlink" title="测试技术"></a>测试技术</h3><p>一般采用黑盒测试来测试软件的高级需求，也可能采用非功能测试来检查系统的增强或扩展是否影响了系统的性能特性，以及与其它系统间的互操作性和兼容性问题。</p><p>错误猜测在回归测试中是很重要的，主要来自于经验。</p><h2 id="敏捷测试"><a href="#敏捷测试" class="headerlink" title="敏捷测试"></a>敏捷测试</h2><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><p>敏捷开发的最大特点是高度迭代，有周期性，并且能够及时、持续地响应客户的频繁反馈。</p><p>敏捷测试即不断修正质量指标，正确建立测试策略，确认客户的有效需求得以实现。</p><p>敏捷测试是遵循敏捷宣言的一种测试实践。</p><p>（1）强调从客户的角度来测试系统；</p><p>（2）重点关注持续迭代地测试新开发的功能；</p><p>（3）尽早开始测试。</p><h3 id="测试驱动开发"><a href="#测试驱动开发" class="headerlink" title="测试驱动开发"></a>测试驱动开发</h3><p>测试驱动开发（Test-driven development,TDD）是一种软件开发过程中的应用方法，倡导先写测试程序，然后编码实现其功能。测试驱动开发的目的是取得快速反馈并使用“illustrate the main line”方法来构建程序。</p><p>带两顶帽子的开发方式：先戴上实现功能的帽子，在测试的辅助下快速实现其功能；再带上重构的帽子，在测试的保护下去除冗余代码。</p><p>基本思想是在开发功能代码之前先编写测试代码，然后只编写使测试通过的功能代码，从而以测试来驱使整个开发过程的进行。</p><p>测试驱动开发的基本过程如下：</p><p>（1）快速新增一个测试；</p><p>（2）运行所有的测试，发现新增的测试不能通过；</p><p>（3）做一些改动，尽快让测试程序可运行，为此可以在程序中使用一些不合情理的方法；</p><p>（4）运行所有测试，并且全部通过；</p><p>（5）重构代码，消除重复设计，优化设计结构。</p><h1 id="生命周期测试-amp-软件开发模型-amp-软件测试模型"><a href="#生命周期测试-amp-软件开发模型-amp-软件测试模型" class="headerlink" title="生命周期测试 &amp; 软件开发模型 &amp; 软件测试模型"></a>生命周期测试 &amp; 软件开发模型 &amp; 软件测试模型</h1><p><strong>在软件生命周期中，测试过程贯穿于软件开发生命周期的每个阶段。</strong></p><h2 id="软件开发生命周期"><a href="#软件开发生命周期" class="headerlink" title="软件开发生命周期"></a>软件开发生命周期</h2><ul><li>需求分析</li><li>设计</li><li>编码</li><li>测试</li><li>安装</li><li>维护</li></ul><h2 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p>瀑布模型将软件生命周期划分为制定计划、需求分析、软件设计、程序编写、软件测试和运行维护等六个基本活动，并且规定了它们自上而下、相互衔接的固定次序，如同瀑布流水，逐级下落。</p><p>理想化的瀑布模型如下：</p><p><img src="https://img-blog.csdnimg.cn/20190725130452991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pqdXd4eA==,size_16,color_FFFFFF,t_70" alt="img"></p><p>这是一种经典模型，提供了软件开发的基本框架，适合需求易于完善定义且不易变更的软件系统。</p><p>实际的瀑布模型是带“反馈环”的，如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20190725160647424.png" alt="img"></p><p>瀑布模型是文档驱动的模型，遵守这个约束可使软件维护变得容易一些，从而显著降低软件预算。</p><p>优点:</p><ul><li>各阶段划分清晰；</li><li>强调计划与需求分析；</li><li>适合需求稳定的产品开发。</li></ul><p>缺点:</p><ul><li>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量；</li><li><p>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，增加了开发的风险；</p></li><li><p>早期的错误可能要等到开发后期的测试阶段才能发现，进而带来严重的后果；</p></li><li>最终产品往往反映用户的初始需求而不是最终需求，不适合需求模糊或需求经常变动的系统；</li></ul><h3 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h3><p>快速原型是快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集。</p><p>快速原型模型是增量模型的另一种形式，在开发真实系统之前，迅速建造一个可以运行的软件原型 ，以便理解和澄清问题，在该原型的基础上，逐渐完成整个系统的开发工作。</p><p><img src="https://img0.baidu.com/it/u=4002882172,1165672642&amp;fm=26&amp;fmt=auto" alt="img"></p><p>优点：</p><p>克服瀑布模型的切点，减少由于软件需求不明确带来的开发风险，互动性更高更容易了解客户需求。</p><p>缺点：</p><ul><li>所选用的开发技术和工具不一定符合主流的发展 ；</li><li>快速建立起来的系统结构加上连续的修改可能会导致产品质量低下。</li></ul><h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><p>使用增量模型开发软件时，把软件产品作为一系列的增量构件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够完成特定的功能。使用增量模型时，第一个增量构件往往实现软件的基本需求，提供最核心的功能。</p><p>把软件产品分解成增量构件时，唯一必须遵守的约束条件是，当把新构件集成到现有构件中时，所形成的产品必须是可测试的。</p><p><img src="https://wiki.mbalib.com/w/images/d/d0/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B.jpg" alt="增量模型"></p><p>适合技术风险较大、用户需求较稳定的软件系统。</p><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p>螺旋模型最大的特点在于引入了其他模型不具备的<strong>风险分析</strong>，使软件在无法排除重大风险时有机会停止，以减小损失。</p><p>螺旋模型是快速原型模型以进化的开发方式为中心，在每个项目阶段使用瀑布模型法。该模型的每一个周期都包括需求定义、风险分析、工程实现和评审 4 个阶段，由这 4 个阶段进行迭代。</p><p>简化的螺旋模型：</p><p><img src="https://img-blog.csdnimg.cn/20190726102921612.png" alt="img"></p><p>适合需求难以获取和确定、软件开发风险较大的软件系统。</p><h2 id="软件测试模型"><a href="#软件测试模型" class="headerlink" title="软件测试模型"></a>软件测试模型</h2><h3 id="V-模型"><a href="#V-模型" class="headerlink" title="V 模型"></a>V 模型</h3><p>$V$ 模型是在瀑布模型的基础上发展而来的，如下图所示：</p><p><img src="3.png" alt=""></p><p>在软件编码完成前，系统测试用例、软件测试用例以及单元测试用例已经完成。</p><p>优点：</p><ul><li>$V$ 模型开发流程将代码实现放在最后一步，即使客户需求发生变更也能很快做出修改，相比瀑布模型减少了回溯的成本和时间；</li><li>明确标注了测试过程中存在不同的测试类型，明确表示出了开发阶段与测试各阶段的对应关系。</li></ul><p>缺点：虽然测试尽早的进入到开发阶段，但是真正进行软件测试是在编码之后，这样忽视了测试对需求分析，系统设计的验证，时间效率上也大打折扣。</p><h3 id="W-模型"><a href="#W-模型" class="headerlink" title="W 模型"></a>W 模型</h3><p>又称双 V 模型，它由 V 模型演变而来，弥补了 V 模型的不足。左边的 V 是开发的生命周期，右边的 V 是测试的生命周期。</p><p><img src="https://img0.baidu.com/it/u=3561836809,2244645606&amp;fm=26&amp;fmt=auto" alt="img"></p><p>单元测试依据详细设计说明书；</p><p>集成测试依据概要设计说明书；</p><p>系统测试依据需求规格说明书。</p><p>优点：测试与开发是同步进行的，从而有利于尽早地发现问题。</p><p>缺点：$W$ 模型是顺序性的，不可逆，需求的变更和调整，依旧不方便。</p><h3 id="H-模型"><a href="#H-模型" class="headerlink" title="H 模型"></a>H 模型</h3><p>在 $H$ 模型中，软件测试过程活动完全独立，贯穿于整个产品的周期，与其他流程并发地进行。</p><p>某个测试点准备就绪时，就可以从测试准备阶段进行到测试执行阶段。</p><p>软件测试可以尽早进行。</p><p><img src="https://img1.baidu.com/it/u=1514273074,3801459989&amp;fm=26&amp;fmt=auto" alt="img"></p><h3 id="X-模型"><a href="#X-模型" class="headerlink" title="X 模型"></a>X 模型</h3><p>$X$ 模型也是对 V 模型的改进。</p><p><img src="4.png" alt=""></p><p>$X$ 模型的左边描述的是针对单独程序片段所进行的相互分离的编码和测试，此后将进行频繁的交接，通过集成，最终成为可执行的程序，然后再对这些可执行程序进行测试。己通过集成测试的成品可以进行封装并提交给用户，也可以作为更大规模和范围内集成的一部分。</p><p>多根并行的曲线表示变更可以在各个部分发生。</p><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p><p>[2] 赖均，陶春梅，刘兆宏，胡峰 . 软件工程[M] . 北京：清华大学出版社，2016</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;什么是软件&quot;&gt;&lt;a href=&quot;#什么是软件&quot; class=&quot;headerlink&quot; title=&quot;什么</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot相关原理</title>
    <link href="http://10185102110.github.io/2021/08/17/SpringBoot%E7%9B%B8%E5%85%B3%E5%8E%9F%E7%90%86/"/>
    <id>http://10185102110.github.io/2021/08/17/SpringBoot%E7%9B%B8%E5%85%B3%E5%8E%9F%E7%90%86/</id>
    <published>2021-08-17T07:53:37.000Z</published>
    <updated>2021-08-28T03:35:48.371Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring Web MVC 是一种基于 Java 的轻量级 Web 框架，使用 MVC架构模式的思想将 web 层进行职责解耦，基于请求驱动即使用请求-响应模型，框架的目的就是帮助我们简化开发。</p><p>Spring MVC 主要由前端控制器(DispatcherServlet)、处理器映射(HandlerMapping)、控制器(Controller)、视图解析器(ViewResolver)、视图组成。</p><p>Spring 的 Web MVC 框架提供了模型 - 视图 - 控制器架构：</p><ul><li><strong>模型（Model ）</strong>封装了应用程序的数据和一般他们会组成的 POJO。</li><li><strong>视图（View）</strong>是负责呈现模型数据和一般它生成的 HTML 输出，客户端的浏览器能够解释。</li><li><strong>控制器（Controller ）</strong>负责处理用户的请求，并建立适当的模型，并把它传递给视图渲染。</li></ul><h2 id="Spring-MVC-运行原理"><a href="#Spring-MVC-运行原理" class="headerlink" title="Spring MVC 运行原理"></a>Spring MVC 运行原理</h2><p><img src="mvc1.png" alt=""></p><p>$(1)$ HTTP请求：客户端请求提交到 DispatcherServlet。<br>$(2)$ 寻找处理器：由 DispatcherServlet 控制器查询一个或多个 HandlerMapping，找到处理请求的 Controller。<br>$(3)$ 调用处理器：DispatcherServlet 将请求提交到 Controller。<br>$(4)$ 调用业务处理和返回结果：Controller 调用业务逻辑处理后，返回 ModelAndView。<br>$(5)$ 处理视图映射并返回模型： DispatcherServlet 查询一个或多个 ViewResoler 视图解析器，找到 ModelAndView 指定的视图。<br>$(6)$ HTTP 响应：视图负责将结果显示到客户端。</p><h2 id="Spring-MVC-接口"><a href="#Spring-MVC-接口" class="headerlink" title="Spring MVC 接口"></a>Spring MVC 接口</h2><ol><li>DispatcherServlet 接口：<br>Spring 提供的前端控制器，所有的请求都有经过它来统一分发。在 DispatcherServlet 将请求分发给 Controller 之前，需要借助 Spring 提供的 HandlerMapping 定位到具体的 Controller。</li><li>HandlerMapping 接口：<br>能够完成客户请求到 Controller 的映射。</li><li>Controller 接口：<br>需要为并发用户处理上述请求，因此实现 Controller 接口时，必须保证线程安全并且可重用。<br>Controller 将处理用户请求，并返回 ModelAndView 对象给 DispatcherServlet 前端控制器。ModelAndView 类对象包含模型和视图。</li><li>ViewResolver 接口：<br>Spring 提供的视图解析器，在 Web 应用中查找 View 对象，从而将相应结果渲染给客户。</li></ol><h2 id="自动配置源码分析与实例"><a href="#自动配置源码分析与实例" class="headerlink" title="自动配置源码分析与实例"></a>自动配置源码分析与实例</h2><p>除了装载 DispatcherServlet 外，Spring Boot 还做了如下默认配置：</p><ul><li>自动配置视图解析器；</li><li>静态资源文件处理；</li><li>自动注册大量的转换器和格式化器；</li><li>提供 HttpMessageConverter 对请求参数和返回结果进行处理；</li><li>自动注册 MessageCodeResolver；</li><li>默认欢迎页配置；</li><li>favicon 自动配置；</li><li>可配置的 Web 初始化绑定器。</li></ul><p>以上自动配置都是在 WebMvcAutoConfiguration 自动配置类中操作的。</p><h3 id="WebMvcAutoConfiguration自动配置类"><a href="#WebMvcAutoConfiguration自动配置类" class="headerlink" title="WebMvcAutoConfiguration自动配置类"></a>WebMvcAutoConfiguration自动配置类</h3><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定该类为配置类</span></span><br><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">// 当前应用是Servlet Web应用时该配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">// 判断当前classpath是否存在Servlet类、DispatcherServlet类和WebMvcConfigurer类，存在则生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span></span><br><span class="line"><span class="comment">// 判断IOC容器中是否存在WebMvcConfigurationSupport类型的Bean，不存在则生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span></span><br><span class="line"><span class="comment">// 类的加载顺序，数值越小越优先加载</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span></span><br><span class="line"><span class="comment">// 自动配置的生效时间在这三个自动配置类之后</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上源码可知 WebMvcAutoConfiguration 自动配置类的自动配置触发条件。</p><h3 id="ViewResolver视图解析器"><a href="#ViewResolver视图解析器" class="headerlink" title="ViewResolver视图解析器"></a>ViewResolver视图解析器</h3><p>Spring MVC 中的 Controller 控制器可以返回各种各样的视图，比如 JSP、JSON、Velocity、FreeMarker、Thymeleaf、HTML 字符流等。这些视图的解析需要各种视图解析器，视图解析器的作用就是将逻辑视图转为物理视图，所有的视图解析器都必须实现 ViewResolver 接口。开发者可以设置一个视图解析器或混用多个视图解析器并指定优先顺序，Spring MVC 会按照视图解析器的优先顺序对逻辑视图进行解析，直到解析成功并返回视图对象，否则抛出异常。</p><p>WebMvcAutoConfiguration 的子类 WebMvcAutoConfigurationAdapter 中，在前置条件满足的情况下自动配置类会向 IOC 容器中注册三个视图解析器，分别是 InternalResourceViewResolver、BeanNameViewResolver 和 ContentNegotiatingViewResolver。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span>, <span class="title">ServletContextAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        ...</span><br><span class="line">            </span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="comment">// 如果没有，就在IOC容器中注册一个InternalResourceViewResolver类型的Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">defaultViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">            resolver.setPrefix(<span class="keyword">this</span>.mvcProperties.getView().getPrefix());</span><br><span class="line">            resolver.setSuffix(<span class="keyword">this</span>.mvcProperties.getView().getSuffix());</span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean(&#123;View.class&#125;)</span></span><br><span class="line">        <span class="comment">// IOC容器中存在View.class</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">        <span class="comment">// 满足上一个条件时，如果没有，就在IOC容器中注册一个BeanNameViewResolver类型的Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BeanNameViewResolver <span class="title">beanNameViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            BeanNameViewResolver resolver = <span class="keyword">new</span> BeanNameViewResolver();</span><br><span class="line">            resolver.setOrder(<span class="number">2147483637</span>);</span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean(&#123;ViewResolver.class&#125;)</span></span><br><span class="line">        <span class="comment">// IOC容器中存在ViewResolver.class</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">            name = &#123;&quot;viewResolver&quot;&#125;,</span></span><br><span class="line"><span class="meta">            value = &#123;ContentNegotiatingViewResolver.class&#125;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line">        <span class="comment">// 满足上一个条件时，如果IOC容器中没有名称为ViewResolver且类型为ContentNegotiatingViewResolver类的Bean，就向容器中注册一个</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">            ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">            resolver.setContentNegotiationManager((ContentNegotiationManager)beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line">            resolver.setOrder(-<span class="number">2147483648</span>);</span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>InternalResourceViewResolver：通过设置前缀、后缀和控制器中的方法来返回视图名的字符串，从而得到实际视图内容。</p><p>BeanNameViewResolver：在控制器中，一个方法的返回值的字符串会根据 BeanNameViewResolver 查找 Bean 的名称并为返回字符串的 View 渲染视图。</p><p>ContentNegotiatingViewResolver：特殊的视图解析器，它不会为自己处理视图，而是委派给其他视图解析器来处理不同的视图，级别最高。</p><p>Spring Boot 的自动配置机制会直接在项目启动过程中将视图解析器注册到 IOC 容器中，当然，如果开发者不想使用默认的配置策略，也可以自行添加视图解析器到 IOC 容器中。</p><h3 id="Converter、Formatter类型转换器"><a href="#Converter、Formatter类型转换器" class="headerlink" title="Converter、Formatter类型转换器"></a>Converter、Formatter类型转换器</h3><p>在 WebMvcAutoConfigurationAdapter 内部类中含有 <code>addFormatters()</code> 方法，该方法会向 FormatterRegistry 添加 IOC 容器中拥有的 Converter、GenericConverter、Formatter 类型的 Bean。</p><p> <code>addFormatters()</code> 方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">    ApplicationConversionService.addBeans(registry, <span class="keyword">this</span>.beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了 <code>ApplicationConversionService.addBeans()</code> 方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBeans</span><span class="params">(FormatterRegistry registry, ListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; beans = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">    beans.addAll(beanFactory.getBeansOfType(GenericConverter.class).values());</span><br><span class="line">    beans.addAll(beanFactory.getBeansOfType(Converter.class).values());</span><br><span class="line">    beans.addAll(beanFactory.getBeansOfType(Printer.class).values());</span><br><span class="line">    beans.addAll(beanFactory.getBeansOfType(Parser.class).values());</span><br><span class="line">    Iterator var3 = beans.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">        Object bean = var3.next();</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> GenericConverter) &#123;</span><br><span class="line">            registry.addConverter((GenericConverter)bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Converter) &#123;</span><br><span class="line">            registry.addConverter((Converter)bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Formatter) &#123;</span><br><span class="line">            registry.addFormatter((Formatter)bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Printer) &#123;</span><br><span class="line">            registry.addPrinter((Printer)bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Parser) &#123;</span><br><span class="line">            registry.addParser((Parser)bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单类型转换的案例：</p><p>在 Controller 包中新建 TestController 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test/type/conversion&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">typeConversionTest</span><span class="params">(String name,<span class="keyword">float</span> weight,<span class="keyword">int</span> type,Boolean onSale)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;weight:&quot;</span>+weight);</span><br><span class="line">        System.out.println(<span class="string">&quot;type:&quot;</span>+type);</span><br><span class="line">        System.out.println(<span class="string">&quot;onSale:&quot;</span>+onSale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 Spring Boot 项目，在浏览器中输入 <a href="http://localhost:8080/test/type/conversion?name=iPhoneX&amp;weight=174.5&amp;type=1&amp;onSale=true">http://localhost:8080/test/type/conversion?name=iPhoneX&amp;weight=174.5&amp;type=1&amp;onSale=true</a> ，查看控制台的打印结果：</p><p><img src="1.png" alt=""></p><p>HTTP 请求传递的数据都是字符串 String 类型的，而类型转换方法可以将其转换成其他数据类型。</p><h3 id="HttpMessageConverter消息转换器"><a href="#HttpMessageConverter消息转换器" class="headerlink" title="HttpMessageConverter消息转换器"></a>HttpMessageConverter消息转换器</h3><p> HttpMessageConverter 的设置也是通过 WebMvcAutoConfigurationAdapter 完成的，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.messageConvertersProvider.ifAvailable((customConverters) -&gt; &#123;</span><br><span class="line">        converters.addAll(customConverters.getConverters());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Spring MVC 开发 Web 项目时，@RequestBody、@ResponseBody 注解用来进行请求实体的转换和响应结果的格式化输出。以 JSON 数据为例，前者的作用是将请求中的数据解析成 JOSN 并绑定为实体对象，后者的作用是将响应结果以 JSON 格式返回给请求发起者。两者结合起来就是 HttpMessageConverter 的作用。</p><p>举个例子，在项目中新建 entity 包并定义一个实体类 SaleGoods，然后通过 @RequestBody、@ResponseBody 注解进行参数的读取和响应，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleGoods</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String goodsName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> Boolean onSale;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGoodsName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goodsName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsName</span><span class="params">(String goodsName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goodsName = goodsName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">float</span> weight)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getOnSale</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onSale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnSale</span><span class="params">(Boolean onSale)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onSale = onSale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SaleGoods&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;,goodsName=&#x27;&quot;</span> + goodsName +<span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,weight=&#x27;&quot;</span> + weight +</span><br><span class="line">                <span class="string">&quot;,type=&#x27;&quot;</span> + type +</span><br><span class="line">                <span class="string">&quot;,onSale=&#x27;&quot;</span> + onSale + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 TestController 类中添加 <code>httpMessageConverterTest()</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/test/httpmessageconverter&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SaleGoods <span class="title">httpMessageConverterTest</span><span class="params">(<span class="meta">@RequestBody</span> SaleGoods saleGoods)</span></span>&#123;</span><br><span class="line">    System.out.println(saleGoods.toString());</span><br><span class="line">    saleGoods.setType(saleGoods.getType() + <span class="number">1</span>);</span><br><span class="line">    saleGoods.setGoodsName(<span class="string">&quot;商品名:&quot;</span> + saleGoods.getGoodsName());</span><br><span class="line">    <span class="keyword">return</span> saleGoods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码作用是拿到封装好的 SaleGoods 对象，进行简单的修改后，最后将对象数据返回。</p><p>由于这里是 POST 请求，使用 Postman 软件模拟请求：</p><p><img src="2.png" alt=""></p><p>同时控制台输出：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SaleGoods&#123;id=1,goodsName=&#x27;Spring Boot&#x27;,weight=&#x27;10.5,type=&#x27;2,onSale=&#x27;true&#125;</span><br></pre></td></tr></table></figure><p>消息转换器使得对象数据的读取不仅简单而且正确，响应时也不用自行封装工具类。</p><h3 id="静态资源的映射规则"><a href="#静态资源的映射规则" class="headerlink" title="静态资源的映射规则"></a>静态资源的映射规则</h3><p>这部分配置依然是 WebMvcAutoConfigurationAdapter 内部类完成的，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// webjars文件访问配置</span></span><br><span class="line">        <span class="keyword">this</span>.addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">        <span class="comment">// 静态资源映射配置</span></span><br><span class="line">        <span class="keyword">this</span>.addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">            registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ServletContextResource resource = <span class="keyword">new</span> ServletContextResource(<span class="keyword">this</span>.servletContext, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                registration.addResourceLocations(<span class="keyword">new</span> Resource[]&#123;resource&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态资源的映射是在 <code>addResourceHandler()</code> 方法中配置的，StaticPathPattern 的值为 “/**”，表示访问当前项目的任何资源，只要没有匹配的处理映射，则都去静态资源的文件夹找映射。实际的静态资源存放目录通过 <code>getStaticLocations()</code> 方法获取，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Resources</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] staticLocations;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> addMappings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> customized;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebProperties.Resources.Chain chain;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebProperties.Resources.Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">        <span class="keyword">this</span>.addMappings = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.customized = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.chain = <span class="keyword">new</span> WebProperties.Resources.Chain();</span><br><span class="line">        <span class="keyword">this</span>.cache = <span class="keyword">new</span> WebProperties.Resources.Cache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知，Spring Boot 默认的静态资源处理目录为：”classpath:/META-INF/resources/“, “classpath:/resources/“, “classpath:/static/“, “classpath:/public/“。开发 Web 项目时只需要包含这几个目录中的一个或者多个，并将静态资源文件放入其中即可。</p><p>为验证该配置，在类路径下分别创建 public 目录、resources 目录、static 目录，并分别在三个文件夹中放入静态文件，如图所示：</p><p><img src="3.png" alt=""></p><p>重启 Spring Boot，打开浏览器分别进行请求：</p><p><img src="4.png" alt=""></p><p><img src="5.png" alt=""></p><p><img src="6.png" alt=""></p><p><img src="7.png" alt=""></p><p>可见静态资源虽然在不同的目录中，但都能被正确返回，这就是 Spring Boot 对静态资源的拦截处理。</p><p>开发者也可以在配置文件 application.properties 中修改拦截地址和静态资源目录。</p><h3 id="welcomePage-和-favicon-配置"><a href="#welcomePage-和-favicon-配置" class="headerlink" title="welcomePage 和 favicon 配置"></a>welcomePage 和 favicon 配置</h3><p>welcomePage 即默认欢迎页面，配置源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resourceProperties.getStaticLocations()) &#123;</span><br><span class="line">        Resource indexHtml = getIndexHtml(location);</span><br><span class="line">        <span class="keyword">if</span> (indexHtml != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> indexHtml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getIndexHtml(<span class="keyword">new</span> ServletContextResource(servletContext, SERVLET_LOCATION));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getIndexHtml(<span class="keyword">this</span>.resourceLoader.getResource(location));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(Resource location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Resource resource = location.createRelative(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resource.exists() &amp;&amp; (resource.getURL() != <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> resource;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行 Web MVC 自动配置时程序会向 IOC 容器注册一个 WelcomePageHandlerMapping 类型的 Bean，即默认欢迎页面，其路径为静态资源目录下的 index.html 文件。</p><p>在 /static/ 目录下添加 index.html 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>welcome page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这里是默认欢迎页</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启项目，再访问 <a href="http://localhost:8080/">http://localhost:8080/</a> ，效果如下：</p><p><img src="8.png" alt=""></p><p>favicon 即网页图标，Spring Boot 2.2 版本之后不提供默认 favicon 图标，开发者可以自定义配置。只要将 favicon 文件放入静态资源目录然后重启项目即可。</p><p><img src="9.png" alt=""></p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Boot 就是一个 Java web 的开发框架。</p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>习惯优于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>主要优点：</p><ul><li>可以快速创建独立运行的 Spring 项目</li><li>拥有大量的自动配置</li><li>starter 自动依赖与版本控制</li><li>使用嵌入式的  Servlet 容器</li></ul><h2 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h2><p>convention over configuration ，意为惯例优先原则。约定优于配置不是说不需要配置，它其实是一种开发原则，目的是在一定限度内减少需要开发人员手动配置的工作量，用默认的配置达到开发人员的需求。</p><p>比如在项目中加入 spring-boot-starter-web 后，Spring Boot 会自动导入 Spring MVC 的相关依赖和一个内置的 Tomcat 容器。在导入 spring-boot-starter-web 后，就表示开发人员与 Spring Boot 之间约定当前项目是一个 Web 项目，进一步约定开发人员会使用 Spring MVC，从而自动装配 DispatchServlet 到 IOC 容器中。同理，在项目中加入 jdbc-starter 后就表示开发人员与 Spring Boot 之间约定会对数据库进行操作，Spring Boot 会自动导入 JDBC 相关的依赖并配置一个数据源对象供开发人员调用。</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>打开 pom.xml 文件，可以看到一个 parent 属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该项目依赖父项目：spring-boot-starter-parent，按住 Ctrl 键并点击 spring-boot-starter-parent，进入 spring-boot-starter-parent-2.5.3.pom 文件，部分源码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Parent pom providing dependency and plugin management for applications built with Maven<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource.delimiter</span>&gt;</span>@<span class="tag">&lt;/<span class="name">resource.delimiter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该文件仅仅定义了 JDK 所需版本为 1.8、项目的默认编码 UTF-8 和 Maven 项目编译设置，并且它也依赖一个父项目：spring-boot-dependencies。</p><p>进入 spring-boot-dependencies-2.5.3.pom 文件中，部分源码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Boot Dependencies<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://spring.io/projects/spring-boot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.apache.org/licenses/LICENSE-2.0<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">email</span>&gt;</span>info@pivotal.io<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">organization</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>https://www.spring.io<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/spring-projects/spring-boot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.16.2<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.90<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.17.0<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.19.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">awaitility.version</span>&gt;</span>4.0.3<span class="tag">&lt;/<span class="name">awaitility.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build-helper-maven-plugin.version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">byte-buddy.version</span>&gt;</span>1.10.22<span class="tag">&lt;/<span class="name">byte-buddy.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caffeine.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">caffeine.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cassandra-driver.version</span>&gt;</span>4.11.2<span class="tag">&lt;/<span class="name">cassandra-driver.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classmate.version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">classmate.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.15<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-dbcp2.version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">commons-dbcp2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-lang3.version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">commons-lang3.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-pool.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">commons-pool.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-pool2.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">commons-pool2.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该文件定义了大量依赖信息，如 commons 相关依赖、log 相关依赖、数据库相关依赖、Spring 相关依赖、ElasticSearch 搜索引擎相关依赖、消息队列相关依赖等。这就是 Spring Boot 项目依赖的版本管理中心。版本管理中心默认配置好大部分依赖的版本信息，这些版本信息随着 Spring Boot 版本的更新而更改。这种设计让开发者导入依赖包时不需要写版本号，但如果不是 dependencies 中默认管理的依赖，就需要声明版本号。</p><p>结合 Spring Boot 约定优于配置的特性，可以这样理解：Spring Boot 为开发者设置了默认编码、默认 JDK 版本及 Maven 编译的默认设置，同时维护了一套项目依赖的配置，相关依赖可以直接导入，并不需要声明版本号。这就是 Spring Boot 与开发者之间的约定，如果认可这个约定就可以减少一些基本配置和依赖配置；如果不认可也可以自行配置，这些配置会覆盖默认配置。</p><p>在 pom.xml 文件中还有一个 spring-boot-starter-web，即在创建项目时选择的 Web 模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开 spring-boot-starter-web-2.5.3.pom 文件，可以发现 Spring MVC 所需的依赖和内置的 Tomcat 依赖都已经定义在文件中，这就是为什么仅仅在 pom.xml 文件中加入 spring-boot-starter-web 场景启动器就可以进行 Web 项目的开发。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBootApplication-注解分析"><a href="#SpringBootApplication-注解分析" class="headerlink" title="@SpringBootApplication 注解分析"></a>@SpringBootApplication 注解分析</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p><code>@SpringBootApplication</code> 标注在一个主程序类上，说明这是一个 Spring Boot 应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 启动Spring应用</span></span><br><span class="line">        SpringApplication.run(MallApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按住 Ctrl 并点击  <code>@SpringBootApplication</code>，查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 <code>@SpringBootApplication</code> 注解是一个复合注解，前面四个是 Java 元注解：</p><ul><li>@Target({ElementType.TYPE})：类、接口和 enum 声明；</li><li>@Retention(RetentionPolicy.RUNTIME)：运行时注解；</li><li>@Documented：将注解添加到 Java doc 中；</li><li>@Inherited：允许继承。</li></ul><p>重要的是后面三个注解：</p><ul><li>@SpringBootConfiguration：Spring Boot 配置注解；</li><li>@EnableAutoConfiguration：启动自动配置注解；</li><li>@ComponentScan：组件自动扫描注解。</li></ul><p>Java 元注解并无特殊意义，因此如果主程序中不使用 <code>@SpringBootApplication</code> 注解，也可以替换成后三个注解，效果是一样的。</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><p>表示某个类是一个 Spring Boot 的配置类。</p><p>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration 注解主要用于定义配置类，替代 XML 配置文件。</p><p> @SpringBootConfiguration 注解仅仅是对 @Configuration 注解进行了包装，本质上依然是 @Configuration 注解。</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>表示开启自动配置功能。自动配置是“约定大于配置”设计思想的主要体现， 而 @EnableAutoConfiguration 注解是这个功能的入口。</p><p>查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 AutoConfigurationImportSelector 这个类注册到 Spring 的 IOC容器中，AutoConfigurationImportSelector 可以帮助 Spring Boot 应用将所有符合条件的 @Configuration 配置都加载到当前 Spring Boot 使用的 IOC 容器中。</p><h3 id="AutoConfigurationImportSelector-class"><a href="#AutoConfigurationImportSelector-class" class="headerlink" title="AutoConfigurationImportSelector.class"></a>AutoConfigurationImportSelector.class</h3><p>该类是整个自动配置的核心实现，它负责把返回自动配置的相关组件名称注册到 IOC 容器中，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">protected</span> AutoConfigurationImportSelector.<span class="function">AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">            <span class="comment">// 获取自动装配配置项</span></span><br><span class="line">            List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">            <span class="comment">// 去重</span></span><br><span class="line">            configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">            <span class="comment">// 获取停用配置项</span></span><br><span class="line">            Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">            <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">            <span class="comment">// 移除停用配置项</span></span><br><span class="line">            configurations.removeAll(exclusions);</span><br><span class="line">            configurations = <span class="keyword">this</span>.getConfigurationClassFilter().filter(configurations);</span><br><span class="line">            <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">            <span class="comment">// 返回所有的自动装配配置</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends Group&gt; getImportGroup() &#123;</span><br><span class="line">        <span class="keyword">return</span> AutoConfigurationImportSelector.AutoConfigurationGroup.class;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否开启自动配置，默认为true</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass() == AutoConfigurationImportSelector.class ? (Boolean)<span class="keyword">this</span>.getEnvironment().getProperty(<span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>, Boolean.class, <span class="keyword">true</span>) : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AnnotationAttributes <span class="title">getAttributes</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        String name = <span class="keyword">this</span>.getAnnotationClass().getName();</span><br><span class="line">        AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(name, <span class="keyword">true</span>));</span><br><span class="line">        Assert.notNull(attributes, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No auto-configuration attributes found. Is &quot;</span> + metadata.getClassName() + <span class="string">&quot; annotated with &quot;</span> + ClassUtils.getShortName(name) + <span class="string">&quot;?&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> attributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getAnnotationClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>其中 <code>getCandidateConfigurations</code> 方法会调用 <code>SpringFactoriesLoader.loadFactoryNames</code> 获取所有自动配置类的类名。SpringFactoriesLoader 类源码此处省略。</p><p>从源码可以看出：Spring Boot 启动时从类路径 META-INF/spring.factories 中获取 EnableAutoConfiguration 指定的配置项，过滤后将这些值作为自动配置类导入容器中。</p><p>有哪些自动配置类项？</p><p><img src="0.png" alt=""></p><p>可以查看 spring.factories 文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Initializers</span></span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="section"># Auto Configure</span></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>org.springframework.boot.autoconfigure.EnableAutoConfiguration 配置项定义的就是 Spring Boot 默认加载的所有自动配置类。如果 pom.xml 文件没有引入相应的 jar 包和依赖，部分自动配置无法生效。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>在 Spring IOC 容器中 @Controller、@Service、@Repository、@Component 等注解的默认装配标识是 @ComponentScan 注解。</p><p> @ComponentScan 注解的作用就是让 Spring 容器从对应包下获取需要注册的类，开发者通过注解来定义哪些包需要被自动扫描并装配。Spring 将会在被指定的包及其子包中寻找标注了 @ComponentScan 注解的 Bean 并注册到容器中。</p><h2 id="SpringApplication-启动流程"><a href="#SpringApplication-启动流程" class="headerlink" title="SpringApplication 启动流程"></a>SpringApplication 启动流程</h2><p>Spring Boot 项目通过运行启动类中的 run() 方法来启动应用，查看其源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先实例化SpringApplication</span></span><br><span class="line">        <span class="keyword">return</span> run(<span class="keyword">new</span> Class[]&#123;primarySource&#125;, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 再执行run()方法</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> SpringApplication(primarySources)).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最终执行的run()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        <span class="comment">// 代码执行时间监控开启</span></span><br><span class="line">        stopWatch.start();</span><br><span class="line">        DefaultBootstrapContext bootstrapContext = <span class="keyword">this</span>.createBootstrapContext();</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 配置Headless属性，默认为true</span></span><br><span class="line">        <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line">        <span class="comment">// 获取SpringApplicationRunListener集合</span></span><br><span class="line">        SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">        <span class="comment">// 调用所有SpringApplicationRunListener对象的starting()方法</span></span><br><span class="line">        listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建ApplicationArguments对象</span></span><br><span class="line">            ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">            <span class="comment">// 创建Environment对象，加载属性配置</span></span><br><span class="line">            ConfigurableEnvironment environment = <span class="keyword">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">            <span class="comment">// 设置系统参数</span></span><br><span class="line">            <span class="keyword">this</span>.configureIgnoreBeanInfo(environment);</span><br><span class="line">            <span class="comment">// 获取需要打印的Spring Boot Banner</span></span><br><span class="line">            Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line">            <span class="comment">// 创建Spring容器ApplicationContext</span></span><br><span class="line">            context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line">            context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">            <span class="comment">// 准备容器</span></span><br><span class="line">            <span class="keyword">this</span>.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">            <span class="comment">// 刷新容器</span></span><br><span class="line">            <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line">            <span class="comment">// 执行容器初始化的后置逻辑</span></span><br><span class="line">            <span class="keyword">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">            <span class="comment">// 代码执行时间监控结束</span></span><br><span class="line">            stopWatch.stop();</span><br><span class="line">            <span class="comment">// 打印Spring Boot的启动时长日志</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">                (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(<span class="keyword">this</span>.getApplicationLog(), stopWatch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发布容器启动事件</span></span><br><span class="line">            listeners.started(context);</span><br><span class="line">            <span class="comment">// 调用启动方法</span></span><br><span class="line">            <span class="keyword">this</span>.callRunners(context, applicationArguments);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, var10, listeners);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var10);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            listeners.running(context);</span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, var9, (SpringApplicationRunListeners)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var9);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>Spring Boot 项目启动步骤：</strong></p><p>$(1)$ 实例化 SpringApplication 对象。</p><p>SpringApplication 类的构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 设置当前应用类型</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 加载ApplicationContextInitializer，配置在META-INF/spring.factories文件中</span></span><br><span class="line">    <span class="keyword">this</span>.bootstrapRegistryInitializers = <span class="keyword">this</span>.getBootstrapRegistryInitializersFromSpringFactories();</span><br><span class="line">    <span class="keyword">this</span>.setInitializers(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 加载ApplicationListener</span></span><br><span class="line">    <span class="keyword">this</span>.setListeners(<span class="keyword">this</span>.getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = <span class="keyword">this</span>.deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webApplicationType 值的设置是为了获取当前应用的类型，对后续构造容器环境和 Spring 容器的初始化起作用。deduceFromClasspath() 方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WebApplicationType</span> </span>&#123;</span><br><span class="line">    NONE,</span><br><span class="line">    SERVLET,</span><br><span class="line">    REACTIVE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_INDICATOR_CLASSES = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;javax.servlet.Servlet&quot;</span>, <span class="string">&quot;org.springframework.web.context.ConfigurableWebApplicationContext&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEBMVC_INDICATOR_CLASS = <span class="string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEBFLUX_INDICATOR_CLASS = <span class="string">&quot;org.springframework.web.reactive.DispatcherHandler&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JERSEY_INDICATOR_CLASS = <span class="string">&quot;org.glassfish.jersey.servlet.ServletContainer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> WebApplicationType <span class="title">deduceFromClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">&quot;org.springframework.web.reactive.DispatcherHandler&quot;</span>, (ClassLoader)<span class="keyword">null</span>) &amp;&amp; !ClassUtils.isPresent(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span>, (ClassLoader)<span class="keyword">null</span>) &amp;&amp; !ClassUtils.isPresent(<span class="string">&quot;org.glassfish.jersey.servlet.ServletContainer&quot;</span>, (ClassLoader)<span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> REACTIVE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] var0 = SERVLET_INDICATOR_CLASSES;</span><br><span class="line">            <span class="keyword">int</span> var1 = var0.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var2 = <span class="number">0</span>; var2 &lt; var1; ++var2) &#123;</span><br><span class="line">                String className = var0[var2];</span><br><span class="line">                <span class="keyword">if</span> (!ClassUtils.isPresent(className, (ClassLoader)<span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> NONE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> SERVLET;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webApplicationType 值有 $3$ 个：</p><ol><li>SERVLET：Servlet 环境；</li><li>REACTIVE：Reactive 环境；</li><li>NONE：非 Web 环境。</li></ol><p>deduceFromClasspath() 方法多次调用 ClassUtils.isPresent() 方法，先判断 webflux 相关类是否存在，存在则认为当前应用为 REACTIVE 类型；不存在则继续判断 SERVLET 相关类是否存在，若存在则当前应用为 SERVLET 类型；不存在则为 NONE 类型。</p><p>$(2)$ 开始执行 <code>run()</code> 方法，代码执行时间的监控开启，Spring Boot 应用启动成功后会打印启动时间。</p><p>$(3)$ 配置 headless 属性，java.awt.headless 是 J2SE 的一种模式，用于在缺失显示屏、鼠标或键盘时的系统配置，默认为 true。作用是没有检测到显示器也能继续执行后续步骤。</p><p>$(4)$ 获取  SpringApplicationRunListeners；</p><p>$(5)$ 回调 SpringApplicationRunListener 对象的 <code>starting()</code> 方法；</p><p>$(6)$ 解析 <code>run()</code> 方法的 args 参数并封装为 DefaultApplicationArguments 类；</p><p>$(7)$ 为当前应用准备一个 Environment 对象，即运行环境；</p><p>$(8)$ 设置系统参数；</p><p>$(9)$ 获取需要打印的 Spring Boot Banner 对象。默认打印在控制台上，Spring Boot 目前支持图片 Banner 和文字 Banner。</p><p>$(10)$ 创建 Spring 容器 ApplicationContext。根据 webApplicationType 决定创建哪种 contextClass。</p><p>$(11)$ 准备 ApplicationContext 实例。至此，主启动类加载完成，容器准备好。</p><p>$(12)$ 刷新容器；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">        <span class="comment">// 注册一个Hook函数，作用是监听JVM在关闭时销毁的IOC容器</span></span><br><span class="line">        shutdownHook.registerApplicationContext(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.refresh(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先注册一个 Hook 函数，然后调用 refresh() 方法，经过层层调用，最终执行 AbstractApplicationContext 的 refresh() 方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        StartupStep contextRefresh = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.refresh&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化上下文环境</span></span><br><span class="line">        <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">        <span class="comment">// 初始化BeanFactory</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">        <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">            StartupStep beanPostProcess = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行BeanFactory的后置处理器</span></span><br><span class="line">            <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 执行Bean的后置处理器</span></span><br><span class="line">            <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">            beanPostProcess.end();</span><br><span class="line">            <span class="comment">// 初始化MessageSource组件</span></span><br><span class="line">            <span class="keyword">this</span>.initMessageSource();</span><br><span class="line">            <span class="comment">// 初始化ApplicationContext事件广播器</span></span><br><span class="line">            <span class="keyword">this</span>.initApplicationEventMulticaster();</span><br><span class="line">            <span class="keyword">this</span>.onRefresh();</span><br><span class="line">            <span class="comment">// 注册监听器，BeanFactory创建完成</span></span><br><span class="line">            <span class="keyword">this</span>.registerListeners();</span><br><span class="line">            <span class="comment">// 初始化剩余的单例Bean</span></span><br><span class="line">            <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            <span class="comment">// 完成容器的创建工作</span></span><br><span class="line">            <span class="keyword">this</span>.finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException var10) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var10);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">            <span class="keyword">this</span>.cancelRefresh(var10);</span><br><span class="line">            <span class="keyword">throw</span> var10;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.resetCommonCaches();</span><br><span class="line">            contextRefresh.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是 Spring Bean 加载的核心，用于刷新整个 Spring 上下文信息，定义加载流程。</p><p>$(13)$ 调用 <code>afterRefresh()</code> 方法，执行 Spring 容器初始化的后置逻辑，默认实现是一个空的方法；</p><p>$(14)$ 代码执行时间的监控停止，知道启动应用花费的时间；</p><p>$(15)$ 发布容器启动事件；</p><p>$(16)$ 在 ApplicationContext 完成启动后，程序会对 ApplicationRunner 和 CommandLineRunner 进行回调处理，查找当前 ApplicationContext 中是否注册有 CommandLineRunner，如果有则遍历执行它们。</p><p>CommandLineRunner 接口的组件会在所有 Spring Beans 初始化之后，SpringApplication.run() 之前执行，一般用于应用程序启动之初的加载数据工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Spring-MVC&quot;&gt;&lt;a href=&quot;#Spring-MVC&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC&quot;&gt;&lt;/a&gt;Spring MVC&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; cl</summary>
      
    
    
    
    <category term="SpringBoot" scheme="http://10185102110.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://10185102110.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目的创建</title>
    <link href="http://10185102110.github.io/2021/08/12/SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://10185102110.github.io/2021/08/12/SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA/</id>
    <published>2021-08-12T13:36:43.000Z</published>
    <updated>2021-08-28T04:49:43.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><ul><li><p>JDK 1.8.0_301</p><p><img src="sf.png" alt=""></p></li><li><p>Maven 3.8.1</p><p><img src="2[4}FJJ50D{Y@T1QG]D8ZMR.png" alt=""></p><p>由于每次下载新的依赖文件都需要通过外网访问 Maven 中央仓库，所以需要配置国内镜像。</p><p>进入 Maven 安装目录，打开 conf/settings.xml 配置文件，添加阿里云镜像仓库的链接：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 本地仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D://CS_Software//maven//LocalWare<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置阿里云镜像服务器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IntelliJ IDEA 2021.2 专业版</p><p>IDEA 编辑器自带 Maven 环境，将其设置为自己安装的 Maven 环境。</p><p><img src="D:\blog\source\_posts\Springboot项目的搭建\2.png" alt="2"></p></li></ul><h1 id="创建一个SpringBoot项目"><a href="#创建一个SpringBoot项目" class="headerlink" title="创建一个SpringBoot项目"></a>创建一个SpringBoot项目</h1><p>Spring 官方提供了 Spring Initializr 进行 Spring Boot 项目的初始化，如下图：</p><p><img src="awd.png" alt=""></p><p>添加依赖和 Starter：选择 Spring Web 依赖</p><p><img src="asdd.png" alt=""></p><p>创建完成，等待文件加载完毕</p><p><img src="adsadas.png" alt=""></p><p>src/main/java 表示 Java 程序开发目录，在该目录下进行业务代码的开发。</p><p>该目录下的 HelloWorldApplication 文件是程序主入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.avebai.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序主入口</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/main/resources 表示配置文件目录，主要用于存放静态文件、模板文件和配置文件。</p><p>static 目录用于存放静态资源文件，如 JavaScript 文件、图片、CSS 文件等。</p><p>templates 目录用于存放模板类文件，如 Thymeleaf 文件或 FreeMarker 文件。</p><p>src/main/test 表示测试类文件。</p><p>pom.xml 用于配置项目依赖。</p><p>运行主程序，效果如下图：</p><p><img src="trh.png" alt=""></p><p>可以看到 Tomcat 运行在 $8080$ 端口。</p><p>Tomcat：一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器。</p><p><img src="0.png" alt=""></p><p>该页面是 Spring Boot 项目的默认错误页面，404 错误。</p><h1 id="编写一个Web接口"><a href="#编写一个Web接口" class="headerlink" title="编写一个Web接口"></a>编写一个Web接口</h1><p>在主程序目录新建一个 package，命名为 controller，在 controller 下新建 class，命名为 HelloController。</p><p>实现一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.avebai.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的含义是处理请求为 /hello 的 GET 请求并返回一个字符串。</p><p>运行结果：</p><p><img src="1.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JDK 1.8.0_301&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;sf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="SpringBoot" scheme="http://10185102110.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="http://10185102110.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="http://10185102110.github.io/2021/08/11/Java%E5%9F%BA%E7%A1%80/"/>
    <id>http://10185102110.github.io/2021/08/11/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2021-08-11T02:44:18.000Z</published>
    <updated>2021-09-16T02:27:19.195Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>字节序是指多字节数据在计算机内存中存储或网络传输时个字节的存储顺序。通常有小端和大端两种方式。</p><ol><li>小端：低位字节存放在内存的低地址端，高位字节存放在内存的高地址端。</li><li>大端：高位字节存放在内存的低地址端，低位字节存放在内存的高地址端。</li></ol><p>Java 语言的字节序是<strong>大端</strong>。</p><h2 id="JDK-与-JRE"><a href="#JDK-与-JRE" class="headerlink" title="JDK 与 JRE"></a>JDK 与 JRE</h2><ol><li>JDK：Java 开发工具包 (Java Development Kit)，提供 Java 的开发环境和运行环境。</li><li>JRE：Java 运行环境 (Java Runtime Environment)，提供 Java 运行所需的环境，包括 Java 虚拟机、Java 核心类库和支持文件。</li></ol><p>JDK 包含 JRE。如果只运行 Java 程序，安装 JRE 即可，要编写 Java 程序需安装 JDK。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。</p><p>类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中，可以使用 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code> 这种方式来控制类的加载，该方法会返回一个 Class 对象。</p><p>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。反射机制使得 Java具有动态获取程序信息和动态调用对象方法的能力。</p><p>Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类：</p><ol><li><strong>Field</strong> ：可以使用 get() 和 set() 方法读取和修改类的成员变量；</li><li><strong>Method</strong> ：可以使用 invoke() 方法获取类的方法信息；</li><li><strong>Constructor</strong> ：可以用 Constructor 创建新的对象，获取类的构造方法。</li></ol><p>优点：</p><p>运行期类型的判断，class.forName() 动态加载类，提高代码的灵活度。</p><p>缺点：</p><p>（1）性能开销 ：反射涉及动态类型的解析，JVM 无法对这些代码进行优化。因此，反射操作的效率比非反射操作低得多，应避免在经常被执行的代码或对性能要求很高的程序中使用反射。</p><p>（2）安全限制 ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。</p><p>（3）内部暴露：由于反射允许代码执行一些在正常情况下不被允许的操作（比如：访问私有的属性和方法），所以使用反射可能会导致代码功能失调并破坏可移植性。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化：将 Java 对象转化为字节序列。</p><p>反序列化：将字节序列转化为 Java 对象。</p><p>应用场景：</p><p>Web 服务器中的 Session 会话对象，当有 $10$ 万用户并发访问，就有可能出现 $10$ 万个 Session 对象，显然这种情况内存可能是吃不消的。于是 Web 容器就会把一些 Session 先序列化，让他们离开内存空间，序列化到硬盘中，当需要调用时，再把保存在硬盘中的对象还原到内存中。</p><p>序列化与反序列化实现了 <strong>数据的持久化与进程通信间的对象传送</strong>，发送方需要把这个 Java 对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为 Java 对象。</p><p>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个User类，实现Serializable接口，并生成一个版本号</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String userId; </span><br><span class="line">    <span class="keyword">private</span> String userName; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userId, String userName)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.userId = userId; </span><br><span class="line">        <span class="keyword">this</span>.userName = userName; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类，来对该对象进行读写操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">my</span> </span>&#123; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 将User对象作为文本写入磁盘 </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObj</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        user user = <span class="keyword">new</span> user(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;AveBai&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:/Users/AveBai/Desktop/user.txt&quot;</span>)); </span><br><span class="line">            objectOutputStream.writeObject(user); </span><br><span class="line">            objectOutputStream.close(); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readObj</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:/Users/AveBai/Desktop/user.txt&quot;</span>)); </span><br><span class="line">            <span class="keyword">try</span> &#123; </span><br><span class="line">                Object object = objectInputStream.readObject(); </span><br><span class="line">                user user = (user) object; </span><br><span class="line">                System.out.println(user); </span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">            e.printStackTrace(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; </span><br><span class="line">        writeObj();</span><br><span class="line">        readObj(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>反序列化输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.user@180bc464</span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理：当想要给实现了某个接口的类中的方法，加一些额外的处理。比如加日志、事务等。</p><p>给类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，还在原来的基础上添加额外处理的新功能。这个代理类并不是定义好的，是动态生成的，具有解耦意义，灵活，扩展性强。</p><p>动态代理的应用：Spring 的 AOP 、加事务、加权限、加日志。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。包含在 java.lang.annotation 包中。</p><blockquote><p>元注解</p></blockquote><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能。其具体分为：</p><ul><li>@Retention: 定义该注解的生命周期。<ul><li>RetentionPolicy.SOURCE：注解在编译阶段丢弃，它们不会写入字节码。@Override, @SuppressWarnings 都属于这类注解。</li><li>RetentionPolicy.CLASS : 在类加载的时候丢弃，注解默认使用这种方式。</li><li>RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。自定义的注解通常使用这种方式。</li></ul></li><li>@Target：表示注解作用的范围。 </li><li>@Documented：表示是否将注解信息添加在 java 文档中。 </li><li>@Inherited：@Inherited 修饰的注解修饰一个父类，如果它的子类没有被其他注解修饰，则它的子类也继承父类的注解。 </li><li>@Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但每次注解可以代表不同的含义。</li></ul><p><strong>注解的作用</strong></p><ol><li>生成文档。这是最常见的，也是 Java 最早提供的注解。常用的有 @param @return 等</li><li>跟踪代码依赖性，实现替代配置文件功能。</li><li>在编译时进行格式检查。如@override 放在方法前，如果该方法并没有覆盖超类方法，则编译时就能检查出。</li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Java-中的参数传递是传值还是传引用？"><a href="#Java-中的参数传递是传值还是传引用？" class="headerlink" title="Java 中的参数传递是传值还是传引用？"></a>Java 中的参数传递是传值还是传引用？</h2><p>Java 的参数是以值传递的形式传入方法中，而不是引用传递。</p><ul><li><p>基本类型作为参数传递时，是传递值的拷贝，无论你怎么改变这个拷贝，原值是不会改变的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;before change, i = &quot;</span>+i);</span><br><span class="line">        change(i);</span><br><span class="line">        System.out.println(<span class="string">&quot;after change, i = &quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        i = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before change, i = 1</span><br><span class="line">after change, i = 1</span><br></pre></td></tr></table></figure></li><li><p>对象作为参数传递时，是把对象在内存中的地址的拷贝传给参数。</p><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;before change, s is &quot;</span>+s.toString());</span><br><span class="line">        change(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;after change, s is &quot;</span>+s.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer stringBuffer)</span></span>&#123;</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;World !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before change, s is Hello </span><br><span class="line">after change, s is Hello World !</span><br></pre></td></tr></table></figure><p>可见 s 指向的对象的值被改变了，那么是否可以推论出，在Java中，当对象作为参数传递时，传递的是该对象的引用呢？再看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer s = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;before change, s is &quot;</span>+s.toString());</span><br><span class="line">        change(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;after change, s is &quot;</span>+s.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer stringBuffer)</span></span>&#123;</span><br><span class="line">        stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;Hi &quot;</span>);</span><br><span class="line">        stringBuffer.append(<span class="string">&quot;World !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上面的推论是正确的，即传递的是对象的引用，那么在调用 change 函数之后，原对象的值应该是会改变的，变为 “Hi World ！”，但运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before change, s is Hello </span><br><span class="line">after change, s is Hello </span><br></pre></td></tr></table></figure><p>当执行 <code>StringBuffer sb = new StringBuffer(“Hello “)</code> 时，创建了一个指向新建对象 <code>“Hello “</code> 的引用 <code>“s”</code>。在例 1 中，调用 change 函数后，实际上，形参 stringBuffer 也指向了实参 s 所指向的对象，那么执行 <code>stringBuffer.append(“world !”)</code> 后，便通过对象的引用 “stringBuffer” 修改了对象的值，使之变成 “Hello world ！”。但是在例 2 中又新建了一个对象 <code>“new StringBuffer(“Hi “)”</code>，让形参 stringBuffer 实际指向了这个新建的对象，并将新对象的值设置为 “Hi World ！”，但是因为值没有被 return 返回赋值给 s 对象，所以 s 对象并没有被改变，所以输出的仍然是 “Hello ”。</p></li></ul><h2 id="Java-中的-IO-流的分类？"><a href="#Java-中的-IO-流的分类？" class="headerlink" title="Java 中的 IO 流的分类？"></a>Java 中的 IO 流的分类？</h2><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流 和 字符流。</p><p>字节流：InputStream/OutputStream 是字节流的抽象类。</p><p>字符流：Reader/Writer 是字符的抽象类。</p><p>字节流按 $8$ 位传输，以字节为单位输入输出数据，字符流按 $16$ 位传输，以字符为单位输入输出数据。</p><p>但是不管文件读写还是网络发送接收，信息的最小存储单元都是字节。</p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li><p>修饰类：表示类不可被继承；</p></li><li><p>修饰方法：表示方法不可被子类覆盖，但可以重载；</p></li><li><p>修饰变量：表示变量一旦被赋值就不可以更改它的值。</p><p>$(1)$ 修饰类变量：只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。</p><p>$(2)$ 修饰成员变量：可以在非静态初始化块声明该变量或者构造器中执行初始值。</p><p>$(3)$ 修饰局部变量：系统不会为局部变量初始化，必须由程序员显式初始化。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">my</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;<span class="comment">//类变量：在声明的时候赋值 或者 静态代码块赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">0</span>;<span class="comment">//成员变量：在声明的时候赋值 或者 构造器赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> local; <span class="comment">// 局部变量</span></span><br><span class="line">        local = <span class="number">0</span>; <span class="comment">// 使用之前一定要赋值</span></span><br><span class="line">        <span class="comment">//local = 1; 不允许第二次赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   $(4)$ 修饰基本数据类型的变量：数值初始化后不能修改。<br>   $(5)$ 修饰引用类型的变量：初始化后不能指向另一个变量，但是引用的值是可变的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] mylist = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">mylist[<span class="number">2</span>] = -<span class="number">3</span>; <span class="comment">// 合法</span></span><br><span class="line">mylist = <span class="keyword">null</span>; <span class="comment">// 非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Person p = <span class="keyword">new</span> Person(<span class="number">25</span>);</span><br><span class="line">p.setAge(<span class="number">24</span>); <span class="comment">// 合法</span></span><br><span class="line">p = <span class="keyword">null</span>; <span class="comment">// 非法</span></span><br></pre></td></tr></table></figure><h3 id="为什么局部内部类和匿名内部类只能访问局部-final-变量？"><a href="#为什么局部内部类和匿名内部类只能访问局部-final-变量？" class="headerlink" title="为什么局部内部类和匿名内部类只能访问局部 final 变量？"></a>为什么局部内部类和匿名内部类只能访问局部 final 变量？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 局部final变量a,b</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPrint</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inclass</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">                System.out.println(age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> InClass().InPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类和外部类是同一级别的，比如 Test 类编译之后会生成两个 class文件：Test.class、Test1.class。内部类不会因为定义在方法中而随着方法执行完毕就被销毁。当外部类的方法结束时，局部变量会被销毁，但是内部类对象可能还存在(没人引用时才死亡)，这时就出现了矛盾：内部类对象访问了一个不存在的变量。为解决这个问题，将方法中的局部变量复制一份作为内部类的成员变量，当局部变量被销毁，内部类还可以访问它的 “copy”。将局部变量设置为 final，内部类就无法修改这个变量，可以保证内部类的成员变量和方法中的局部变量保持一致。</p><h3 id="final、finally-和-finalize-的区别"><a href="#final、finally-和-finalize-的区别" class="headerlink" title="final、finally 和 finalize 的区别"></a>final、finally 和 finalize 的区别</h3><ol><li><p>final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。</p></li><li><p>finally 作为异常处理的一部分，只能在 try/catch 语句中使用，finally 附带一个语句块表示这个语句最后执行(在 return 之前执行)，经常被用在需要释放资源的情况下。</p><p><strong>当遇到下面情况 finally 代码块不会执行</strong>：</p><ul><li>当程序在进入 try 语句块之前就出现异常时会直接结束。</li><li>当程序在 try 块中强制退出时，如使用 System.exit(0)。</li></ul></li><li><p>finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize() 方法。当垃圾回收器准备好释放对象占用空间时，首先会调用finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存。</p></li></ol><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p><strong>1. 静态变量</strong> </p><p>静态变量在内存中只存在一份，只在类第一次实例化时初始化一次。</p><ul><li>静态变量：静态变量在内存中仅有一个拷贝，类所有的实例都共享静态变量，可以直接通过类名来访问它；</li><li>实例变量：每创建一个实例就会产生一个实例变量，它与该实例同生共死。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;        <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> y;  <span class="comment">// 静态变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 静态方法</strong> </p><p>在类中使用 static 修饰的静态方法会随着类的定义而被分配和装载入内存中；而非静态方法属于对象的具体实例，只有在类的对象创建时在对象的内存中才有这个方法的代码段。</p><p>非静态方法既可以访问静态数据成员 又可以访问非静态数据成员，而静态方法只能访问静态数据成员；<br>非静态方法既可以访问静态方法又可以访问非静态方法，而静态方法只能访问静态数据方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        System.out.println(S.getStatic());<span class="comment">//使用类名加前缀访问静态方法</span></span><br><span class="line">        S s=<span class="keyword">new</span> S();</span><br><span class="line">        System.out.println(s.getStatic());<span class="comment">//使用实例化对象名访问静态方法</span></span><br><span class="line">        System.out.println(s.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态初始器：由static和&#123;&#125;组成，只在类装载时（第一次使用类）执行一次，用来初始化静态变量。</span></span><br><span class="line">        <span class="keyword">static</span>&#123;</span><br><span class="line">            a=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法只能访问静态数据成员</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatic</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> a;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getT</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> t;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非静态方法可以访问静态方法和非静态方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            getT();</span><br><span class="line">            getStatic();</span><br><span class="line">            t=a;<span class="comment">//非静态方法可以访问非静态数据成员和静态数据成员</span></span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3. 静态语句块</strong> </p><p>静态语句块和静态变量一样在类第一次实例化时运行一次。</p><p><strong>4. 初始化顺序</strong> </p><p>静态数据优先于其它数据的初始化，静态变量和静态语句块的运行顺序取决于它们在代码中的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String staticField = <span class="string">&quot;静态变量&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;静态语句块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例变量和普通语句块的初始化在静态变量和静态语句块初始化结束之后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String field = <span class="string">&quot;实例变量&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;普通语句块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后才是构造函数中的数据进行初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InitialOrderTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在继承的情况下，初始化顺序为：</p><ol><li>父类（静态变量、静态语句块）</li><li>子类（静态变量、静态语句块）</li><li>父类（实例变量、普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量、普通语句块）</li><li>子类（构造函数）</li></ol><h1 id="Object-通用方法"><a href="#Object-通用方法" class="headerlink" title="Object 通用方法"></a>Object 通用方法</h1><p>Object 里面有的方法，所有类都是继承 Object，所以“所有对象都有这些方法”。</p><blockquote><p>Java 中创建对象的几种方式？</p></blockquote><ul><li>使用 new 关键字；</li><li>反射，使用 Class 类的 newInstance 方法，该方法调用无参的构造器创建对象；</li><li>使用 clone() 方法；</li><li>反序列化。</li></ul><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><h3 id="equals-与-的区别"><a href="#equals-与-的区别" class="headerlink" title="equals() 与 == 的区别"></a>equals() 与 == 的区别</h3><ul><li>对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。</li><li>对于引用类型，== 判断两个实例是否引用同一个对象，而 equals() 判断引用对象的值是否相等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line">System.out.println(x == y);      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>重写</strong></p><p>以 Dog 类为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == obj) <span class="comment">// 判断地址是否相同</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">null</span>) <span class="comment">// 判断对象是否为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(getClass()!=obj.getClass()) <span class="comment">// getClass()可以得到类对象，判断类型是否一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Dog other = (Dog) obj;</span><br><span class="line">    <span class="keyword">if</span>(age!=other.age) <span class="comment">// 判断属性值是否一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 如果地址相同，对象不为空，类型一样，属性值一样则返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>obj.getClass()</code> 得到的类对象和类的对象不同，前者得到的是类的定义，后者是实例化的具体类。</p><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h2><p>哈希码是通过哈希算法生成的一个字符串，它是用来<strong>唯一</strong>区分我们对象的地址码。</p><p>理想的散列函数应当具有均匀性，即不相等的实例应当均匀分不到所有可能的散列值上。</p><h3 id="两个对象的-hashCode-相同，则-equals-也一定为-true-吗？"><a href="#两个对象的-hashCode-相同，则-equals-也一定为-true-吗？" class="headerlink" title="两个对象的 hashCode() 相同，则 equals() 也一定为 true 吗？"></a>两个对象的 hashCode() 相同，则 equals() 也一定为 true 吗？</h3><p>hasCode() 返回散列值，而 equals() 是用来判断两个实例是否相等。相等的两个实例散列值一定要相同，但是散列值相同的两个实例不一定相等。</p><h3 id="为什么重写-equals-就一定要重写-hashCode-方法？"><a href="#为什么重写-equals-就一定要重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 就一定要重写 hashCode() 方法？"></a>为什么重写 equals() 就一定要重写 hashCode() 方法？</h3><p>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证相等的两个实例散列值也相等。如果没有重写 hasCode()，则两个对象无论如何都不会相等，即使它们指向相同的数据。</p><p>这个问题应该是有个前提，就是你需要用到 HashMap、HashSet 等 Java 集合，用不到哈希表的话，其实仅仅重写 equals() 方法也可以。而工作中的场景是常常用到 Java 集合，所以 Java 官方建议重写 equals() 就一定要重写 hashCode() 方法。</p><p>对于对象集合的判重，如果一个集合含有大量对象实例，仅仅使用 equals() 方法的话，那么对于一个对象判重就需要比较很多次，随着集合规模的增大，时间开销很大。但是同时使用哈希表的话，就能快速定位到对象的大概存储位置，并且在后续比较过程中，如果两个对象的 hashCode 不相同，就不需要调用 equals() 方法，从而大大减少了 equals() 比较次数。</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>Object 类的 <code>toString</code> 方法返回一个字符串，该字符串由类名、@和此对象哈希码的无符号十六进制表示组成。换句话说，该方法返回一个字符串，它的值等于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + <span class="string">&#x27;@&#x27;</span> + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure><p>它通常只是为了方便输出，比如 System.out.println(xx)，括号里面的 “xx” 如果不是 String 类型的话，就自动调用 xx 的 toString() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;this is A&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    A obj = <span class="keyword">new</span> A();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：this is A</span></span><br><span class="line"><span class="comment">// 如果去掉重写的toString，会输出：MyType$A@1e643faf</span></span><br></pre></td></tr></table></figure><p>打印 StringBuffer 类型必须用 toString，自动调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StringBuffer MyStrBuff = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">MyStrBuff.append(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">System.out.println(MyStrBuff.toString());</span><br><span class="line">System.out.println(MyStrBuff);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//Hello!</span></span><br><span class="line"><span class="comment">//Hello!</span></span><br></pre></td></tr></table></figure><h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p><strong>1. cloneable</strong> </p><p>clone() 是 Object 的受保护方法，这意味着，如果一个类不显式去重载 clone() 就没有这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">&#125;</span><br><span class="line">CloneExample e1 = <span class="keyword">new</span> CloneExample();</span><br><span class="line">CloneExample e2 = e1.clone(); <span class="comment">// &#x27;clone()&#x27; has protected access in &#x27;java.lang.Object&#x27;</span></span><br></pre></td></tr></table></figure><p>接下来重载 Object 的 clone() 得到以下实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MyType <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (MyType)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">MyType e1 = <span class="keyword">new</span> MyType();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MyType e2 = e1.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。</p><p><strong>2. 深拷贝与浅拷贝</strong> </p><ul><li>浅拷贝：拷贝实例和原始实例的引用类型引用同一个对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MyType <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (MyType) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyType e1 = <span class="keyword">new</span> MyType();</span><br><span class="line">MyType e2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    e2 = e1.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e1.set(<span class="number">2</span>, <span class="number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="number">2</span>)); <span class="comment">// 222</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>深拷贝：拷贝实例和原始实例的引用类型引用不同对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MyType <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    MyType result = (MyType) <span class="keyword">super</span>.clone();</span><br><span class="line">        result.arr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            result.arr[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyType e1 = <span class="keyword">new</span> MyType();</span><br><span class="line">MyType e2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    e2 = e1.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e1.set(<span class="number">2</span>, <span class="number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyType</span><span class="params">(MyType original)</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[original.arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; original.arr.length; i++) &#123;</span><br><span class="line">            arr[i] = original.arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        arr[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyType e1 = <span class="keyword">new</span> MyType();</span><br><span class="line">MyType e2 = <span class="keyword">new</span> MyType(e1);</span><br><span class="line">e1.set(<span class="number">2</span>, <span class="number">222</span>);</span><br><span class="line">System.out.println(e2.get(<span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>概念：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>Java 中有三个访问权限修饰符：private、protected 以及 public。</p><p>可以对类或类中的成员（字段以及方法）加上访问修饰符。</p><ul><li>成员可见表示其它类可以用这个类的实例访问到该成员；</li><li>类可见表示其它类可以用这个类创建对象。</li></ul><p>protected：子类可以用它修饰的成员。</p><p>private：访问权限仅限于类的内部，是一种封装的体现。</p><p>default：有时也称为friendly，任何处于本包下的类、接口、异常等，都可以相互访问。</p><div class="table-container"><table><thead><tr><th></th><th>类内部</th><th>本包</th><th>子类</th><th>外部包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><p>如果子类的方法覆盖了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例。</p><p>字段绝不能是公有的，因为这么做的话就失去了对这个实例域修改行为的控制，客户端可以对其随意修改。可以使用共有的 getter 和 setter 方法来替换共有字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是也有例外，如果是包级私有的类或者私有的嵌套类，那么直接暴露成员不会有特别大的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessWithInnerClassExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InnerClass innerClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccessWithInnerClassExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        innerClass = <span class="keyword">new</span> InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> innerClass.x; <span class="comment">// 直接访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><ul><li>this关键字<strong>代表当前对象</strong></li></ul><p>　　this.属性 操作当前对象的属性</p><p>　　this.方法 调用当前对象的方法。</p><ul><li><p>封装对象的属性的时候，经常会使用this关键字。</p></li><li><p>当 getter 和 setter 函数参数名和成员函数名重合的时候，可以使用 this 区别。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScreen</span><span class="params">(<span class="keyword">float</span> screen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.screen = screen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类 (Inner Class) 就是定义在另外一个类里面的类。</p><ul><li>内部类提供了<strong>更好的封装</strong>，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类。</li><li>内部类的方法可以<strong>直接访问外部类的所有数据</strong>，包括私有的数据。</li><li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便。</li></ul><p>内部类可分为以下几种： </p><ul><li><p>成员内部类</p><p>最常见，也称为普通内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">99</span>; <span class="comment">// 外部类的私有属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问内部类中的a：&quot;</span>+a);</span><br><span class="line">            System.out.println(<span class="string">&quot;this访问内部类中的a：&quot;</span>+<span class="keyword">this</span>.a);</span><br><span class="line">            System.out.println(<span class="string">&quot;this访问外部类中的a：&quot;</span>+Outer.<span class="keyword">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">        Inner i = o.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        i.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问外部类中的a：2</span><br><span class="line">this访问内部类中的a：2</span><br><span class="line">访问外部类中的a：99</span><br></pre></td></tr></table></figure></li><li><p>静态内部类</p><p>静态内部类是 <strong>static 修饰的</strong>内部类，这种内部类的特点是：</p><ul><li>静态内部类不能直接访问外部类的非静态成员，但可以通过<strong>new 外部类().成员</strong>的方式访问。</li><li>如果外部类的静态成员与内部类的成员<strong>名称相同</strong>，可通过“<strong>类名.静态成员</strong>”访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称<strong>不相同</strong>，则可通过“<strong>成员名”</strong>直接调用外部类的静态成员。</li><li>创建静态内部类的对象时，不需要外部类的对象，可以直接创建 <strong>内部类 对象名= new 内部类();</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SOuter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">99</span>; <span class="comment">// 外部类的私有属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SInner</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>; <span class="comment">// 内部类的变量</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;访问外部类中的a：&quot;</span>+<span class="keyword">new</span> SOuter().a);</span><br><span class="line">            System.out.println(<span class="string">&quot;访问外部类中的b：&quot;</span>+SOuter.b);</span><br><span class="line">            System.out.println(<span class="string">&quot;访问内部类中的b：&quot;</span>+b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SInner si = <span class="keyword">new</span> SInner(); <span class="comment">// 直接创建内部类的对象</span></span><br><span class="line">        si.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问外部类中的a：99</span><br><span class="line">访问外部类中的b：1</span><br><span class="line">访问内部类中的b：2</span><br></pre></td></tr></table></figure></li><li><p>方法内部类</p><p>方法内部类就是内部类定义在外部类的<strong>方法中</strong>，方法内部类只在该方法的内部可见，即<strong>只在该方法内可以使用</strong>。因此方法内部类不能使用访问控制符和 static 修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MOuter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">13</span>;</span><br><span class="line"><span class="comment">// 方法内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MInner</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;访问外部类的方法中的a：&quot;</span>+a);</span><br><span class="line">                System.out.println(<span class="string">&quot;访问内部类中的c：&quot;</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">MInner mi = <span class="keyword">new</span> MInner();</span><br><span class="line">mi.print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MOuter e = <span class="keyword">new</span> MOuter();</span><br><span class="line">e.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问外部类的方法中的a：25</span><br><span class="line">访问内部类中的c：2</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类　　</p><p>匿名类是<strong>不能有名称的类</strong>，所以没办法引用他们。必须在创建时，作为<strong>new语句</strong>的一部分来声明他们。但使用匿名内部类还有个前提条件：<strong>必须继承一个父类或实现一个接口。</strong></p><p>匿名类的声明是在编译时进行的，实例化在运行时进行。这意味着 for 循环中的一个 new 语句会创建相同匿名类的几个实例，而不是创建几个不同匿名类的一个实例。</p><p>假如要执行的任务需要一个对象，但却不值得创建全新的对象，匿名类就显得很有用。</p><ul><li><p>匿名内部类的基本实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;eat something&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">p.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在接口上使用匿名内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyType</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;eat something&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">p.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在使用匿名内部类的过程中，需要注意如下几点：</p><ol><li>使用匿名内部类时，必须继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li><li>匿名内部类中是不能定义构造函数的。</li><li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li><li>匿名内部类为局部内部类（即方法内部类），所以局部内部类的所有限制同样对匿名内部类生效。</li><li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li></ol></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承是类与类的一种关系，是一种 “is a” 的关系。比如“狗”继承“动物”，这里动物类是狗类的父类或者基类，狗类是动物类的子类或者派生类。Java 中的继承是单继承，即一个类只有一个父类。</p><p>优点：子类拥有父类的所有属性和方法（除了 private 修饰的属性）从而实现代码的复用。</p><p><strong>重写</strong>：子类如果对继承的父类的方法不满意，可以自己编写继承的方法，这种方式就称为方法的重写。当调用方法时会优先调用子类的方法。</p><h2 id="重载与重写的区别"><a href="#重载与重写的区别" class="headerlink" title="重载与重写的区别"></a>重载与重写的区别</h2><ul><li>重载：发生在同一个类中的多态手段，方法名必须相同，参数列表不同(个数、顺序)，返回值和访问修饰符可以不同，发生在编译时。</li><li>重写：发生在父子类中，方法名、参数列表必须相同，返回值范围和抛出的异常范围小于等于父类，访问修饰符范围大于等于父类，如果父类方法访问修饰符为 private 则子类不能重写该方法。</li></ul><h3 id="是否可以重写一个-private-或者-static-方法？"><a href="#是否可以重写一个-private-或者-static-方法？" class="headerlink" title="是否可以重写一个 private 或者 static 方法？"></a>是否可以重写一个 private 或者 static 方法？</h3><p>Java 中 static 方法可以被继承但不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而 static 方法是编译时静态绑定的。</p><p>Java 中也不能覆盖 private 的方法，因为 private 修饰的变量和方法只能在当前类中使用， 如果是其他的类继承当前类是不能访问到 private 变量或方法的。</p><h2 id="多态的实现方式"><a href="#多态的实现方式" class="headerlink" title="多态的实现方式"></a>多态的实现方式</h2><ul><li><p>重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fu a =  <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure></li><li><p>重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String name,<span class="keyword">int</span> i)</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> i,String name)</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Smoking sk = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//学生是类，Smoking是接口 </span></span><br></pre></td></tr></table></figure></li><li><p>抽象类和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="comment">//Animal是父类抽象类</span></span><br></pre></td></tr></table></figure></li></ul><p>多态特点：</p><ol><li>方法成员变量、静态方法看父类</li><li>非静态方法编译时看父类，运行时看子类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fu method_1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fu method_2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">8</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;zi method_1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;zi method_2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(f.num);<span class="comment">//与父类一致</span></span><br><span class="line">        f.method1();<span class="comment">//与父类一致</span></span><br><span class="line">        f.method2();<span class="comment">//编译时与父类一致，运行时与子类一致</span></span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(z.num);</span><br><span class="line">        z.method1();</span><br><span class="line">        z.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">fu method<span class="emphasis">_1</span></span><br><span class="line"><span class="emphasis">zi method_</span>2</span><br><span class="line">8</span><br><span class="line">zi method<span class="emphasis">_1</span></span><br><span class="line"><span class="emphasis">zi method_</span>2</span><br></pre></td></tr></table></figure><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><p><strong>1. 抽象类</strong> </p><p>抽象类和抽象方法都使用 abstract 进行声明。</p><ul><li><p>抽象类不能被实例化，如果被实例化，编译无法通过。只有抽象类的非抽象子类可以创建对象。</p></li><li><p>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p></li><li><p>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</p></li><li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Telephone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>; <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类的普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">extends</span> <span class="title">Telephone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123; <span class="comment">//继承抽象类的子类必须重写抽象方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;重写抽象类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Telephone p = <span class="keyword">new</span> Phone();</span><br><span class="line">        p.call();</span><br><span class="line">        p.message();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重写抽象类的方法</span><br><span class="line">抽象类的普通方法</span><br></pre></td></tr></table></figure><p><strong>2. 接口</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口定义的语法</span></span><br><span class="line">[可见度] <span class="class"><span class="keyword">interface</span> 接口名称 [<span class="keyword">extends</span> 其他的接口名] </span>&#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承父类实现接口的语法</span></span><br><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1，接口2...</span>&#123;</span><br><span class="line">    <span class="comment">//如果继承了抽象类，需要实现继承的抽象方法；要实现接口中的抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口（Interface），在 Java 中是一个抽象类型，是抽象方法的集合，接口通常以 interface 来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p><ul><li><p>接口无法被实例化，没有构造方法，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。</p></li><li><p>接口不能包含成员变量，除了 static 和 final 变量。接口中的变量会被隐式的指定为 <code>public static final</code> 变量。</p></li></ul><ul><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。接口中的方法会被隐式的指定为 <code>public abstract</code>。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。JDK 1.8 以后，接口允许包含具体实现的方法，该方法称为”默认方法”，默认方法使用 <code>default</code> 关键字修饰。</li><li>接口中的方法都是公有的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPlayGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paly</span><span class="params">()</span></span>; <span class="comment">//abstract 关键字可以省略，系统会自动加上</span></span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;游戏名字&quot;</span>; <span class="comment">//static final关键字可以省略，系统会自动加上</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">extends</span> <span class="title">Telephone</span> <span class="keyword">implements</span> <span class="title">IPlayGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;<span class="comment">//继承抽象类的子类必须重写抽象方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;重写抽象类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;重写接口的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IPlayGame i=<span class="keyword">new</span> Phone(); <span class="comment">//用接口的引用指向子类的对象</span></span><br><span class="line">        i.paly(); <span class="comment">//调用接口的方法</span></span><br><span class="line">        System.out.println(i.name); <span class="comment">//输出接口的常量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重写接口的方法</span><br><span class="line">游戏名字</span><br></pre></td></tr></table></figure><p><strong>3. 比较</strong> </p><ul><li>从设计层面上看，抽象类是对类本质的抽象，表达 is a 的关系，比如 BMW is a Car。抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类实现。而接口是对方法的抽象，表达 like a 的关系，比如 Bird like a Aircraft(鸟像飞机一样可以飞)，鸟可以实现飞机飞的方法但鸟不是飞机。接口的核心是定义方法，即实现类可以做什么，至于谁实现，如何实现，接口并不关心。</li><li>从使用上来看，一个类可以实现多个接口，但只能继承一个抽象类。</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型。</li><li>抽象类可以有抽象方法和具体方法，而接口中只能存在抽象(public abstract)方法。</li><li>抽象类中可以定义构造函数，接口不能定义构造函数。</li></ul><p>在 JDK1.8中，允许在接口中包含带有具体实现的方法，使用 default 修饰，这类方法就是默认方法。</p><p><strong>4. 使用选择</strong> </p><p>使用抽象类：</p><ul><li>需要在几个相关的类中共享代码；</li><li>需要能控制继承来的方法和域的访问权限，而不是都为 public。</li><li>需要继承非静态（non-static）和非常量（non-final）字段。</li></ul><p>使用接口：</p><ul><li>需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；</li><li>需要使用多重继承。</li></ul><p>在很多情况下，接口优先于抽象类，因为接口没有抽象类严格的类层次接口要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li>访问父类的构造函数：可以使用 super() 函数访问父类的构造函数，从而完成一些初始化的工作。</li><li>访问父类的成员：如果子类覆盖了父类的中某个方法的实现，可以通过使用 super 关键字来引用父类的方法实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperExample.func()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperExtendExample</span> <span class="keyword">extends</span> <span class="title">SuperExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperExtendExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x, y);</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.func();</span><br><span class="line">        System.out.println(<span class="string">&quot;SuperExtendExample.func()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SuperExample e = <span class="keyword">new</span> SuperExtendExample(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">e.func();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SuperExample.func()</span><br><span class="line">SuperExtendExample.func()</span><br></pre></td></tr></table></figure><h3 id="在-Java-中定义一个不做事且没有参数的构造方法有什么作用？"><a href="#在-Java-中定义一个不做事且没有参数的构造方法有什么作用？" class="headerlink" title="在 Java 中定义一个不做事且没有参数的构造方法有什么作用？"></a>在 Java 中定义一个不做事且没有参数的构造方法有什么作用？</h3><p>Java 程序在执行子类的构造方法之前，如果没有用 super() 来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super() 来调用父类中特定的构造方法，则编译时将发生错误。</p><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String、StringBuffer-和-StringBuilder"><a href="#String、StringBuffer-和-StringBuilder" class="headerlink" title="String、StringBuffer 和 StringBuilder"></a>String、StringBuffer 和 StringBuilder</h2><p><strong>1. 是否可变</strong> </p><ul><li>String 是 final 修饰的，不可变，意味着每次操作都会产生新的 String 对象；</li><li>StringBuffer 和 StringBuilder 可变</li></ul><p><strong>2. 是否线程安全</strong> </p><ul><li>String 不可变，因此是线程安全的</li><li>StringBuffer 是线程安全的，内部使用 synchronized 来同步</li><li>StringBuilder 不是线程安全的</li></ul><p>性能：StringBuilder &gt; StringBuffer &gt; String</p><p>使用场景：优先使用 StringBuilder，多线程使用共享变量时用 StringBuffer。</p><h2 id="String-intern"><a href="#String-intern" class="headerlink" title="String.intern()"></a>String.intern()</h2><p>使用 String.intern() 可以保证相同内容的字符串实例引用相同的内存对象。</p><p>下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用，这个方法首先把 s1 引用的对象放到 String Poll（字符串常量池）中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);           <span class="comment">// false</span></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s1.intern() == s3);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果是采用 “bbb” 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Poll 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s4 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">String s5 = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">System.out.println(s4 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在 Java 6 之前，字符串常量池被放在永久代中，而在 Java 7 时，它被放在堆的其它位置。这是因为永久代的空间有限，如果大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p><h2 id="String-为什么要设计为不可变类？"><a href="#String-为什么要设计为不可变类？" class="headerlink" title="String 为什么要设计为不可变类？"></a>String 为什么要设计为不可变类？</h2><p>（1）字符串常量池的需要：当创建一个 String 对象时，假如此字符串值已经存在于常量池中，则不会创建一个新的对象，而是引用已经存在的对象；</p><p>（2）允许 String 对象缓存 HashCode：Java 中 String 对象的哈希码被频繁地使用, 比如在 HashMap 等容器中。字符串不变性保证了 hash 码的唯一性，意味着不必每次都去计算新的哈希码；</p><p>（3）String 被许多的 Java 类(库)用来当做参数，例如：网络连接地址 URL、文件路径 path、还有反射机制所需要的 String 参数等, 假若 String 不是固定不变的，将会引起各种安全隐患。</p><h1 id="基本类型与运算"><a href="#基本类型与运算" class="headerlink" title="基本类型与运算"></a>基本类型与运算</h1><h2 id="基本类型与包装类型"><a href="#基本类型与包装类型" class="headerlink" title="基本类型与包装类型"></a>基本类型与包装类型</h2><p>八个基本类型：</p><ul><li><p>byte: 占用 1 个字节，</p><p>取值范围 $-128$ ~ $127$ </p></li><li><p>short: 占用 2 个字节</p><p>取值范围 $-2^{15} $~ $2^{15} -1 $</p></li><li><p>int：占用 4 个字节</p><p>取值范围 $-2^{31} $~ $2^{31} -1 $</p></li><li><p>long：占用 8 个字节 </p></li><li><p>float：占用 4 个字节 </p></li><li><p>double：占用 8 个字节 </p></li><li><p>char: 占用 2 个字节 </p></li><li><p>boolean：占用大小根据实现虚拟机不同有所差异</p></li></ul><p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用<strong>自动装箱与拆箱</strong>完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="number">2</span>;     <span class="comment">// 装箱</span></span><br><span class="line"><span class="keyword">int</span> y = x;         <span class="comment">// 拆箱</span></span><br></pre></td></tr></table></figure><h2 id="Integer-和-int-的区别"><a href="#Integer-和-int-的区别" class="headerlink" title="Integer 和 int 的区别"></a>Integer 和 int 的区别</h2><p>（1）int 是 Java 的八种基本数据类型之一，而 Integer 是 Java 为 int 类型提供的封装类；</p><p>（2）int 型变量的默认值是 0，Integer 变量的默认值是 null，说明 Integer 可以区分未赋值和值为 0；</p><p>（3）Integer 变量必须实例化后才可以使用，而 int 不需要。</p><p>延伸：</p><ul><li>Integer 变量和 int 变量比较时，只要两个变量的值是相等的，则结果为 true。因为包装类 Integer 和基本数据类型 int 类型进行比较时，Java 会自动拆包装类为 int，然后进行比较，实际上就是两个 int 型变量在进行比较；</li><li>由于 Integer 变量实际上是对一个 Integer 对象的引用，所以两个通过 new 生成的 Integer 变量永远是不相等的，因为其内存地址是不同的；</li><li>非 new 生成的 Integer 变量和 new Integer() 生成的变量进行比较时，结果为 false。因为非 new 生成的 Integer 变量指向的是 Java 常量池中的对象，而 new Integer() 生成的变量指向堆中新建的对象；</li><li>对于两个非 new 生成的 Integer 对象进行比较时，如果两个变量的值在区间 $[-128, 127]$ 之间，则比较结果为 true，否则为 false。</li></ul><h2 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp; 和 &amp;&amp; 的区别"></a>&amp; 和 &amp;&amp; 的区别</h2><p>Java 中 &amp;&amp; 和 &amp; 都表示逻辑运算符与(and)，当两边的表达式都为 true 的时候，整个运算结果才为 true，否则为 false。</p><p>&amp;&amp;：有短路功能，当第一个表达式的值为 false 的时候，则不再计算第二个表达式；</p><p>&amp;：不管第一个表达式结果是否为 true，第二个都会执行。</p><p>&amp; 还可以用作位运算符，当 &amp; 两边的表达式不是 Boolean 类型的时候，&amp; 表示按位操作。</p><h3 id="Math-round-1-5"><a href="#Math-round-1-5" class="headerlink" title="Math.round(-1.5)"></a>Math.round(-1.5)</h3><p>round 表示四舍五入，算法为 <code>Math.floor(x+0.5)</code> ，即将原来的数字加上 $0.5$ 后再向下取整，所以 <code>Math.round(1.5)</code> 的结果为 $2$，<code>Math.round(-1.5)</code> 的结果为 $-1$。</p><h3 id="两个二进制数的异或结果"><a href="#两个二进制数的异或结果" class="headerlink" title="两个二进制数的异或结果"></a>两个二进制数的异或结果</h3><p>两个二进制数异或结果是这两个二进制数差的绝对值。表达式如下：$a\bigoplus b = |a-b|$。</p><h2 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h2><p>new Integer(123) 与 Integer.valueOf(123) 的区别在于，new Integer(123) 每次都会新建一个对象，而 Integer.valueOf(123) 可能会使用缓存对象，因此多次使用 Integer.valueOf(123) 会取得同一个对象的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">System.out.println(x == y);    <span class="comment">// false</span></span><br><span class="line">Integer z = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">Integer k = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line">System.out.println(z == k);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>编译器会在自动装箱过程调用 <code>valueOf()</code> 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer m = <span class="number">123</span>;</span><br><span class="line">Integer n = <span class="number">123</span>;</span><br><span class="line">System.out.println(m == n); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>valueOf()</code> 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接使用缓存池的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 8 中，Integer 缓存池的大小默认为 $-128$~$127$。</p><p>Java 还将一些其它基本类型的值放在缓冲池中，包含以下这些：</p><ul><li>boolean values true and false</li><li>all byte values</li><li>short values between -128 and 127</li><li>int values between -128 and 127</li><li>char in the range \u0000 to \u007F</li></ul><p>因此在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。</p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (s) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;a&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;b&quot;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 switch(expr 1) 中，expr1 只能是一个整数表达式或者枚举常量。而整数表达式可以是 int 基本数据类型或者 Integer 包装类型。由于，byte、short、char 都可以隐式转换为 int，所以，这些类型以及这些类型的包装类型也都是可以的。而 long 类型都不符合 switch 的语法规定，并且不能被隐式的转换为 int 类型，所以不能作用于 switch 语句中。</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>Throwable 可以用来表示任何可以作为异常抛出的类，分为两种： <strong>Error</strong>  和 <strong>Exception</strong>。其中 Error 一般是指与虚拟机相关的问题，如：系统崩溃、虚拟机错误、内存空间不足、方法调用栈溢出等。这类错误将会导致应用程序中断，仅靠程序本身无法恢复和预防；Exception 分为两种：</p><ol><li><strong>受检异常</strong> ：需要用 try…catch… 语句捕获并进行处理，并且可以从异常中恢复；</li><li><strong>非受检异常</strong> ：是运行时异常，如：空指针异常、指定的类找不到、数组越界、方法传递参数错误、数据类型转换错误。可以编译通过，但是一运行就崩溃，程序不会自己处理；</li></ol><p><img src="PPjwP.png" alt=""></p><h2 id="throw与throws"><a href="#throw与throws" class="headerlink" title="throw与throws"></a>throw与throws</h2><ul><li><p>throw：用在方法体内，用来抛出一个具体的异常类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doA</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> Exception1,Exception3</span>&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">                 ......</span><br><span class="line">           &#125;<span class="keyword">catch</span>(Exception1 e)&#123;</span><br><span class="line">              <span class="keyword">throw</span> e;</span><br><span class="line">           &#125;<span class="keyword">catch</span>(Exception2 e)&#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;出错了！&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(a!=b)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span>  Exception3(<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>throws 用在方法声明后面，用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，谁调用我我就抛给谁。throws 表示出现异常的一种可能性，并不一定会发生这些异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fun()可能出现两种异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span><span class="keyword">throws</span> IOException,SQLException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用fun()时要准备处理两种异常</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="try-catch-finally-中，若-catch-中-return，finally-还执行吗？"><a href="#try-catch-finally-中，若-catch-中-return，finally-还执行吗？" class="headerlink" title="try-catch-finally 中，若 catch 中 return，finally 还执行吗？"></a>try-catch-finally 中，若 catch 中 return，finally 还执行吗？</h2><p>会执行。程序在执行到 return 时会首先将返回值存储在一个指定的位置，其次去执行 finally 块，最后再返回。因此，对基本数据类型，在 finally 块中改变 return 的值没有任何影响，直接覆盖掉；而对引用类型是有影响的，返回的是在 finally 对前面 return 语句返回对象的修改值。</p><h2 id="主线程可以捕获到子线程的异常吗？"><a href="#主线程可以捕获到子线程的异常吗？" class="headerlink" title="主线程可以捕获到子线程的异常吗？"></a>主线程可以捕获到子线程的异常吗？</h2><p>正常情况下，如果不做特殊的处理，在主线程中是不能够捕获到子线程中的异常的。如果想要在主线程中捕获子线程的异常，可以用如下的方式进行处理，使用 Thread 的静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandle());</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为泛型类、接口中称为泛型接口和方法中称为泛型方法。</p><p>自定义泛型类和方法定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Box&lt;String&gt; name = <span class="keyword">new</span> Box&lt;String&gt;(<span class="string">&quot;corn&quot;</span>);</span><br><span class="line">        Box&lt;Integer&gt; age = <span class="keyword">new</span> Box&lt;Integer&gt;(<span class="number">712</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;name class:&quot;</span> + name.getClass());      <span class="comment">// class test.Box</span></span><br><span class="line">        System.out.println(<span class="string">&quot;age class:&quot;</span> + age.getClass());        <span class="comment">// class test.Box</span></span><br><span class="line">        System.out.println(name.getClass() == age.getClass());    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// T stands for &quot;Type&quot;</span></span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T t)</span> </span>&#123; <span class="keyword">this</span>.t = t; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> t; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型类时，虽然传入不同的泛型实参，但并没有真正意义上生成不同的类型，传入不同泛型实参的泛型类在内存上只有一个，即还是原来的最基本的类型（本实例中为Box），当然在逻辑上可以理解成多个不同的泛型类型。</p><p>Java 中泛型这一概念只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型的相关信息擦出，也就是说，成功编译过后的 class 文件中是不包含任何泛型信息的。</p><h2 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h2><p>Java 编译器生成的字节码不包含泛型信息，泛型类型信息将在编译处理时被擦除，这个过程被称为泛型擦除。</p><h2 id="泛型中的限定通配符和非限定通配符"><a href="#泛型中的限定通配符和非限定通配符" class="headerlink" title="泛型中的限定通配符和非限定通配符"></a>泛型中的限定通配符和非限定通配符</h2><p>两种限定通配符:</p><ul><li>&lt; ? extends T &gt; 通过确保类型必须是 T 的子类来设定类型的上界；</li><li>&lt; ? super T &gt; 通过确保类型必须是 T 的父类来设定类型的下界。</li></ul><p>泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。<br>&lt; ? &gt; 表示非限定通配符，因为 &lt; ? &gt; 可以用任意类型来替代。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;字节序&quot;&gt;&lt;a href=&quot;#字节序&quot; class=&quot;headerlink&quot; title=&quot;字节序&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://10185102110.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
