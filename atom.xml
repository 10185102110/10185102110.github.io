<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮生孰来</title>
  
  
  <link href="http://10185102110.github.io/atom.xml" rel="self"/>
  
  <link href="http://10185102110.github.io/"/>
  <updated>2023-10-17T12:02:48.990Z</updated>
  <id>http://10185102110.github.io/</id>
  
  <author>
    <name>Ave Bai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动化测试框架阶段性总结</title>
    <link href="http://10185102110.github.io/2023/09/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://10185102110.github.io/2023/09/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</id>
    <published>2023-09-21T10:16:36.000Z</published>
    <updated>2023-10-17T12:02:48.990Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 align = "center">自动化测试框架</h1><h3 align = "center">XX公司 白士军</h3><p><strong>摘要：</strong></p><p>在全面深化重点产业数字化转型的背景下，客户需求日益庞杂，软件项目团队不得不持续压缩软件从设计到发布的产品迭代周期。在软件开发的生命周期中，相较于开发阶段，似乎更愿意缩短测试周期，但软件交付的风险将难以避免。为满足项目团队在有限的时间和成本下交付高质量产品的需求，自动化测试应时而生。</p><p>本文探讨的是软件自动化测试框架的实现和部署，基于 Python 语言实现，结合 Selenium、Request、Pytest 等框架技术，完成支持 Web 端界面测试和接口测试的测试框架，通过搭建 Jenkins 平台进行持续集成。目前基于该框架实现的测试脚本运行正常，可以解决手工测试效率低、覆盖率低的问题，切实提高软件测试质量。</p><p><strong>关键词：</strong>自动化测试、Selenium、Request</p><h1 id="1-自动化测试概述"><a href="#1-自动化测试概述" class="headerlink" title="1 自动化测试概述"></a>1 自动化测试概述</h1><h2 id="1-1-自动化测试的概念"><a href="#1-1-自动化测试的概念" class="headerlink" title="1.1 自动化测试的概念"></a>1.1 自动化测试的概念</h2><p>IEEE 对软件测试的定义为：使用手工或者自动化的测试手段来运行或者测定某个系统的过程，其目的在于检验它是否能够满足规定的需求或者是弄清预期结果与实际结果之间的差别<sup>[1]</sup>。在整个软件产品从设计开始到发布之前，在这个软件的开发周期之内，都需要进行软件测试工作，其目的在于尽可能快地发现软件缺陷。</p><p>自动化测试是指利用机器来代替手工劳动的过程，在无人值守的情况下<sup>[2]</sup>，通过程序控制机器来完成相应的测试工作。自动化测试的目的，就是减少手工测试，将我们的精力从繁琐的重复工作中解放出来，提高效率，进而增强对软件质量的保障。</p><p>对于自动化测试，Cohn M 定义了一种三层的金字塔结构<sup>[3]</sup>，金字塔从下往上分别是单元测试、接口测试和界面测试，该结构形象地描述了在软件测试过程中这三种测试所占的比重。单元测试是代码的根基，占比最大；提供服务的接口只需通过输入输出即可完成测试，稳定易维护；界面测试则因为用户界面的频繁变更导致测试用例维护困难，所以比重最小。Lisa Crispin 针对这一特点，为自动化测试金字塔结构进行补充，增加了手工测试的“帽子”结构<sup>[4]</sup>，如图 1 所示。</p><p><img src="1.png" alt=""></p><p align = "center">图1 自动化测试分层结构</p><h2 id="1-2-自动化测试的原则"><a href="#1-2-自动化测试的原则" class="headerlink" title="1.2 自动化测试的原则"></a>1.2 自动化测试的原则</h2><p>由于需求的不断变化，部分测试用例无法复用现成的测试脚本，这要求测试人员需要手动进行测试，而不能把所有的测试工作依赖于自动化测试脚本，因此在进行自动化测试的时候，必须要遵守一定的测试原则<sup>[5]</sup>，才能使得自动化测试起到预期的测试效果。</p><p>(1).  自动化测试用例的范围集中体现在产品比较成熟稳定并且功能重复率比较高的测试上。</p><p>在业务流程以及功能比较稳定的产品上，测试用例的重复率较高，因此手工测试耗时很多，自动化测试能明显提高效率。若是初期快速迭代的产品，需求频繁更改，自动化测试需要不断适配新的迭代版本，其本身的开发成本过高，此时追求自动化则是舍本逐末。</p><p>(2).  自动化测试用例一般符合正向流程的测试。</p><p>在手工测试时，测试人员通常根据需求说明书设计各种场景的测试用例，还要尽可能多地考虑异常情况。自动化测试优先选用正常的场景测试，为每个步骤设定预期结果，其他异常场景需要测试人员手工辅助测试。</p><p>(3).  自动化测试不能取代手工测试。</p><p>自动化测试脚本在本质上是将测试人员的能力固化下来，它是一种代码形式的测试用例，是测试人员进行需求分析、用例设计之后的产物，主要目的是减少重复繁冗的工作内容，使测试人员将有限的时间更多地投入到探索性测试。</p><h2 id="1-3-自动化测试的流程"><a href="#1-3-自动化测试的流程" class="headerlink" title="1.3 自动化测试的流程"></a>1.3 自动化测试的流程</h2><p>虽然自动化测试与手工测试的实施手段不同，但同样遵循一定的测试周期。自动化测试通常以系统测试的完成作为启动节点，在可行性分析和需求分析之后制定测试计划，设计测试用例，开发测试脚本，准备测试数据，搭建测试环境，执行测试脚本并收集测试结果。如图 2 所示。</p><p><img src="2.png" alt=""></p><p align = "center">图2 自动化测试流程</p><h1 id="2-相关技术介绍"><a href="#2-相关技术介绍" class="headerlink" title="2 相关技术介绍"></a>2 相关技术介绍</h1><h2 id="2-1-Selenium框架"><a href="#2-1-Selenium框架" class="headerlink" title="2.1 Selenium框架"></a>2.1 Selenium框架</h2><p>Selenium（<a href="https://www.selenium.dev/zh-cn/documentation/）">https://www.selenium.dev/zh-cn/documentation/）</a> 是一个 Web 应用的开源自动化框架。主要应用于 Web 应用程序的自动化测试。通过它，测试工程师可以写出自动化程序，模拟人在浏览器里操作 Web 界面，比如点击界面按钮，在文本框中输入文字等操作。Selenium 支持 Chrome、Firefox、IE、Edge、Safari 等浏览器，支持 Linux、Windows、Mac 系统平台，支持录制、回放与脚本生成。其工作原理如图 3 所示。</p><p><img src="3.png" alt=""></p><p align = "center">图3 Selenium运行机制</p><h2 id="2-2-Pytest框架"><a href="#2-2-Pytest框架" class="headerlink" title="2.2 Pytest框架"></a>2.2 Pytest框架</h2><p>Pytest（<a href="https://docs.pytest.org/en/7.4.x/）">https://docs.pytest.org/en/7.4.x/）</a> 是一个第三方测试框架，用于编写和执行测试代码。它可以兼容 unittest 风格的测试用例，有丰富的插件，它支持 setup/teardown 或 fixture 两种风格进行测试用例的前后置操作，直接使用 Python 内置的 assert 断言，支持 html、Allure 测试报告。Pytest 允许并行运行多个测试，从而减少测试套件的执行时间；允许我们在执行期间跳过测试的子集；允许我们运行整个测试套件的一个子集。</p><h2 id="2-3-SqlAlchemy框架"><a href="#2-3-SqlAlchemy框架" class="headerlink" title="2.3 SqlAlchemy框架"></a>2.3 SqlAlchemy框架</h2><p>SQLAlchemy（<a href="https://docs.sqlalchemy.org/en/20/）">https://docs.sqlalchemy.org/en/20/）</a> 是一个基于 Python 实现的对象关系映射（Object Relational Mapping，ORM）框架，该框架建立在 Python DB API 之上，使用关系对象映射进行数据库操作。简单来说，就是不需要去写原生的 sql 语句，只需要用 Python 语法来操作对象就能自动映射为 sql 语句。SQLAlchemy 本身无法操作数据库，其必须使用第三方插件，通过数据库方言和数据库交互，然后数据库方言根据配置去调用指定的数据库 API 从而实现对数据库的操作。</p><h2 id="2-4-Allure"><a href="#2-4-Allure" class="headerlink" title="2.4 Allure"></a>2.4 Allure</h2><p>Allure（<a href="https://allurereport.org/docs/）">https://allurereport.org/docs/）</a> 是生成测试报告的开源工具，它在 Pytest 执行完生成的测试数据的基础上，对测试数据进行处理统计，生成简洁易读的测试报告。Allure 提供全局视野，优秀的模块化和可扩展性方便测试管理及 Bug 追踪，具有良好的视觉表现和交互性，从总览、类别、测试套件、功能、图形、时间轴等方面多维度展示测试信息。更重要的是，它支持定制测试报告，我们可以基于业务逻辑对测试用例归类，标记严重级别和详细的步骤说明。</p><h2 id="2-5-Jenkins"><a href="#2-5-Jenkins" class="headerlink" title="2.5 Jenkins"></a>2.5 Jenkins</h2><p>Jenkins（<a href="https://www.jenkins.io/zh/doc/）">https://www.jenkins.io/zh/doc/）</a> 是一款用于持续集成的开源工具。它运行在类似 Tomcat 的容器中，支持软件配置管理工具，可以执行基于 Gradle Build Tool 和 Apache Maven 的项目。通过调用 Shell 脚本或 Windows 批处理命令，Jenkins 能够快捷完成自动化任务的执行工作。Jenkins 的构建触发有多种方式，比较常用的是通过提交代码到 Git 或 SVN 等版本控制工具来触发，除此之外还支持通过预先配置的定时器实现任务的定时执行或周期执行。</p><h1 id="3-自动化测试的框架设计"><a href="#3-自动化测试的框架设计" class="headerlink" title="3 自动化测试的框架设计"></a>3 自动化测试的框架设计</h1><h2 id="3-1-UI-测试"><a href="#3-1-UI-测试" class="headerlink" title="3.1 UI 测试"></a>3.1 UI 测试</h2><h3 id="3-1-1-模块化框架"><a href="#3-1-1-模块化框架" class="headerlink" title="3.1.1 模块化框架"></a>3.1.1 模块化框架</h3><p>传统的线性框架通过录制回放或者手动一行一行地完成测试脚本，这样做虽然简单易懂，但效率极低，也难以维护，如果被测系统有所变更，将会牵一发而动全身，因此我们需要对框架进行模块化设计。 </p><p>模块化框架（Modular Framework）<sup>[6]</sup>是把基础方法和其他常用的方法封装起来以提高代码复用性和可维护性。例如最常见的登录和登出操作，几乎所有测试用例都会用到，那么我们可以将类似的操作封装起来统一调用，如果该功能更改，只维护同一个公共方法即可。</p><p>模块化框架虽然解决了代码复用的痛点，但若是同一个测试用例，仅仅更换测试数据也要修改脚本，显然我们不能止步于此。</p><h3 id="3-1-2-数据驱动框架"><a href="#3-1-2-数据驱动框架" class="headerlink" title="3.1.2 数据驱动框架"></a>3.1.2 数据驱动框架</h3><p>数据驱动框架（Data-driven Framework）<sup>[7]</sup>将代码和数据分离，数据单独存放，用数据驱动测试脚本，动态生成测试用例并执行。一般情况下，测试数据存放在 Excel、Json、Yaml 等文件中，测试数据即包含用例输入，也包含期望结果。如此一来，仅更改测试数据将无需修改脚本，通过将输入数据参数化，可以实现测试用例的复用，从而提高测试效率和质量。该框架原理如图 4 所示。</p><p><img src="4.png" alt=""></p><p align = "center">图4 数据驱动框架原理</p><h3 id="3-1-3-关键字驱动框架"><a href="#3-1-3-关键字驱动框架" class="headerlink" title="3.1.3 关键字驱动框架"></a>3.1.3 关键字驱动框架</h3><p>关键字驱动框架（Keyword-driven Framework）<sup>[8]</sup>是数据驱动框架地改进和补充，基本原理是在脚本与数据分离之后，将脚本二次分离，形成所谓的行为代码与测试代码，然后经由数据文件驱动行为代码，从而生成测试代码。关键字驱动需要我们根据测试用例定义关键字，并使其与相应的动作或方法关联起来。而这里的关键字主要有三类: 被操作对象(item)、操作(operation)和值(value)，面向对象的形式表现为 <code>item.operation(value)</code> 。</p><p>关键字驱动框架地实现方法类似于积木，对页面元素进行拆分和组装，最小颗粒度的操作可以视为一个关键字，可以直接使用，也可以将几个关键字组装成为一个大关键字，像搭积木一样搭建自动化测试，如图 5 所示。</p><p><img src="5.png" alt=""></p><p align = "center">图5 关键字驱动-登录示例</p><h3 id="3-1-4-混合驱动的PO设计模式"><a href="#3-1-4-混合驱动的PO设计模式" class="headerlink" title="3.1.4 混合驱动的PO设计模式"></a>3.1.4 混合驱动的PO设计模式</h3><p>综合上述几种测试框架，在数据驱动和关键字驱动的基础上，我们引入 PO（Page Object）设计模式<sup>[9]</sup>来实现最终的 UI 自动化测试框架。该框架采用模块化设计，实现页面元素与业务逻辑的分离、测试数据与测试脚本的分离，使得测试脚本更加易读、易维护和易于拓展，降低代码耦合性，可有效提高测试效率和质量。</p><p>PO 模式的核心思想是分层，如图6所示。对象库层封装基础方法，如 Selenium 的原生 api、日志、文件读写等方法；页面操作层定义关键字，如 DOM<sup>[10]</sup>树中元素的定位、获取、操作等；测试用例层则根据业务逻辑调用一个或多个关键字组合成测试用例，并在该层设置测试执行入口。 </p><p><img src="6.png" alt=""></p><p align = "center">图6 PO模式分层及项目结构</p><p>PO 模式的理念是将待测页面当作一个页面对象，包含页面元素的定位和元素操作，以此实现页面对象和真实页面的映射关系。</p><p>测试用例如表 1 所示，测试结果判断流程如图7所示。在执行过程中，如果发生预期之外的脚本代码错误，则抛出异常并结束测试；若正常执行，则依次判断断言是否成功以及实际结果是否符合预期，若全部符合则代表测试通过，若不符合则测试不通过，执行完指定的全部测试用例后，将测试结果写入日志，并生成 Allure 测试报告。测试报告如图 8 所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@allure.story(<span class="params"><span class="string">&#x27;四、外贸进货流程&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@allure.title(<span class="params"><span class="string">&#x27;1.新增外贸进货受理&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;test_input&quot;</span>, read_yaml(<span class="params">os.path.join(<span class="params">os.getcwd(<span class="params"></span>), <span class="string">&#x27;04_delivergoods.yaml&#x27;</span></span>)</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_add_acceptance</span>(<span class="params">driver, test_input</span>):</span></span><br><span class="line">    menu = BtosMenu(driver)</span><br><span class="line">    menu.select_level2_menu(<span class="string">&#x27;业务受理&#x27;</span>, <span class="string">&#x27;外贸进货受理&#x27;</span>)</span><br><span class="line">    accept = OutExportAcceptance(driver)</span><br><span class="line">    accept.add_acceptance_information(test_input)</span><br><span class="line">    accept.check_acceptance(test_input)</span><br><span class="line">    accept.check_saved_good(test_input)</span><br><span class="line">    Tag(driver).closeTag(<span class="string">&quot;外贸进货受理&quot;</span>)</span><br></pre></td></tr></table></figure><p align = "center">表1 UI 测试用例实例</p><p><img src="7.png" alt=""></p><p align = "center">图7 测试结果判断流程图</p><p><img src="8.png" alt=""></p><p align = "center">图8 测试报告</p><h2 id="3-2-接口测试"><a href="#3-2-接口测试" class="headerlink" title="3.2 接口测试"></a>3.2 接口测试</h2><h3 id="3-2-1-基于SqlAlchemy的数据库校验方案"><a href="#3-2-1-基于SqlAlchemy的数据库校验方案" class="headerlink" title="3.2.1 基于SqlAlchemy的数据库校验方案"></a>3.2.1 基于SqlAlchemy的数据库校验方案</h3><p>对于业务接口测试，我们往往会校验接口传参是否正确，接口是否请求成功以及请求结果是否符合预期。</p><p>如果要验证某个接口的执行结果或者返回结果是否正确，首先我们会想到校验请求的状态码，通常 200 代表请求正常、401 代表认证失败、500 代表后端错误等等；但是 200 仅代表没有报错，无法保证业务逻辑的正确性，500 也不代表服务异常，它可能是后端进行的错误处理。为了更精确地判断接口是否按照预期执行，可以通过响应体中的 data 部分进行字段的正确性校验。然而不是所有接口都会返回 data，确切地说，可能返回的只是“data=true”，我们无法得知数据处理是否正确。进一步，我们可以通过编写 sql 语句来应对接口不返回业务数据的情况：</p><ul><li>对于一个 GET 请求，我们希望验证响应结果的数据量或者某条数据的正确性；</li><li>对于一个 POST 新增请求，我们希望验证写入数据库的真实数据的正确性、是否存在漏写等问题；</li><li>对于一个 PUT/POST 修改请求，我们希望验证修改的数据在数据库中是否正确变更；</li><li>对于一个 DELETE/POST 删除请求，我们希望验证某条数据是否真正在数据库中被抹除，或是由于修改状态标记而被隐藏。</li></ul><p>接口自动化测试的流程如图 9 所示。一般情况下，我们使用参数化的手段生成测试用例，对接口进行三步校验。首先校验状态码，验证接口是否请求成功；然后验证响应体中的数据；最后验证数据库的更改，全部通过才能说明接口的功能正常。</p><p><img src="9.png" alt=""></p><p align = "center">图9 接口自动化测试流程</p><p>考虑到实际应用，如果需要编写大量 sql 语句，且研发迭代的过程中数据库表结构会发生更改，随着自动化用例的规模增长，我们将陷入维护的泥沼。SqlAlchemy 是一种可以实时跟进数据库表变动，甚至允许不同类型数据库之间进行迁移，且容易维护的技术，它可以有效提升编写和维护 sql 语句的效率。表 2 是一个接口测试用例的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@allure.title(<span class="params"><span class="string">&quot;标题&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params">data, read_file(<span class="params"><span class="string">&quot;...&quot;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_add_berth_plan</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="comment"># 读取数据，根据实际需要更改内容</span></span><br><span class="line">    payload = data[<span class="string">&quot;payload&quot;</span>]</span><br><span class="line">    <span class="comment"># 读取或定义接口地址</span></span><br><span class="line">    url = data[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">    <span class="comment"># 调用接口新增业务数据</span></span><br><span class="line">    res = self.post(url, json=payload)</span><br><span class="line">    res_json = res.json()</span><br><span class="line">    <span class="comment"># 校验状态码，建议使用响应体中的状态字段，防止误判</span></span><br><span class="line">    check.equal(<span class="built_in">int</span>(res_json[<span class="string">&quot;status&quot;</span>]), <span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 反射航次表</span></span><br><span class="line">    Voyage = self.orm.tables.bps_voyage</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 数据库根据航次号查询新增的航次数据</span></span><br><span class="line">        plan = self.orm.select(Voyage).filter_by(voy_voyage=<span class="string">&#x27;B0607E&#x27;</span>).one()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        self.logger.error(<span class="string">&quot;未查询到记录或有重复记录&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 若查询无误，将查询出的对象转换为字典格式</span></span><br><span class="line">        plan_dict = self.orm.to_dict(plan)</span><br><span class="line">        <span class="comment"># 校验数据库中写入的值是否符合预期</span></span><br><span class="line">        check.equal(plan_dict[<span class="string">&quot;voy_voyage&quot;</span>], payload[<span class="string">&quot;航次&quot;</span>])</span><br><span class="line">    <span class="comment"># 清理测试数据</span></span><br><span class="line">    <span class="keyword">with</span> self.orm.auto_commit():</span><br><span class="line">        <span class="comment"># 删除该数据并提交事务</span></span><br><span class="line">        self.orm.delete(plan)</span><br></pre></td></tr></table></figure><p align = "center">表2 接口测试用例示例</p><h3 id="3-2-2-基于组合唯一键的数据验证方案"><a href="#3-2-2-基于组合唯一键的数据验证方案" class="headerlink" title="3.2.2 基于组合唯一键的数据验证方案"></a>3.2.2 基于组合唯一键的数据验证方案</h3><p>业务报表对应的查询接口，也即涉及数据统计的接口，通常具有复杂的统计逻辑，在大量数据中我们无法轻易得知正确的返回结果，因此普通的验证方法很难奏效。但是报表都会有标准的统计口径，比如以航次为单位统计，按照内外贸区分，展示哪些字段等等。在充分了解报表需求的前提下，我们可以自行编写 sql 查询语句进行统计，然后与接口的返回结果比对。</p><p>数据统计接口的返回体是 Json 结构，结构体一般包含大量同样结构的数据，我们选取其中部分字段作为组合唯一键，确保这个组合在结构体中必然出现且只出现一次。同样地，测试人员编写的 sql 语句也要遵循该组合的唯一性原则。最终，在测试框架内，我们调用数据应用层的数据统计 API，同时连接数据仓库的数据引入层（ODS）执行测试 sql 语句，将二者结果转换为同一格式，再用组合唯一键在两个结构体中进行匹配，校验数据量是否相同，以及唯一键之外的字段是否正确。该方案的整体结构如图 10 所示。</p><p><img src="10.png" alt=""></p><p align = "center">图10 数据仓库验证方案</p><h1 id="4-持续集成与持续测试"><a href="#4-持续集成与持续测试" class="headerlink" title="4 持续集成与持续测试"></a>4 持续集成与持续测试</h1><p>随着敏捷模式下软件研发的迭代周期越来越短，持续测试（CT）越来越重要。我们需要持续不间断地对保障软件产品质量，靠人力是行不通的，因此必须构建无人值守的自动化测试运行机制。持续测试的前提是持续集成（CI）<sup>[11]</sup>，即开发人员每次提交代码，对整个系统自动构建，并对其执行全面的自动化测试，根据构建和测试结果确定新代码是否正确集成。自动化测试的持续集成流程如图 11 所示。</p><p><img src="11.png" alt=""></p><p align = "center">图11 持续集成流程图</p><p>完成初步测试后，开发人员将集成后的代码部署到类生产环境，确保可以可持续的方式快速向客户发布新版本，这被称为持续交付（CDE）。</p><p>在持续集成和持续交付的阶段中，开发人员需要进行单元测试（UT），测试团队可以依次进行低等级测试（LLT）、高等级测试（HLT）及系统测试。如图 12 所示。</p><p><img src="12.png" alt=""></p><p align = "center">图12 持续测试流程图</p><h1 id="5-总结与展望"><a href="#5-总结与展望" class="headerlink" title="5 总结与展望"></a>5 总结与展望</h1><h2 id="5-1-成果总结"><a href="#5-1-成果总结" class="headerlink" title="5.1 成果总结"></a>5.1 成果总结</h2><p>我们已经完成界面测试和接口测试的框架研发，并且应用到集装箱系统和散件杂货系统的脚本开发，目前运行稳定。在此基础上，实现了基于 TFS 代码管理平台和 Jenkins 服务器的自动化测试持续集成，如图 13 所示。我们可以根据项目需求设定无人值守的测试模式，可指定测试范围并在测试结束后统一查看运行日志和可视化的测试报告。</p><p><img src="13.png" alt=""></p><p align = "center">图13 Jenkins流水线示例</p><p>作为对比，不同手段完成一套完整业务流程和各种数据项校验所需的时间成本如表3所示。</p><div class="table-container"><table><thead><tr><th><strong>测试方式</strong></th><th><strong>用时估算</strong></th></tr></thead><tbody><tr><td>UI手工测试</td><td>&gt;40min</td></tr><tr><td>UI自动化测试</td><td>5min ~ 15min</td></tr><tr><td>接口自动化测试</td><td>&lt;5min</td></tr></tbody></table></div><p align = "center">表3 手工测试与自动化测试用时对比</p><p>随着前后端开发规范的逐渐统一，我们的测试框架需要持续维护、调优，逐步提高自动化测试在测试工作中的比重，争取各项目团队对自动化测试的支持和信任。</p><h2 id="5-2-未来计划"><a href="#5-2-未来计划" class="headerlink" title="5.2 未来计划"></a>5.2 未来计划</h2><h3 id="5-2-1-兼容性测试"><a href="#5-2-1-兼容性测试" class="headerlink" title="5.2.1 兼容性测试"></a>5.2.1 兼容性测试</h3><p>随着系统架构从 C/S 全面转向 B/S，同时在国产化适配的背景下，软件系统对于操作系统和浏览器的兼容性测试愈发重要。传统的兼容性测试需要测试人员在每套环境下做重复的功能测试，这样做显然性价比过低，因此我们往往忽略兼容性测试。为解决这一问题，我们设想基于 Docker 容器部署 Selenium-grid 服务来做分布式测试。</p><p>Selenium-grid 提供一种在多台机器上并行运行测试的简单方法，通过将客户端发送的命令路由到远程浏览器实例，在远程机器上执行 Webdriver 脚本。其运行机制如图14所示，它允许我们启动跨平台的不同浏览器版本上的测试。</p><p><img src="14.png" alt=""></p><p align = "center">图14 Selenium-grid架构</p><h3 id="5-2-2-移动端测试"><a href="#5-2-2-移动端测试" class="headerlink" title="5.2.2 移动端测试"></a>5.2.2 移动端测试</h3><p>除了 Web 端的后台系统，各项目通常配套开发手持机 App，它们在版本稳定之后同样需要自动化测试。我们计划采用 Appium 的技术路线，在主机上安装 Appium 客户端和服务器，提供 Appium 服务，并监听端口，发送指令到移动设备，移动设备执行自动化操作。目前已完成环境配置，预备进行框架研发。大致运行机制如图 15 所示。</p><p><img src="15.png" alt=""></p><p align = "center">图15 移动端自动化测试机制</p><h1 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6 参考文献"></a>6 参考文献</h1><p>[1]   朱少民. 软件测试方法和技术[M]. 第二版.北京: 清华出版社, 2012:5-6.</p><p>[2]   Dorthy Graham,Mark Fewster.Experiences of Test Automation[M]. Boston:Addison-Wesley Education Publishers.</p><p>[3]   Cohn M .Succeeding with Agile: Software Development Using Scrum[J].Addison-Wesley Professional, 2010.</p><p>[4]   Crispin L , Gregory J .Agile Testing: A Practical Guide for Testers and Agile Teams[J].pearson schweiz ag, 2009. Gregory J.Agile Testing: A Practical Guide for Testers and Agile Teams[M].Addison-Wesley,2009.</p><p>[5]   李玮.软件自动化测试混合框架的研究与实现[D].北京交通大学,2007.DOI:CNKI:CDMD:2.2007.048355.</p><p>[6]   Wu Y , Offutt J .Modeling and Testing Web-based Applications[J].george mason university, 2002.DOI:10.1021/bk-2007-0970.ch012.</p><p>[7]   朱菊,王志坚,杨雪.基于数据驱动的软件自动化测试框架[J].计算机技术与发展, 2006, 16(5):3.DOI:CNKI:SUN:WJFZ.0.2006-05-023.</p><p>[8]   接卉,兰雨晴,骆沛.一种关键字驱动的自动化测试框架[J].计算机应用研究, 2009(3):3.DOI:10.3969/j.issn.1001-3695.2009.03.039.</p><p>[9]   Yu B , Ma L , Zhang C .Incremental Web Application Testing Using Page Object[C]//IEEE Workshop on Hot Topics in Web Systems &amp; Technologies.IEEE Computer Society, 2015.DOI:10.1109/HotWeb.2015.14.</p><p>[10] Hors A L , Wood L , Nicol G ,et al.Document Object Model (DOM) Level 2 HTML Specification[J]. 2004.DOI:10.1016/0963-8695(92)90491-X.</p><p>[11] 陶镇威.基于Jenkins的持续集成研究与应用[D].华南理工大学[2023-10-05].DOI:CNKI:CDMD:2.1013.150629.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 align = &quot;center&quot;&gt;自动化测试框架&lt;/h1&gt;

&lt;h3 align = &quot;center&quot;&gt;XX公司 白士军&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在全面深化重点产业数字化转型的背景下，客户需求日益</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Docker驱动Selenium-grid实现分布式测试</title>
    <link href="http://10185102110.github.io/2023/09/18/Docker%E9%A9%B1%E5%8A%A8selenium-grid-4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2023/09/18/Docker%E9%A9%B1%E5%8A%A8selenium-grid-4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2023-09-18T12:16:36.000Z</published>
    <updated>2023-10-18T11:39:16.802Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Docker-Selenium-grid-4实现分布式测试"><a href="#Docker-Selenium-grid-4实现分布式测试" class="headerlink" title="Docker+Selenium-grid-4实现分布式测试"></a>Docker+Selenium-grid-4实现分布式测试</h1><h2 id="一、Selenium-grid-原理"><a href="#一、Selenium-grid-原理" class="headerlink" title="一、Selenium-grid 原理"></a>一、Selenium-grid 原理</h2><p>Selenium Grid 允许通过将客户端发送的命令路由到远程浏览器实例来在远程机器上执行 WebDriver 脚本。</p><p>Grid 的目标:</p><ul><li><p>提供一种在多台机器上并行运行测试的简单方法</p></li><li><p>允许在不同的浏览器版本上进行测试</p></li><li>启用跨平台测试</li></ul><p><img src="5.png" alt="img"></p><p><strong>Hub</strong></p><ol><li>中介和管理</li><li>接受运行测试的请求</li><li>从客户端获取指令并在节点上远程执行它们</li><li>管理线程</li></ol><p>Hub是发送所有测试的中心点。每个 selenium Grid 恰好由一个 Hub 组成。Hub需要能够从各自的客户端（即 CI 服务器、开发人员机器等）访问。Hub将连接一个或多个 Node 测试的节点。</p><p><strong>Node</strong></p><ol><li>Node 和执行的浏览器在同一台主机。</li><li>将自己注册到 Hub 上，并保持通信。</li><li>接收来自 Hub 的请求并执行他们。</li></ol><p>Node 是在单个计算机系统上执行测试的不同的 Selenium 实例。Grid 中可以有许多节点。作为 Node 的机器不需要与 Hub 或其他 Node 的平台相同，也不需要具有相同的浏览器选择。Windows 上的节点可以提供 Internet Explorer 作为浏览器选项，而这在 Linux 或 Mac 上是不可能的。</p><p><img src="https://www.selenium.dev/images/documentation/grid/components.png" alt="Selenium Grid 4 Components"></p><h2 id="二、win11-安装-Docker"><a href="#二、win11-安装-Docker" class="headerlink" title="二、win11 安装 Docker"></a>二、win11 安装 Docker</h2><p>下载 Docker Desktop：</p><p><a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a></p><p>直接安装，勾选 WSL2：</p><p><img src="4.png" alt=""></p><p>自动重启电脑，接受协议：</p><p><img src="6.png" alt=""></p><p>cmd 查看 wsl 会发现已经创建了两个发行版 docker：</p><p><img src="10.png" alt=""></p><p>选择不登录，继续：</p><p><img src="8.png" alt=""></p><p>设置中添加国内镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;registry-mirrors&quot;: [</span><br><span class="line">      &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">      &quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">      &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">      &quot;https://mirror.ccs.tencentyun.com&quot;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p><img src="9.png" alt=""></p><p>测试安装镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run hello-world</span><br></pre></td></tr></table></figure><p><img src="7.png" alt=""></p><h2 id="三、Docker-配置-Selenium-grid-服务"><a href="#三、Docker-配置-Selenium-grid-服务" class="headerlink" title="三、Docker 配置 Selenium-grid 服务"></a>三、Docker 配置 Selenium-grid 服务</h2><p>拉取主节点镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull selenium/hub</span><br></pre></td></tr></table></figure><p>拉取子节点镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull selenium/node-chrome</span><br><span class="line">docker pull selenium/node-firefox</span><br><span class="line">docker pull selenium/node-edge</span><br></pre></td></tr></table></figure><p>创建自定义网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create grid</span><br></pre></td></tr></table></figure><p>查看网络：</p><p><img src="11.png" alt=""></p><p>其他三个网络是 Docker 内置的。bridge 是 Docker 的默认网络模式，相当于 Vmware 中的 Nat 模式，此模式会为每一个容器分配 Network Namespace、设置 IP 等，并将一个主机上的 Docker 容器连接到一个虚拟网桥上。</p><p>可以使用 <code>--net</code>​ 指定容器连接到哪个网络，若不指定则所有容器默认连接到内置的 bridge。</p><p>创建 selenium 主节点容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 自定义对应端口号-自定义对应端口号:4442-4444 -d --net 网络名称 --name hub容器别名 selenium/hub</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -p 5002-5004:4442-4444 -d --net grid --name selenium-hub selenium/hub</span></span><br></pre></td></tr></table></figure><p>创建 selenium 从节点容器，并挂载到主节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name 自定义节点名称 -p 自定义控制端口:5555 -p VNC所需端口:5900 --net 网络名称 -e SE_EVENT_BUS_HOST=hub容器名称 --shm-size=“2g” -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 浏览器镜像</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker run -d --name node-chrome -p 5555:5555 -p 5901:5900 --net grid -e SE_EVENT_BUS_HOST=selenium-hub --shm-size=<span class="string">&quot;2g&quot;</span> -e SE_EVENT_BUS_PUBLISH_PORT=4442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=4443 selenium/node-chrome</span></span><br></pre></td></tr></table></figure><p>在 Docker Desktop 可以看到正在运行的容器：</p><p><img src="1.png" alt=""></p><p>打开 <a href="http://localhost:5004/">http://localhost:5004/</a> 可以查看 selenium-grid 控制的所有 node：</p><p><img src="3.png" alt=""></p><p>测试分布式执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baidu_search</span>(<span class="params">host, browser</span>):</span></span><br><span class="line">    driver = <span class="literal">None</span></span><br><span class="line">    driver = webdriver.Remote(</span><br><span class="line">        command_executor=host,</span><br><span class="line">        options=browser</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> driver <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        exit()</span><br><span class="line">    driver.maximize_window()</span><br><span class="line">    driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">    driver.find_element(By.ID, <span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;docker&#x27;</span>)</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 构建线程</span></span><br><span class="line">    threads = []</span><br><span class="line">    t1 = Thread(target=baidu_search, args=(<span class="string">&#x27;http://localhost:5004/wd/hub&#x27;</span>, webdriver.ChromeOptions()))</span><br><span class="line">    threads.append(t1)</span><br><span class="line">    t2 = Thread(target=baidu_search, args=(<span class="string">&#x27;http://localhost:5004/wd/hub&#x27;</span>, webdriver.FirefoxOptions()))</span><br><span class="line">    threads.append(t2)</span><br><span class="line">    t3 = Thread(target=baidu_search, args=(<span class="string">&#x27;http://localhost:5004/wd/hub&#x27;</span>, webdriver.EdgeOptions()))</span><br><span class="line">    threads.append(t3)</span><br><span class="line">    <span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">        thr.start()</span><br></pre></td></tr></table></figure><h2 id="四、VNC远程查看执行过程"><a href="#四、VNC远程查看执行过程" class="headerlink" title="四、VNC远程查看执行过程"></a>四、VNC远程查看执行过程</h2><p>下载 VNC 远程控制工具：</p><p><a href="https://www.realvnc.com/en/connect/download/combined/">https://www.realvnc.com/en/connect/download/combined/</a></p><p>如果是本地搭建的 selenium gird，VNC搜索栏输入 localhost:VNC所需端口，回车，密码为 secret。</p><p>如果控制节点为 hub 地址，远程 VNC 地址为 hub地址:vnc所需端口。</p><p>本地测试结果：</p><p><img src="2.png" alt=""></p><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><ol><li><p><a href="https://segmentfault.com/a/1190000041078669">安装Docker Desktop：基于WSL2，WSL vs Hyper-V</a></p></li><li><p><a href="https://www.cnblogs.com/zuxing/articles/8780661.html">Docker：网络模式详解</a></p></li><li><p><a href="https://www.selenium.dev/zh-cn/documentation/webdriver/drivers/remote_webdriver/">官方文档：远程WebDriver</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Docker-Selenium-grid-4实现分布式测试&quot;&gt;&lt;a href=&quot;#Docker-Selenium-grid-4实现分布式测试&quot; class=&quot;headerlink&quot; title=&quot;Docker+Selenium-grid-</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于SqlAlchemy的接口测试方案</title>
    <link href="http://10185102110.github.io/2023/09/10/%E5%9F%BA%E4%BA%8ESqlAlchemy%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/"/>
    <id>http://10185102110.github.io/2023/09/10/%E5%9F%BA%E4%BA%8ESqlAlchemy%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/</id>
    <published>2023-09-10T11:16:36.000Z</published>
    <updated>2023-10-17T12:49:16.423Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>​        SQLAlchemy 是一个基于 Python 实现的对象关系映射（Object Relational Mapping，ORM）框架，该框架建立在 Python DB API 之上，使用关系对象映射进行数据库操作。简单来说，就是不需要去写原生的 sql 语句，只需要用 python 语法来操作对象就能自动映射为 sql 语句。</p><p>​        官方文档：<a href="https://www.sqlalchemy.org/">SQLAlchemy - The Database Toolkit for Python</a></p><p>​        SQLAlchemy 本身无法操作数据库，其必须使用第三方插件，通过 Dialect 和数据库交互，然后 Dialect 根据配置去调用指定的数据库 API 从而实现对数据库的操作。</p><p><img src="sqlalchemy-1.png" alt="sqlalchemy-1"></p><div class="table-container"><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>Schema/Types</td><td>表到类之间的映射规则</td></tr><tr><td>SQL Expression</td><td>sql语句</td></tr><tr><td>Engine</td><td>引擎</td></tr><tr><td>Connection Pooling</td><td>连接池</td></tr><tr><td>Dialect</td><td>数据库方言</td></tr></tbody></table></div><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install sqlalchemy</span><br><span class="line">pip install Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><h1 id="三、数据库连接"><a href="#三、数据库连接" class="headerlink" title="三、数据库连接"></a>三、数据库连接</h1><p>Engine 是 SQLAlchemy 的开始，首先通过 <code>create_engine(URL)</code> 创建一个引擎，</p><p>URL 的格式为  <code>dialect[+driver]://user:password@host/dbname[?key=value..]</code></p><p>即 <strong>数据库方言+驱动://用户名:密码@主机:端口/数据库名称</strong></p><p>不同数据库常用的创建方式如下：</p><h2 id="1-PostgreSQL"><a href="#1-PostgreSQL" class="headerlink" title="1. PostgreSQL"></a>1. PostgreSQL</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="comment"># default</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;postgresql://username:password@host:port/database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># psycopg2</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;postgresql+psycopg2://username:password@host:port/database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人大金仓,需下载方言包</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;kingbase+psycopg2://username:password@host:port/database&#x27;</span>)</span><br></pre></td></tr></table></figure><p>人大金仓的 Sqlalchemy 方言包下载地址：</p><p><a href="https://gitee.com/LFunTech/sqlalchemy_kingbase/tree/master">sqlalchemy_kingbase - 码云 - 开源中国 (gitee.com)</a></p><p>将 sqlalchemy_kingbase 文件夹放到 python 安装目录中的 Python(版本号)\Lib\site-packages\sqlalchemy\dialects，并改名为 kingbase，测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">&#x27;kingbase+psycopg2://%s:%s@%s:%s/%s&#x27;</span></span><br><span class="line">            % (<span class="string">&quot;用户名&quot;</span>, <span class="string">&quot;密码&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;port&quot;</span>, <span class="string">&quot;数据库名称&quot;</span>))</span><br><span class="line">conn = engine.connect()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2. MySQL"></a>2. MySQL</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="comment"># default</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql://username:password@host:port/database&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyMySQL</span></span><br><span class="line">engine = create_engine(<span class="string">&#x27;mysql+pymysql://username:password@host:port/database&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-Oracle"><a href="#3-Oracle" class="headerlink" title="3. Oracle"></a>3. Oracle</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(<span class="string">&#x27;oracle://username:password@host:port/database&#x27;</span>)</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&#x27;oracle+cx_oracle://username:password@host:port/database&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="四、声明映射"><a href="#四、声明映射" class="headerlink" title="四、声明映射"></a>四、声明映射</h1><p>我们的目的是在 Python 中创建的一个类可以对应数据库中的一张表，类的每个属性就是这个表的字段名。这种对应数据库中表的类，称为<strong>映射类</strong>。映射类是基于映射基类定义的，每个映射类都要继承基类<code>declarative_base()</code>。</p><p>以下是一个模型定义的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime</span><br><span class="line"></span><br><span class="line">Base = declarative_base()  <span class="comment"># 映射基类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span>  <span class="comment"># 定义映射类,继承基类,相当于数据库的一张表</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;auth_user&quot;</span>  <span class="comment"># 定义表的名字</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">&#x27;comment&#x27;</span>: <span class="string">&#x27;用户信息表&#x27;</span>&#125;  <span class="comment"># 添加注释</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Column，相当于表中的一个字段，内部定义数据类型</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)  <span class="comment"># primary_key：主键</span></span><br><span class="line">    username = Column(String(length=<span class="number">30</span>))</span><br><span class="line">    password = Column(String(length=<span class="number">128</span>))</span><br></pre></td></tr></table></figure><p>通过定义 User 类，我们有了用户表的信息，这被称为表的元数据，该表在数据库中可能并不存在。</p><p>映射定义完成后，可以创建映射类的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = User(username=<span class="string">&#x27;admin&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user.name)</span><br></pre></td></tr></table></figure><p>此时，实例对象只在运行环境中生效，并没有在数据库表中产生真正的数据。</p><p><code>create_engine(URL)</code> 连接数据库之后，可以创建表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure><p><code>create_all(engine)</code> 将在连接的数据库中，为所有映射类创建真正的数据库表结构。</p><h1 id="五、反射（测试）"><a href="#五、反射（测试）" class="headerlink" title="五、反射（测试）"></a>五、反射（测试）</h1><p>以普遍理性而言，声明映射通常是后端开发采用的策略，在测试环节，我们不需要自己定义表结构，而是希望直接将现成的数据库表反射为 Python 对象。</p><p>以下为反射示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.automap <span class="keyword">import</span> automap_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">Base = automap_base()  <span class="comment"># 定义反射基类</span></span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;sqlite:///mydatabase.db&quot;</span>)  <span class="comment"># 创建引擎</span></span><br><span class="line"></span><br><span class="line">Base.prepare(autoload_with=engine)  <span class="comment"># 反射数据库表</span></span><br><span class="line">tables = Base.classes  <span class="comment"># 获取所有表</span></span><br><span class="line"></span><br><span class="line">User = Base.classes.user  <span class="comment"># 将数据库中名为user的表反射为我们的User类，注意我们不需要定义User类</span></span><br><span class="line"></span><br><span class="line">Session = sessionmaker(bind=engine)  <span class="comment"># 创建会话，使用引擎连接资源</span></span><br><span class="line">session = Session()  <span class="comment"># 会话实例化，负责所有对象的加载和保存</span></span><br><span class="line">session.add(User(username=<span class="string">&#x27;admin&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>))  <span class="comment"># 新增一条数据</span></span><br><span class="line">session.commit()  <span class="comment"># 提交事务</span></span><br></pre></td></tr></table></figure><p>将数据库表反射为映射类后，我们就可以面向对象操作，从而取代原生 sql。</p><h1 id="六、SQLAlchemy-关键字"><a href="#六、SQLAlchemy-关键字" class="headerlink" title="六、SQLAlchemy 关键字"></a>六、SQLAlchemy 关键字</h1><p>下面总结一些关键字，用来表达 sql 语句。</p><ol><li>新增记录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = User(username=<span class="string">&#x27;admin&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">session.add(user)</span><br></pre></td></tr></table></figure><ol><li>批量新增记录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user1 = User(username=<span class="string">&#x27;admin1&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">user2 = User(username=<span class="string">&#x27;admin2&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">session.add_all(user1, user2)</span><br></pre></td></tr></table></figure><ol><li>更新记录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">schedule = session.query(Schedule).filter_by(scd_id=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">schedule.update(&#123;<span class="string">&quot;scd_iton&quot;</span>: <span class="string">&quot;1000&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><ol><li>删除记录</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schedule.delete()</span><br></pre></td></tr></table></figure><ol><li>提交事务</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schedule.delete()</span><br></pre></td></tr></table></figure><ol><li>回滚事务</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.rollback()</span><br></pre></td></tr></table></figure><ol><li>查询记录</li></ol><p>通过 <strong>query</strong> 关键字查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query = session.query(User)  <span class="comment"># 返回全部字段</span></span><br><span class="line">query = session.query(User.username, User.password)  <span class="comment"># 指定返回字段</span></span><br></pre></td></tr></table></figure><p><strong>query</strong> 表达式可以接关键字，关键字后又可以接关键字，但执行查询后不可以继续接关键字：</p><div class="table-container"><table><thead><tr><th><strong>关键字</strong></th><th><strong>描述</strong></th><th><strong>参数格式</strong></th></tr></thead><tbody><tr><td>query.filter()</td><td>过滤，相当于where</td><td>username = “asd”</td></tr><tr><td>query.filter_by()</td><td>同上</td><td>User.username == “asd”</td></tr><tr><td>query.group_by()</td><td>分组，相当于group by</td><td>User.username</td></tr><tr><td>query.order_by()</td><td>排序，相当于order by</td><td>User.username [.desc()]</td></tr><tr><td>query.having()</td><td>分组过滤，相当于having</td><td>User.username.in_([‘admin’, ‘asd’])</td></tr><tr><td>query.all()</td><td>执行查询，返回所有符合条件的记录</td><td>无</td></tr><tr><td>query.first()</td><td>执行查询，返回第一个符合条件的记录</td><td>无</td></tr><tr><td>query.one()</td><td>执行查询，返回唯一记录，不唯一报错</td><td>无</td></tr><tr><td>query.scalar()</td><td>执行查询，返回唯一记录，不唯一返回None</td><td>无</td></tr><tr><td>query.join()</td><td>两表连接</td><td>Voyage, Voyage.voy_scd_id == Schedule.scd_id</td></tr><tr><td>column.label()</td><td>重命名字段</td><td>无</td></tr><tr><td>aliased()</td><td>为查询出的记录设置别名</td><td>User, name=’user_alias’</td></tr><tr><td>query.limit()</td><td>设置终止索引，需要搭配all()</td><td>1</td></tr><tr><td>query.offset()</td><td>设置起始索引，需要搭配all()</td><td>1</td></tr><tr><td>query.slice()</td><td>设置切片，需要搭配all()</td><td>1，10</td></tr></tbody></table></div><p>union &amp; union all</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># union之前的各字段必须使用filter()，且不触发查询</span></span><br><span class="line">user_name = session.query(User.username).<span class="built_in">filter</span>()</span><br><span class="line">user_password = session.query(User.password).<span class="built_in">filter</span>()</span><br><span class="line">result = user_name.union_all(user_password).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>常用筛选器运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username != <span class="string">&#x27;ed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username.like(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line">query.<span class="built_in">filter</span>(User.username.ilike(<span class="string">&#x27;%ed%&#x27;</span>)) <span class="comment"># 不区分大小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># between in </span></span><br><span class="line">query.<span class="built_in">filter</span>(User.<span class="built_in">id</span>.between(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># in</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]))</span><br><span class="line">query.<span class="built_in">filter</span>(User.username.in_(</span><br><span class="line">    session.query(User.username).<span class="built_in">filter</span>(User.username.like(<span class="string">&#x27;%ed%&#x27;</span>))</span><br><span class="line">))</span><br><span class="line"><span class="comment"># not in</span></span><br><span class="line">query.<span class="built_in">filter</span>(~User.username.in_([<span class="string">&#x27;ed&#x27;</span>, <span class="string">&#x27;wendy&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>])) </span><br><span class="line"></span><br><span class="line"><span class="comment"># is</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username == <span class="literal">None</span>)</span><br><span class="line">query.<span class="built_in">filter</span>(User.username.is_(<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># is not</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username != <span class="literal">None</span>)</span><br><span class="line">query.<span class="built_in">filter</span>(User.username.is_not(<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># and</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line">query.<span class="built_in">filter</span>(and_(User.username == <span class="string">&#x27;ed&#x27;</span>, User.password == <span class="string">&#x27;Ed Jones&#x27;</span>))</span><br><span class="line">query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;ed&#x27;</span>, User.password == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line">query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;ed&#x27;</span>).<span class="built_in">filter</span>(User.password == <span class="string">&#x27;Ed Jones&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line">query.<span class="built_in">filter</span>(or_(User.username == <span class="string">&#x27;ed&#x27;</span>, User.username == <span class="string">&#x27;wendy&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># match</span></span><br><span class="line">query.<span class="built_in">filter</span>(User.username.match(<span class="string">&#x27;wendy&#x27;</span>))</span><br></pre></td></tr></table></figure><p>聚合函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数</span></span><br><span class="line">session.query(func.count(User.username)).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">session.query(func.<span class="built_in">sum</span>(User.age)).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 最大值</span></span><br><span class="line">session.query(func.<span class="built_in">max</span>(User.age)).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 最小值</span></span><br><span class="line">session.query(func.<span class="built_in">min</span>(User.age)).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 平均值</span></span><br><span class="line">session.query(func.avg(User.age)).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h1 id="七、框架演示"><a href="#七、框架演示" class="headerlink" title="七、框架演示"></a>七、框架演示</h1><p>源码地址：</p><p><a href="https://github.com/10185102110/my-sqlalchemy/blob/main/database.py">my-sqlalchemy/database.py at main · 10185102110/my-sqlalchemy (github.com)</a></p><p>XX系统数据库操作示例（多行注释为等价 sql 语句）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base.database <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据库连接信息</span></span><br><span class="line">database = &#123;</span><br><span class="line">    <span class="string">&quot;dialect&quot;</span>: <span class="string">&quot;kingbase&quot;</span>,</span><br><span class="line">    <span class="string">&quot;driver&quot;</span>: <span class="string">&quot;psycopg2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;10.166.0.xxx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: <span class="string">&quot;54321&quot;</span>,</span><br><span class="line">    <span class="string">&quot;database&quot;</span>: <span class="string">&quot;btopsdb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">orm = BaseModel(conn=database)  <span class="comment"># 获取ORM实例</span></span><br><span class="line"><span class="built_in">print</span>(orm.get_schemas())  <span class="comment"># 获取该连接的所有数据库名</span></span><br><span class="line"><span class="built_in">print</span>(orm.get_tables(<span class="string">&#x27;btops&#x27;</span>))  <span class="comment"># 获取数据库btops下的所有表名</span></span><br><span class="line"></span><br><span class="line">Schedule = orm.tables.bps_schedule  <span class="comment"># 反射船期</span></span><br><span class="line">Voyage = orm.tables.bps_voyage  <span class="comment"># 反射航次</span></span><br><span class="line"></span><br><span class="line">result1 = orm.select(Schedule).first()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT * </span></span><br><span class="line"><span class="string">FROM bps_schedule </span></span><br><span class="line"><span class="string">LIMIT 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">result2 = orm.select(Schedule.scd_id).filter_by(scd_vsl_cd=<span class="string">&#x27;TIAN ZHEN&#x27;</span>).order_by(Schedule.scd_id.desc()).<span class="built_in">all</span>()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT scd_id </span></span><br><span class="line"><span class="string">FROM bps_schedule </span></span><br><span class="line"><span class="string">WHERE scd_vsl_cd=&#x27;TIAN ZHEN&#x27; </span></span><br><span class="line"><span class="string">ORDER BY scd_id desc</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">result3 = orm.select(Voyage.voy_iefg, func.count(<span class="number">1</span>).label(<span class="string">&quot;count&quot;</span>)).group_by(Voyage.voy_iefg).having(Voyage.voy_iefg.in_([<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;E&#x27;</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT voy_iefg AS voy_iefg, count(1) AS count </span></span><br><span class="line"><span class="string">FROM bps_voyage </span></span><br><span class="line"><span class="string">GROUP BY voy_iefg </span></span><br><span class="line"><span class="string">HAVING voy_iefg IN (&#x27;I&#x27;, &#x27;E&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">result4 = orm.select(Schedule).join(Voyage, Voyage.voy_scd_id == Schedule.scd_id).add_columns(Voyage).<span class="built_in">filter</span>(Voyage.voy_trade == <span class="string">&#x27;W&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT *</span></span><br><span class="line"><span class="string">FROM bps_schedule</span></span><br><span class="line"><span class="string">JOIN bps_voyage ON bps_schedule.scd_id = bps_voyage.voy_scd_id</span></span><br><span class="line"><span class="string">WHERE bps_voyage.voy_trade = &#x27;W&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">d = orm.to_dict(result4)  <span class="comment"># 将查询结果转换为字典格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> orm.auto_commit():  <span class="comment"># 自动提交事务，适用于增删改</span></span><br><span class="line">    orm.select(Schedule).filter_by(scd_id=<span class="string">&#x27;136a53c2c7bfd5c6c0e799b07312d4f2&#x27;</span>).update(&#123;<span class="string">&quot;scd_iton&quot;</span>: <span class="string">&quot;1000&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="八、接口自动化测试"><a href="#八、接口自动化测试" class="headerlink" title="八、接口自动化测试"></a>八、接口自动化测试</h1><p>数据库校验是接口自动化测试必不可少的一块拼图，那么如何将数据库校验融入到接口测试中呢？</p><p>如果要验证某个接口的执行结果或者返回结果是否正确，首先我们会想到校验请求的状态码，通常 200 代表请求正常、401 代表认证失败、500 代表后端错误等等；但是 200 仅仅代表没有报错，无法保证业务逻辑的正确性，500 也不代表服务异常，它可能是后端进行的错误处理。</p><p>为了更精确地判断接口是否按照预期执行，可以通过响应体中的data部分进行一些字段的正确性校验。</p><p>然而，不是所有接口都会返回data，确切地说，可能返回的是data=true，然后没有了。</p><p>进一步，我们可以通过编写 sql 语句来应对接口不返回业务数据的情况：</p><ul><li>对于一个 get 请求，我们希望验证响应结果的数据量或者某条数据的正确性；</li><li>对于一个 post 新增请求，我们希望验证写入数据库的真实数据的正确性、是否存在漏写等问题；</li><li>对于一个 put/post 修改请求，我们希望验证修改的数据在数据库中是否正确变更；</li><li>对于一个 delete/post 删除请求，我们希望验证某条数据是否真正在数据库中被抹除，或是由于修改状态标记而被隐藏。</li></ul><p>考虑到实际应用，如果需要编写大量 sql 语句，且研发迭代的过程中数据库表结构会发生更改，原生 sql 的维护实在称不上优雅，随着自动化用例的规模增长，我们将陷入维护的泥沼。那么有没有一种可以实时跟进数据库表变动，甚至允许不同类型数据库之间进行迁移，且容易维护的技术呢？</p><p>下面演示如何使用 SqlAlchemy 为接口自动化测试服务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@allure.title(<span class="params"><span class="string">&quot;标题&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params">data, read_file(<span class="params"><span class="string">&quot;...&quot;</span></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_add_berth_plan</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    <span class="comment"># 读取数据，根据实际需要更改内容</span></span><br><span class="line">    payload = data[<span class="string">&quot;payload&quot;</span>]</span><br><span class="line">    <span class="comment"># 读取或定义接口地址</span></span><br><span class="line">    url = data[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">    <span class="comment"># 调用接口新增业务数据</span></span><br><span class="line">    res = self.post(url, json=payload)</span><br><span class="line">    res_json = res.json()</span><br><span class="line">    <span class="comment"># 校验状态码，建议使用响应体中的状态字段，防止误判</span></span><br><span class="line">    check.equal(<span class="built_in">int</span>(res_json[<span class="string">&quot;status&quot;</span>]), <span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 反射航次表</span></span><br><span class="line">    Voyage = self.orm.tables.bps_voyage</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 数据库根据航次号查询新增的航次数据, 使用one()确保没有重复航次名</span></span><br><span class="line">        plan = self.orm.select(Voyage).filter_by(voy_voyage=<span class="string">&#x27;B0607E&#x27;</span>).one()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        self.logger.error(<span class="string">&quot;未查询到记录或有重复记录&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 若查询无误，将查询出的对象转换为字典格式</span></span><br><span class="line">        plan_dict = self.orm.to_dict(plan)</span><br><span class="line">        <span class="comment"># 校验数据库中写入的值是否符合预期</span></span><br><span class="line">        check.equal(plan_dict[<span class="string">&quot;voy_voyage&quot;</span>], payload[<span class="string">&quot;航次&quot;</span>])</span><br><span class="line">    <span class="comment"># 清理测试数据</span></span><br><span class="line">    <span class="keyword">with</span> self.orm.auto_commit():</span><br><span class="line">        <span class="comment"># 删除该数据并提交事务</span></span><br><span class="line">        self.orm.delete(plan)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;​        SQLAlchemy 是一个基于 Python 实现的对象关系映射（Object</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>APP自动化环境配置</title>
    <link href="http://10185102110.github.io/2023/07/10/APP%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://10185102110.github.io/2023/07/10/APP%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-07-10T12:18:17.000Z</published>
    <updated>2023-10-19T12:21:50.628Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-前置配置"><a href="#1-前置配置" class="headerlink" title="1. 前置配置"></a>1. 前置配置</h1><ul><li><p>安装 JDK</p></li><li><p>安装 Node.js</p><p><img src="1.png" alt="1"></p></li><li><p>安装 Android Studio 并使用其下载 Android SDK</p><ul><li><p>配置环境变量</p><p><img src="2.png" alt="2"></p><p><img src="3.png" alt="3"></p></li><li><p>验证环境</p><p><img src="4.png" alt="4"></p></li><li><p>查看已连接的模拟器或真机设备，启动模拟器后会自动连接，也可以手动连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:21503(逍遥模拟器默认端口)</span><br></pre></td></tr></table></figure><p><img src="5.png" alt="5"></p></li></ul></li></ul><h1 id="2-Appium配置"><a href="#2-Appium配置" class="headerlink" title="2. Appium配置"></a>2. Appium配置</h1><ul><li><p>安装 appium-doctor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g appium-doctor</span><br></pre></td></tr></table></figure><p>验证环境：</p><p><img src="6.png" alt="6"></p></li><li><p>安装appium-desktop</p><p>下载地址：<a href="https://github.com/appium/appium-desktop/releases/">https://github.com/appium/appium-desktop/releases/</a></p><p>直接安装，不需要任何设置，最后在桌面生成appium图标，打开。</p><p>界面如下，默认监听 0.0.0.0:4723。</p><p><img src="7.png" alt="7"></p></li><li><p>点击编辑配置，稍等片刻，查询出环境变量，返回首页。</p><p><img src="8.png" alt="8"></p></li><li><p>点击启动服务器，如下图显示日志：</p><p><img src="9.png" alt="9"></p></li><li><p>点击右上角的放大镜，填写信息：</p><p><img src="10.png" alt="10"></p><p>信息来源：</p><p>| deviceName      | 模拟器或真机的 host              |<br>| ———————- | ———————————————— |<br>| automationName  | UiAutomator2，安卓自带的自动化库 |<br>| unicodeKeyboard | 使用unicodeKey键盘               |<br>| resetKeyboard   | 使用完恢复键盘设置               |<br>| platformName    | Android                          |<br>| appPackage      | package: name                    |<br>| appActivity     | launchable-activity:name         |</p><p>进入 C:\Users\admin\AppData\Local\Android\Sdk\build-tools\33.0.1 文件夹，找到有 aapt.exe 的目录，命令行输入 <code>aapt dump badging D:\CS\python\tooltest\Papp\tally.apk</code>，查找 package: name 和 launchable-activity:name。</p><p><img src="11.png" alt="11"></p><p><img src="12.png" alt="12"></p></li><li><p>填写完成后，点击右下角的启动会话（要确保有设备连接到 adb），appium 图形化界面如下：</p><p><img src="13.png" alt="13"></p></li><li><p>如果使用 python 开发脚本，安装 appium-client：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Appium-Python-Client</span><br></pre></td></tr></table></figure><p>以下为脚本示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> appium <span class="keyword">import</span> webdriver</span><br><span class="line">desired_caps = &#123;</span><br><span class="line">    <span class="string">&quot;deviceName&quot;</span>: <span class="string">&quot;127.0.0.1:21503&quot;</span>,</span><br><span class="line">    <span class="string">&quot;automationName&quot;</span>: <span class="string">&quot;UiAutomator2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unicodeKeyboard&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;resetKeyboard&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;platformName&quot;</span>: <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appPackage&quot;</span>: <span class="string">&quot;com.nuzar.btops_tally_lj&quot;</span>,</span><br><span class="line">    <span class="string">&quot;appActivity&quot;</span>: <span class="string">&quot;com.nuzar.btops_tally.MainActivity&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">driver = webdriver.Remote(<span class="string">&#x27;http://127.0.0.1:4723/wd/hub&#x27;</span>,desired_caps)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-其他问题"><a href="#3-其他问题" class="headerlink" title="3. 其他问题"></a>3. 其他问题</h1><p><img src="14.png" alt="14"></p><p>如果 sdk 下没有 tools 文件夹，打开 Android Studio：</p><p><img src="15.png" alt="15"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1-前置配置&quot;&gt;&lt;a href=&quot;#1-前置配置&quot; class=&quot;headerlink&quot; title=&quot;1. 前置配置&quot;&gt;&lt;/a&gt;1. 前置配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装 JDK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 Nod</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JMeter压力测试方案</title>
    <link href="http://10185102110.github.io/2023/05/16/JMeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/"/>
    <id>http://10185102110.github.io/2023/05/16/JMeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88/</id>
    <published>2023-05-16T03:09:20.000Z</published>
    <updated>2023-10-18T11:37:55.108Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-项目基本设置"><a href="#1-项目基本设置" class="headerlink" title="1. 项目基本设置"></a>1. 项目基本设置</h1><h2 id="1-1-结构设置"><a href="#1-1-结构设置" class="headerlink" title="1-1 结构设置"></a>1-1 结构设置</h2><p>一个简单的压力测试项目如下：</p><p><img src="压力测试-1.png" alt=""></p><p>支持全局 host，自动获取 token，数据库连接以及各项性能指标的统计，可以生成测试报告。</p><h2 id="1-2-安装插件"><a href="#1-2-安装插件" class="headerlink" title="1-2 安装插件"></a>1-2 安装插件</h2><ul><li><p>下载 jmeter-plugins-manager 的 jar 包，地址：<a href="https://jmeter-plugins.org/install/Install/">Install :: JMeter-Plugins.org</a> 。</p></li><li><p>将其放在 <code>%JMETER_HOME%/lib/ext</code> 下，重启 Jmeter，在顶部菜单可以看到选项&gt;Plugins Manager。</p></li><li>点击选项&gt;Plugins Manager，在 Available Plugins 中搜索 <code>Custom Thread Groups</code>（包含Stepping Thread Group、Ultimate Thread Group 等常用元件）和 <code>jpgc-Standard Set</code>（包含一些基本图表，如响应时间、吞吐量、命中率等），点击 Apply Changes And Restart Jmeter 即可自动安装所需插件。</li></ul><h2 id="1-3-生成测试报告"><a href="#1-3-生成测试报告" class="headerlink" title="1-3 生成测试报告"></a>1-3 生成测试报告</h2><ul><li><p>环境要求</p><ul><li>Jmeter3.0及以上</li><li>JDK1.8及以上</li><li>已有 jmx 脚本文件</li></ul></li><li><p>命令行生成</p><p>进入 jmx 脚本文件所在目录，启动 cmd 命令行，输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t D:\CS\apache-jmeter-5.5\bin\示例.jmx -l 测试结果示例.jtl -e </span><br><span class="line">-o D:\CS\apache-jmeter-5.5\bin\ResultReport</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-n：非 GUI 模式执行 Jmeter</li><li>-t：待执行测试脚本的路径，格式为 jmx</li><li>-l：测试结果的保存路径，格式为 jtl</li><li>-e：测试结束后生成测试报告</li><li>-o：测试报告的保存路径</li></ul><p>执行成功如下图所示：</p><p><img src="压力测试-2.png" alt=""></p><p>进入测试报告的保存路径，如下图所示：</p><p><img src="压力测试-3.png" alt=""></p><p>打开 index.html 即可查看测试报告，如下图所示：</p><p><img src="压力测试-4.png" alt=""></p></li><li><p>手动生成</p><ul><li><p>设置测试结果保存路径，聚合报告或汇总报告均可，如下图所示：</p><p><img src="压力测试-5.png" alt=""></p></li><li><p>测试结束后，点击工具&gt;Generate HTML report，依次选择测试结果文件、配置文件、测试报告保存路径（必须为空文件夹），生成成功则如下图所示：</p><p><img src="压力测试-6.png" alt=""></p></li></ul></li></ul><h1 id="2-常规压力测试"><a href="#2-常规压力测试" class="headerlink" title="2. 常规压力测试"></a>2. 常规压力测试</h1><h2 id="2-1-常规并发测试"><a href="#2-1-常规并发测试" class="headerlink" title="2-1 常规并发测试"></a>2-1 常规并发测试</h2><p>要测试接口的并发性能，通常可以使用线程组设置一定的并发数和测试时间。</p><ul><li><p>按照次数</p><p><img src="压力测试-7.png" alt=""></p></li><li><p>按照时间</p><p><img src="压力测试-8.png" alt=""></p></li></ul><h2 id="2-2-常见指标解释"><a href="#2-2-常见指标解释" class="headerlink" title="2-2 常见指标解释"></a>2-2 常见指标解释</h2><ul><li><p>线程数：一般称为并发量，用于观察接口的吞吐量。</p></li><li><p>持续时间：指压测运行的时间长度，用于观察接口的稳定性。</p></li><li><p>Ramp-up period：指每个请求发生的总时间间隔，单位是秒。如果线程数为 5，而 Ramp-up 时间为 10，那么每个请求之间的间隔是 10/5=2 秒。Ramp-up period 为 0 时表示同时并发请求。</p></li><li><p>TPS（Transactions per Second）：也称为吞吐量，每秒处理的事务数。</p><p>宏观上 TPS=并发数/平均响应时间，这里的并发数是指单位时间内发出的请求数量，是绝对同一时间，但是我们通常说的是相对并发，也就是线程数。</p></li><li><p>RT 响应时间（Reponse Time）：从客户端向服务器发送请求到响应接收完成的用时消耗。</p></li><li><p>平均响应时间：平均 RT 响应时间，样本数/RT 响应时间。</p></li><li><p>延迟时间（Latency Time）：从客户端向服务器发送请求到开始接收响应的时间，包括连接时间。</p></li><li><p>连接时间（Connect Time）：建立连接所花费的时间，包括 SSL 三次握手的时间。</p><p>延迟时间-连接时间可以看作请求在服务端处理的时间，如果结果较大，说明响应时间主要在服务端消耗，反之说明响应时间主要在建立 TCP 连接中消耗。</p></li></ul><h2 id="2-3-常见图表解释"><a href="#2-3-常见图表解释" class="headerlink" title="2-3 常见图表解释"></a>2-3 常见图表解释</h2><ul><li><p>聚合报告，以下图为例：</p><p><img src="压力测试-9.png" alt=""></p><ul><li>Label：每个请求的名称</li><li>样本：表示该请求发出的次数</li><li>平均值：单个请求的平均响应时间</li><li>中位数：50%请求的响应时间</li><li>90%百分位：90%请求的响应时间</li><li>95%百分位：95%请求的响应时间</li><li>99%百分位：99%请求的响应时间</li><li>最小值：最小响应时间</li><li>最大值：最大响应时间</li><li>异常%：出现错误的请求数量/请求总数</li><li>吞吐量：每秒完成的请求数量</li><li>接收/发送KB/sec：每秒从服务器接收/向服务器发送的数据量</li></ul></li><li><p>jp@gc - Active Threads Over Time</p><p>活跃线程数 vs 时间</p></li><li><p>jp@gc - Response Times Over Time</p><p>平均响应时间 vs 时间</p><p><img src="压力测试-16.png" alt=""></p></li><li><p>jp@gc - Response Latencies Over Time</p><p>响应延迟时间 vs 时间</p></li><li><p>jp@gc - Connect Times Over Time</p><p>请求连接时间 vs 时间</p></li><li><p>jp@gc - Response Times vs Threads</p><p>平均响应时间 vs 线程数</p><p><img src="压力测试-14.png" alt=""></p></li><li><p>jp@gc - Transaction Throughput vs Threads</p><p>吞吐量 vs 线程数</p></li><li><p>jp@gc - Transactions per Second</p><p>吞吐量 vs 时间</p></li><li><p>jp@gc - Response Codes per Second</p><p>状态码 vs 时间</p><p><img src="压力测试-15.png" alt=""></p></li></ul><h1 id="3-分布式锁测试"><a href="#3-分布式锁测试" class="headerlink" title="3. 分布式锁测试"></a>3. 分布式锁测试</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3-1 概念"></a>3-1 概念</h2><p>​        锁的目的是对资源进行一种并发控制。而分布式系统不可能同时保证一致性(Consistency)、 可用性(Availability) 和分区容忍性(Partition tolerance)。当有多个消费者对使用同一资源时，为了避免冲突，需要对其进行串行控制，也即同时只能有一个消费者占用某资源。Java 中的 synchronized、Lock等都是为了解决该问题而出现。分布式锁，则是基于分布式系统实现的，在系统间进行互斥访问共享资源的一种方式。</p><p>分布式锁具有以下特点：</p><ul><li>互斥性：同一时刻只能有一个线程持有锁；</li><li>可重入性：同一节点上的同一个线程可以多次获取锁；</li><li>高可用：防止分布式锁失效，防止死锁；</li><li>阻塞和非阻塞性：能够及时从阻塞状态中被唤醒。</li></ul><p>分布式锁的实现方式主要有以下几种：</p><ul><li>基于数据库，如 Mysql；</li><li>基于分布式缓存，如 Redis、Memcached 。</li></ul><h2 id="3-2-同步并发测试"><a href="#3-2-同步并发测试" class="headerlink" title="3-2 同步并发测试"></a>3-2 同步并发测试</h2><p>要验证分布式锁，就要在同一时刻让多个线程发起同一请求。有两种方法设置同步并发线程：</p><ul><li><p>通过 Ramp-up period（由于线程启动延迟，可能不会严格同步）</p><p><img src="压力测试-10.png" alt=""></p></li><li><p>通过同步定时器（可以保证同一时刻）</p><p>右键 HTTP 请求，添加&gt;定时器&gt;同步定时器。</p><p><img src="压力测试-11.png" alt=""></p><p>运行之后，使用表格查看结果，可见请求发送时间完全一致，如下图所示：</p><p><img src="压力测试-12.png" alt=""></p><p>进一步结合数据库的相关数据项变更，我们可以验证分布式锁的正确性。</p></li></ul><h1 id="4-线性负载"><a href="#4-线性负载" class="headerlink" title="4. 线性负载"></a>4. 线性负载</h1><p>在测试过程中，有时需要对被测对象不断增加压力，直至某个值后持续运行一段时间，我们可以使用 Stepping Thread Group 元件来模拟。</p><p><img src="压力测试-13.png" alt=""></p><p>参数说明：</p><ul><li>This group will start：加载到多少个线程。如图总计加载 100 个线程。</li><li>First, wait for：启动后等待多长时间启动第一个线程。</li><li>Then start：第一次启动多少线程。</li><li>Next, add/threads every：间隔多久再启动多少线程。</li><li>Using ramp-up：启动线程的时间。如图中，10 个线程在 1 秒内加载完成。</li><li>Then hold load for：线程全部启动后持续运行多长时间。</li><li>Finally, stop/threads every：间隔多久停止多少线程。如图中，每 10 秒停止 10 个线程。</li></ul><h1 id="5-步进负载和波浪形负载"><a href="#5-步进负载和波浪形负载" class="headerlink" title="5. 步进负载和波浪形负载"></a>5. 步进负载和波浪形负载</h1><p>使用 Ultimate Thread Group 元件可以设置多个线程作业计划，持续增加负载，实现稳定性测试场景和浪涌场景，注意每一行是独立的线程组，需要计算它们的时间线。</p><ul><li><p>步进负载</p><p><img src="压力测试-17.png" alt=""></p><p>参数说明：</p><ul><li>Start Thread Count：该计划总计加载的线程数。</li><li>Initial Delay, Sec：延迟多长时间启动第一个线程。</li><li>Startup Time, Sec：启动所用线程需要的时间。</li><li>Hold Load For, Sec：持续运行的时间。</li><li>Shutdown Time：在多长时间内停止所有线程。</li></ul></li><li><p>波浪形负载</p><p><img src="压力测试-18.png" alt=""></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1-项目基本设置&quot;&gt;&lt;a href=&quot;#1-项目基本设置&quot; class=&quot;headerlink&quot; title=&quot;1. 项目基本设置&quot;&gt;&lt;/a&gt;1. 项目基本设置&lt;/h1&gt;&lt;h2 id=&quot;1-1-结构设置&quot;&gt;&lt;a href=&quot;#1-1-结构</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>APP抓包配置</title>
    <link href="http://10185102110.github.io/2023/04/08/APP%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://10185102110.github.io/2023/04/08/APP%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE/</id>
    <published>2023-04-08T04:19:20.000Z</published>
    <updated>2023-10-17T11:42:52.424Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-安装抓包工具"><a href="#1-安装抓包工具" class="headerlink" title="1. 安装抓包工具"></a>1. 安装抓包工具</h1><ul><li><p>以 fiddler 为例，其他抓包工具同理。</p><p>下载地址：<a href="https://www.telerik.com/download/fiddler">https://www.telerik.com/download/fiddler</a></p></li><li><p>配置 fiddler</p><ul><li><p>Tools-&gt;Options-&gt;HTTPS</p><p><img src="抓包-1.png" alt=""></p></li><li><p>Tools-&gt;Options-&gt;Connections</p><p><img src="抓包-2.png" alt=""></p></li><li><p>Tools-&gt;Options-&gt;Appearance（改字体）</p><p><img src="抓包-3.png" alt=""></p></li><li><p>Rules-&gt;Customize Rules（添加代码，缓解与 VPN 的冲突）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> function <span class="title">DoReattach</span><span class="params">(o: Object, ea: EventArgs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ScheduledTasks.ScheduleWork(<span class="string">&quot;reattach&quot;</span>, <span class="number">1000</span>, innerReattach);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">innerReattach</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FiddlerApplication.UI.actAttachProxy();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> function <span class="title">OnRetire</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FiddlerApplication.oProxy.remove_DetachedUnexpectedly(DoReattach);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="抓包-4.png" alt=""></p></li></ul></li></ul><h1 id="2-安装证书"><a href="#2-安装证书" class="headerlink" title="2. 安装证书"></a>2. 安装证书</h1><ul><li><p>adb 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb devices # 查看设备连接状态</span><br><span class="line">adb root # 检查是否有ROOT权限</span><br><span class="line">adb reboot # 重启设备</span><br><span class="line">adb remount # 设置系统文件夹为可写入模式</span><br><span class="line">adb push ab6544ad.0 /system/etc/security/cacerts/ # 复制证书文件到该路径</span><br></pre></td></tr></table></figure></li><li><p>手动安装</p><p>从抓包工具下载证书文件，传输到模拟器中，然后复制到 /system/etc/security/cacerts/ 下，注意证书文件名为 pem 证书的 hash 值。</p></li><li><p>证书验证</p><p>打开移动设备的设置&gt;安全性和位置信息&gt;加密与凭据&gt;信任的凭据，看到抓包工具对应的证书即为安装成功。只有将证书安装为系统信任的，才能抓到 HTTPS 的请求。</p><p>如果使用真机测试，需要确保设备在同一局域网内。</p></li></ul><h1 id="3-配置流量转发"><a href="#3-配置流量转发" class="headerlink" title="3. 配置流量转发"></a>3. 配置流量转发</h1><ul><li><p>下载 Drony</p><p><a href="https://files.cnblogs.com/files/lulianqi/Drony_102.apk">https://files.cnblogs.com/files/lulianqi/Drony_102.apk</a></p></li><li><p>将 Drony 安装到模拟器</p><p>使用共享文件夹传输或者直接用内置浏览器下载并安装</p><p><img src="抓包-6.png" alt=""></p></li><li><p>打开 Drony，滑动到页面 SETTINGS，点击 Networks，点击连接的 wifi。</p><p><img src="抓包-7.png" alt=""></p><p><img src="抓包-8.png" alt=""></p><p><img src="抓包-9.png" alt=""></p></li><li><p>配置网络，需要与抓包工具的 ip 地址和端口号一致。</p><p><img src="抓包-5.png" alt=""></p><p><img src="抓包-10.png" alt=""></p><p><img src="抓包-11.png" alt=""></p><ul><li>Proxy type 选择 “Manual”；</li><li>Hostname 输入主机 ip；</li><li>Port 输入 fiddler 的端口（8888）；</li><li>Proxy type 选择 “Plain”；</li><li>Filter default value 选择 “Direct all”，</li><li>然后点击 Rules。</li></ul></li><li><p>应用设置</p><p><img src="抓包-12.png" alt=""></p><p><img src="抓包-13.png" alt=""></p></li><li><p>启动流量转发</p><p>回到初始页面，点击「OFF」使其变为 “ON” 状态，这样就可以在抓包工具看到 app 的请求。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1-安装抓包工具&quot;&gt;&lt;a href=&quot;#1-安装抓包工具&quot; class=&quot;headerlink&quot; title=&quot;1. 安装抓包工具&quot;&gt;&lt;/a&gt;1. 安装抓包工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以 fiddler 为例，其他抓包工具同理。</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Django基础</title>
    <link href="http://10185102110.github.io/2022/04/16/Django%E5%9F%BA%E7%A1%80/"/>
    <id>http://10185102110.github.io/2022/04/16/Django%E5%9F%BA%E7%A1%80/</id>
    <published>2022-04-16T11:16:36.000Z</published>
    <updated>2023-10-17T12:15:38.361Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>项目结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Django/</span><br><span class="line">    Django/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py <span class="comment"># Django项目的配置文件</span></span><br><span class="line">        urls.py <span class="comment"># Django项目的URL声明</span></span><br><span class="line">        asgi.py <span class="comment"># 项目的运行在ASGI兼容的Web服务器上的入口</span></span><br><span class="line">        wsgi.py <span class="comment"># 项目的运行在WSGI兼容的Web服务器上的入口</span></span><br><span class="line">    manage.py <span class="comment"># 管理Django项目的命令行工具</span></span><br><span class="line">    templates</span><br></pre></td></tr></table></figure><p>启动 Django 开发服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Watching for file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run &#x27;python manage.py migrate&#x27; to apply them.</span><br><span class="line">February 08, 2022 - 11:08:22</span><br><span class="line">Django version 3.2.5, using settings &#x27;Django.settings&#x27;</span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CTRL-BREAK.</span><br></pre></td></tr></table></figure><p>默认情况下，<code>runserver</code> 命令会将服务器设置为监听本机内部 IP 的 8000 端口。如果想更换服务器的监听端口，使用命令行参数：<code>python manage.py runserver 8080</code></p><p>用于开发的服务器会对每一次的访问请求重新载入一遍 python 代码，所以不需要为了让修改的代码生效而重启服务器，然而添加新文件等操作不会触发自动重新加载。</p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py startapp polls(应用名)</span></span><br></pre></td></tr></table></figure><p>以官方示例——投票应用为例，应用的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p>修改 <strong>views.py</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是 Django 中最简单的视图，如果想看见效果，需要将一个 URL 映射到它——创建 URLconf 。</p><p>在 polls/ 目录里新建一个 <strong>urls.py</strong> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在根 URLconf 文件中指定刚刚创建的 urls 模块。在 <strong>Django/urls.py</strong> 文件的 urlpatterns 列表里插入一个 <code>include()</code>， 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>函数 <code>include()</code> 允许引用其它 URLconfs。每当 Django 遇到 <code>include()</code> 时，它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。</p><p>这样就把把 <code>index</code> 视图添加进了 URLconf，重新启动服务器并访问 <a href="http://127.0.0.1:8000/polls/">127.0.0.1:8000/polls/</a>，就能看到 “Hello, world. You’re at the polls index.”</p><h3 id="函数-path"><a href="#函数-path" class="headerlink" title="函数 path()"></a>函数 path()</h3><p>函数 <code>path()</code> 具有四个参数，两个必须参数：<code>route</code> 和 <code>view</code>，两个可选参数：<code>kwargs</code> 和 <code>name</code>。</p><ul><li><p>route</p><p><code>route</code> 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，它会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p></li><li><p>view</p><p>当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个 <code>HttpRequest</code> 对象作为第一个参数。</p></li><li><p>name</p><p>为 URL 取名能使你在 Django 的任意地方唯一地引用它。</p></li></ul><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p><strong>Django/settings.py</strong> 包含项目设置的 python 模块。</p><p>通常这个配置文件使用 SQLite 作为默认数据库。</p><p>文件头部的 <code>INSTALLED_APPS</code> 设置项包括了会在项目中启用的所有 Django 应用。</p><p>通常， <code>INSTALLED_APPS</code> 默认包括了以下 Django 的自带应用：</p><ul><li><code>django.contrib.admin</code> — 管理员站点。</li><li><code>django.contrib.auth</code> — 认证授权系统。</li><li><code>django.contrib.contenttypes</code> — 内容类型框架。</li><li><code>django.contrib.sessions</code> — 会话框架。</li><li><code>django.contrib.messages</code> — 消息框架。</li><li><code>django.contrib.staticfiles</code> — 管理静态文件的框架。</li></ul><p>默认开启的某些应用需要至少一个数据表，所以，在使用它们之前需要在数据库中创建一些表。</p><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></span><br></pre></td></tr></table></figure><h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>在 Django 里写一个数据库驱动的 Web 应用的第一步是定义模型，也就是数据库结构设计和附加的其它元数据。</p><p>在这个投票应用中，需要创建两个模型：问题 <code>Question</code> 和选项 <code>Choice</code>。<code>Question</code> 模型包括问题描述和发布时间。<code>Choice</code> 模型有两个字段，选项描述和当前得票数。每个选项属于一个问题。</p><p>这些概念可以通过一个 Python 类来描述。编辑 <strong>polls/models.py</strong> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&#x27;date published&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>通过上述信息，Django 可以：</p><ul><li>为这个应用创建数据库 schema（生成 <code>CREATE TABLE</code> 语句）。</li><li>创建可以与 <code>Question</code> 和 <code>Choice</code> 对象进行交互的 Python 数据库 API。</li></ul><p>在此之前首先把 polls 应用安装到项目中。</p><blockquote><p>Django 应用是“可插拔”的。你可以在多个项目中使用同一个应用。除此之外，你还可以发布自己的应用，因为它们并不会被绑定到当前安装的 Django 上。</p></blockquote><p>为了在工程中包含这个应用，需要在配置类 <code>INSTALLED_APPS</code> 中添加设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;polls.apps.PollsConfig&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>, </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接着运行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py makemigrations polls</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 输出</span><br><span class="line">Migrations for &#x27;polls&#x27;:</span><br><span class="line">  polls\migrations\0001_initial.py</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Create model Choice</span><br></pre></td></tr></table></figure><p>通过运行 <code>makemigrations</code> 命令，Django 会检测你对模型文件的修改，并且把修改的部分储存为一次迁移。迁移是 Django 对于模型定义的变化的储存形式，可以在 <strong>polls/migrations/0001_initial.py</strong> 中阅读模型的迁移数据。</p><p><code>sqlmigrate</code> 命令接收一个迁移的名称，然后返回对应的 SQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py sqlmigrate polls 0001</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_question&quot; (</span><br><span class="line">    &quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, </span><br><span class="line">    &quot;question_text&quot; varchar(200) NOT NULL, </span><br><span class="line">    &quot;pub_date&quot; datetime NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;polls_choice&quot; (</span><br><span class="line">    &quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, </span><br><span class="line">    &quot;choice_text&quot; varchar(200) NOT NULL, </span><br><span class="line">    &quot;votes&quot; integer NOT NULL, </span><br><span class="line">    &quot;question_id&quot; bigint NOT NULL REFERENCES &quot;polls_question&quot; (&quot;id&quot;) </span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED</span><br><span class="line">);</span><br><span class="line">CREATE INDEX &quot;polls_choice_question_id_c5b4b260&quot; ON &quot;polls_choice&quot; (&quot;question_id&quot;);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>注意以下几点：</p><ul><li><p>数据库的表名是由应用名和模型名的小写形式连接而来</p></li><li><p>主键（id）会被自动创建，也可以自定义</p></li><li>默认会在外键字段名后追加字符串 <code>&quot;_id_&quot;</code>，也可以自定义</li><li>生成的 SQL 语句与所使用的数据库有关</li><li><code>sqlmigrate</code> 命令并没有真正在数据库中执行迁移，它只是把命令输出到屏幕上</li></ul><p>再次运行 <code>migrate</code> 命令，在数据库里创建新定义的模型的数据表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py migrate</span></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying polls.0001_initial... OK</span><br></pre></td></tr></table></figure><h2 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h2><p>通过以下命令打开 python 命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py shell</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from polls.models import Choice, Question  <span class="comment"># Import the model classes we just wrote.</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> No questions are <span class="keyword">in</span> the system yet.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create a new Question.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Support <span class="keyword">for</span> time zones is enabled <span class="keyword">in</span> the default settings file, so</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Django expects a datetime with tzinfo <span class="keyword">for</span> pub_date. Use timezone.now()</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> instead of datetime.datetime.now() and it will <span class="keyword">do</span> the right thing.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from django.utils import timezone</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q = Question(question_text=<span class="string">&quot;What&#x27;s new?&quot;</span>, pub_date=timezone.now())</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Save the object into the database. You have to call save() explicitly.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Now it has an ID.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.id</span></span><br><span class="line">1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Access model field values via Python attributes.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.question_text</span></span><br><span class="line">&quot;What&#x27;s new?&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.pub_date</span></span><br><span class="line">datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=&lt;UTC&gt;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change values by changing the attributes, <span class="keyword">then</span> calling save().</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.question_text = <span class="string">&quot;What&#x27;s up?&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> objects.all() displays all the questions <span class="keyword">in</span> the database.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure><p><strong>polls/models.py</strong>，给 <code>Question</code> 和 <code>Choice</code> 增加 <code>__str__()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line">    <span class="comment"># 再为此模型添加一个自定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text  </span><br></pre></td></tr></table></figure><p>再次打开命令行交互：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from polls.models import Choice, Question</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure our __str__() addition worked.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Django provides a rich database lookup API that<span class="string">&#x27;s entirely driven by</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> keyword arguments.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; Question.objects.filter(id=1)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; Question.objects.filter(question_text__startswith=&#x27;</span>What<span class="string">&#x27;)</span></span></span><br><span class="line">&lt;QuerySet [&lt;Question: What&#x27;s up?&gt;]&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Get the question that was published this year.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; from django.utils import timezone</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; current_year = timezone.now().year</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; Question.objects.get(pub_date__year=current_year)</span></span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Request an ID that doesn&#x27;</span>t exist, this will raise an exception.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.get(id=2)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">DoesNotExist: Question matching query does not exist.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lookup by a primary key is the most common <span class="keyword">case</span>, so Django provides a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shortcut <span class="keyword">for</span> primary-key exact lookups.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The following is identical to Question.objects.get(id=1).</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.get(pk=1)</span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Make sure our custom method worked.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q = Question.objects.get(pk=1)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; q.was_published_recently()</span></span><br><span class="line">True</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Give the Question a couple of Choices. The create call constructs a new</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Choice object, does the INSERT statement, adds the choice to the <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> of available choices and returns the new Choice object. Django creates</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a <span class="built_in">set</span> to hold the <span class="string">&quot;other side&quot;</span> of a ForeignKey relation</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (e.g. a question<span class="string">&#x27;s choice) which can be accessed via the API.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; q = Question.objects.get(pk=1)</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Display any choices from the related object set -- none so far.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; q.choice_set.all()</span></span></span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Create three choices.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; q.choice_set.create(choice_text=&#x27;</span>Not much<span class="string">&#x27;, votes=0)</span></span></span><br><span class="line">&lt;Choice: Not much&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; q.choice_set.create(choice_text=&#x27;</span>The sky<span class="string">&#x27;, votes=0)</span></span></span><br><span class="line">&lt;Choice: The sky&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; c = q.choice_set.create(choice_text=&#x27;</span>Just hacking again<span class="string">&#x27;, votes=0)</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Choice objects have API access to their related Question objects.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; c.question</span></span></span><br><span class="line">&lt;Question: What&#x27;s up?&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> And vice versa: Question objects get access to Choice objects.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; q.choice_set.all()</span></span></span><br><span class="line">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; q.choice_set.count()</span></span></span><br><span class="line">3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> The API automatically follows relationships as far as you need.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Use double underscores to separate relationships.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> This works as many levels deep as you want; there&#x27;</span>s no <span class="built_in">limit</span>.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Find all Choices <span class="keyword">for</span> any question whose pub_date is <span class="keyword">in</span> this year</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (reusing the <span class="string">&#x27;current_year&#x27;</span> variable we created above).</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Choice.objects.filter(question__pub_date__year=current_year)</span></span><br><span class="line">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Let<span class="string">&#x27;s delete one of the choices. Use delete() for that.</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; c = q.choice_set.filter(choice_text__startswith=&#x27;</span>Just hacking<span class="string">&#x27;)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="string">&gt;&gt; c.delete()</span></span></span><br></pre></td></tr></table></figure><h2 id="Django-管理页面"><a href="#Django-管理页面" class="headerlink" title="Django 管理页面"></a>Django 管理页面</h2><p>首先创建一个能登录管理页面的用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py createsuperuser</span></span><br></pre></td></tr></table></figure><p>输入用户名、邮箱、密码。</p><p>启动开发服务器，打开 <a href="http://127.0.0.1:8000/admin/，可以看到管理登录界面。">http://127.0.0.1:8000/admin/，可以看到管理登录界面。</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py runserver</span></span><br></pre></td></tr></table></figure><p><img src="0.png" alt=""></p><p><img src="D:\blog\source\_posts\Django基础\1.png" alt="1"></p><p>可以看到可编辑的组和用户，它们是由 <code>django.contrib.auth</code> 提供的，Django 开发的认证框架。</p><p>打开 <strong>polls/admin.py</strong> 文件，向管理页面中加入投票应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>这样 <code>Question</code> 对象就有了一个后台接口：</p><p><img src="2.png" alt=""></p><p><img src="3.png" alt=""></p><p>可以在这里增加或者修改模型数据。</p><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><p>Django 中视图的概念是一类具有相同功能和模板的网页的集合。</p><p>在投票应用中，我们需要下列几个视图：</p><ul><li>问题索引页——展示最近的几个投票问题。</li><li>问题详情页——展示某个投票的问题和不带结果的选项列表。</li><li>问题结果页——展示某个投票的结果。</li><li>投票处理器——用于响应用户为某个问题的特定选项投票的操作。</li></ul><p>在 Django 中，网页和其他内容都是从视图派生而来。每一个视图表现为一个 Python 函数（或者说方法，如果是在基于类的视图里的话）。Django 将会根据用户请求的 URL 来选择使用哪个视图。</p><p>为了将 URL 和视图关联起来，Django 使用了 ‘URLconfs’ 来配置。URLconf 将 URL 模式映射到视图。</p><p>每个视图必须要做的只有两件事：返回一个包含被请求页面内容的 <code>HttpResponse</code> 对象，或者抛出一个异常，比如 <code>Http404</code> 。</p><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><p>在 <code>polls</code> 目录里创建一个 <code>templates</code> 目录，在其中再创建一个目录 <code>polls</code>，然后在其中新建一个文件 <code>index.html</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>投票应用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>index()</code> 函数里插入了一些新内容，让它能展示数据库里以发布日期排序的最近 5 个投票问题，并使用模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/index.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure><p>render() 函数载入模板，填充上下文，再返回由它生成的 HttpResponse 对象。</p><h3 id="抛出-404-错误"><a href="#抛出-404-错误" class="headerlink" title="抛出 404 错误"></a>抛出 404 错误</h3><p>投票详情视图，如果指定问题 ID 不存在则抛出一个 Http404 异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>快捷函数：<code>get_object_or_404()</code>，尝试用 <code>get()</code> 函数获取一个对象，如果不存在就抛出 <code>Http404</code> 错误。改写代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure><h3 id="为-URL-添加命名空间"><a href="#为-URL-添加命名空间" class="headerlink" title="为 URL 添加命名空间"></a>为 URL 添加命名空间</h3><p>如果有多个应用，需要命名空间区分。</p><p>在 <strong>polls/urls.py</strong> 文件中稍作修改，加上 <code>app_name</code> 设置命名空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>编辑 <strong>polls/index.html</strong> 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写表单"><a href="#编写表单" class="headerlink" title="编写表单"></a>编写表单</h2><p><strong>polls/detail.html</strong>，添加一个 HTML <code>&lt;form&gt;</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    &#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; choice.id &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Vote&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它创建一个 POST 表单发送到服务端，接下来创建一个视图处理提交的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&#x27;choice&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;question&#x27;</span>: question,</span><br><span class="line">            <span class="string">&#x27;error_message&#x27;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;polls:results&#x27;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure><p>当有人对 Question 进行投票后， <code>vote()</code> 视图将请求重定向到 Question 的结果界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/results.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>创建一个 <strong>polls/results.html</strong> 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>投票结果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义界面和风格"><a href="#自定义界面和风格" class="headerlink" title="自定义界面和风格"></a>自定义界面和风格</h2><p>在 <code>polls</code> 目录下创建一个名为 <code>static</code> 的目录，Django 将在该目录下查找静态文件。在刚创建的 <code>static</code> 文件夹中创建一个名为 <code>polls</code> 的文件夹，再在 <code>polls</code> 文件夹中创建一个名为 <code>style.css</code> 的文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>polls/templates/polls/index.html</strong> 的文件头添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启服务器就会发现问题链接是绿色的。</p><p>在 <code>polls/static/polls</code> 目录下创建一个名为 <code>images</code> 的子目录。在这个目录中，放一张名为 <code>background.gif</code> 的图片。</p><p>在样式表（<code>polls/static/polls/style.css</code>）中添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">&quot;images/background.gif&quot;</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;p&gt;项目结构&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="Python" scheme="http://10185102110.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://10185102110.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java实现的X0语言编译器</title>
    <link href="http://10185102110.github.io/2021/12/01/X0%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>http://10185102110.github.io/2021/12/01/X0%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <published>2021-12-01T12:06:36.000Z</published>
    <updated>2021-12-03T06:31:22.880Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>编译器是将高级语言编写的程序转换成能在一台计算机上执行的等价目标代码或机器语言程序的软件系统。可以扩展到包含将一种高级语言程序转换成另一种高级语言程序的系统，或者从一种机器语言程序转换成另一种机器语言程序的系统等等。</p><p>本项目由 Java 语言编写完成，可以将事先定义好的 X0 语言转换为中间语言（采用四元式），进一步转换成目标语言（与 PL/0 语言相同的指令代码），并能用解释器运行。本项目支持代码文件的读取，编译代码的键盘输入，词法分析、语法分析、出错处理、中间代码、目标代码、符号表和运行结果的输出。</p><p>完整说明见设计文档。</p><h2 id="编译器系统结构"><a href="#编译器系统结构" class="headerlink" title="编译器系统结构"></a>编译器系统结构</h2><p><img src="0.png" alt=""></p><p>编译器的词法分析、语法分析、语义分析与中间代码生成、目标代码生成是按顺序依次进行的，语法分析通过后转入语法分析，若词法分析未通过则无法进行语法分析，语法分析通过后转入语义分析与中间代码生成，最后执行目标代码生成。</p><h1 id="X0语言文法"><a href="#X0语言文法" class="headerlink" title="X0语言文法"></a>X0语言文法</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>该语言变量有整型、整型一维数组、字符型，原则是先声明再使用。</p></li><li><p>语句有 6 种：if 语句、while 语句、read 语句、write 语句、compound 语句和 expression 语句。if 语句没有悬挂 else 二义性。输入/输出语句由保留字 read 和 write 开始。read 语句一次只读一个变量，write 语句一句只写出一个表达式。</p></li><li><p>X0 语言有两类表达式：布尔表达式和算术表达式。算术运算是左结合的，具有通常的优先关系。比较运算是非结合性的：每个没有括号的表达式只允许一种比较运算。比较运算的优先级比算术运算低。</p></li><li><p>X0 语言没有过程或函数，因此没有调用。</p></li><li><p>注释符：多行注释用 /*…*/ 括起，单行注释用 // 开头。词法分析程序并不输出注释，在词法分析阶段，注释的内容将被删掉。</p></li><li><p>终结符：采用 #，在词法分析阶段隐性添加，并用于 LL(1) 语法分析。</p></li><li><p>扩展：</p><p>1.for 语句。采用 Java 格式，例如 for(i=0;i&lt;10;i++){}。</p><p>2.求余运算符 %，优先级同乘除。</p></li></ul><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>采用 EBNF 描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">program = &quot;main&quot; &quot;&#123;&quot; declaration_list statement_list &quot;&#125;&quot;.</span><br><span class="line">declaration_list = [declaration_list declaration_stat | declaration_stat]  .</span><br><span class="line">declaration_stat = type ID &quot;;&quot; | type ID &quot;[&quot; NUM &quot;]&quot; &quot;;&quot;.</span><br><span class="line">type = &quot;int&quot; | &quot;char&quot;.</span><br><span class="line">var = ID | ID &quot;[&quot; expression &quot;]&quot;.</span><br><span class="line">statement_list = statement_list statement.</span><br><span class="line">statement = if_stat | while_stat | read_stat | write_stat | compound_stat | expression_stat.</span><br><span class="line">if_stat = &quot;if&quot; &quot;(&quot; expression &quot;)&quot; statement [ &quot;else&quot; statement].</span><br><span class="line">while_stat = &quot;while&quot; &quot;(&quot; expression &quot;)&quot; statement .</span><br><span class="line">write_stat = &quot;write&quot; expression &quot;;&quot; .</span><br><span class="line">read_stat = &quot;read&quot; var &quot;;&quot;.</span><br><span class="line">compound_stat = &quot;&#123;&quot; statement_list &quot;&#125;&quot;.</span><br><span class="line">expression_stat = expression &quot;;&quot; | &quot;;&quot;.</span><br><span class="line">expression = var &quot;=&quot; expression | simple_expr.</span><br><span class="line">simple_expr = additive_expr | additive_expr (&quot;&gt;&quot; | &quot;&lt;&quot; | &quot;&gt;=&quot; | &quot;&lt;=&quot; | &quot;==&quot; | &quot;!=&quot; ) additive_expr.</span><br><span class="line">additive_expr = term &#123;(&quot;+&quot;|&quot;-&quot;) term &#125;.</span><br><span class="line">term = factor &#123;(&quot;*&quot;|&quot;/&quot;) factor &#125;.</span><br><span class="line">factor = &quot;(&quot; expression &quot;)&quot;| var | NUM.</span><br></pre></td></tr></table></figure><h2 id="语法图"><a href="#语法图" class="headerlink" title="语法图"></a>语法图</h2><p><img src="5.png" alt=""></p><p><img src="4.png" alt=""><img src="3.png" alt=""></p><p><img src="2.png" alt=""><img src="1.png" alt=""></p><h2 id="LL1文法"><a href="#LL1文法" class="headerlink" title="LL1文法"></a>LL1文法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">S -&gt; main&#123;AU&#125;</span><br><span class="line">A -&gt; XA | $</span><br><span class="line">U -&gt; U&#x27;U</span><br><span class="line">U&#x27; -&gt; B | R | $</span><br><span class="line">X -&gt; YZ;</span><br><span class="line">Y -&gt; int | char | bool</span><br><span class="line">Z -&gt; idZ&#x27;</span><br><span class="line">Z&#x27; -&gt; [num] | $</span><br><span class="line">R -&gt; id=L;</span><br><span class="line">L -&gt; TL&#x27;</span><br><span class="line">L&#x27; -&gt; +L | -L | $</span><br><span class="line">T -&gt; FT&#x27;</span><br><span class="line">T&#x27; -&gt; *T | /T | %T | $</span><br><span class="line">F -&gt; id | num | (L)</span><br><span class="line">E -&gt; G</span><br><span class="line">G -&gt; LDL</span><br><span class="line">D -&gt; &lt; | &gt; | == | != | &lt;= | &gt;=</span><br><span class="line">G -&gt; (E)</span><br><span class="line">B -&gt; if (E)&#123;U&#125;</span><br><span class="line">B -&gt; while(E)&#123;U&#125;</span><br><span class="line">B -&gt; for(R;G;Q)&#123;U&#125;</span><br><span class="line">Q -&gt; idO | $</span><br><span class="line">O -&gt; ++ | -- | $</span><br><span class="line">B -&gt; write L;</span><br><span class="line">B -&gt; read id;</span><br></pre></td></tr></table></figure><h2 id="判断是否符合两条限制规则"><a href="#判断是否符合两条限制规则" class="headerlink" title="判断是否符合两条限制规则"></a>判断是否符合两条限制规则</h2><p>限制规则如下：</p><ol><li><p>找出图中每一个分支点，考察每一个分支点的分支的头符号是否相异；</p></li><li><p>找出图中每一个透明结构（无需读入一个符号就可以贯通），考察每一个透明结构的头符号集合和其跟随符号集合是否相异。</p></li></ol><p>经过分析上述语法图中符合两条限制规则。</p><h2 id="过程调用相关图"><a href="#过程调用相关图" class="headerlink" title="过程调用相关图"></a>过程调用相关图</h2><p><img src="6.png" alt=""></p><h2 id="语法出错定义"><a href="#语法出错定义" class="headerlink" title="语法出错定义"></a>语法出错定义</h2><ul><li>语法分析步骤数过多</li><li>语法错误，缺少xx符号</li><li>没有主函数</li><li>非法标识符</li><li>非法语句</li><li>非法数据类型</li><li>声明缺少标识符</li><li>未声明数组长度</li><li>标识符未声明</li><li>非法标识符，不能write</li><li>非法标识符，不能read</li><li>不能进行布尔运算的数据类型</li><li>非法布尔运算符</li><li>不能进行算术运算的数据类型</li><li>for 格式错误，循环因子需要++或—</li><li>词法分析未通过，无法进行语法分析</li></ul><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><h2 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h2><p>用一个数组存放指令代码，最多存储 200 个指令。</p><p>指令以字符串的形式储存，格式为：序号+指令名称+地址+指令数据。</p><h2 id="指令系统及其解释"><a href="#指令系统及其解释" class="headerlink" title="指令系统及其解释"></a>指令系统及其解释</h2><p>指令格式同 PL/0 虚拟机。即：</p><p>虚拟机指令结构 每条虚拟机指令包括三个字段： </p><ol><li><p>f：虚拟机指令名称</p></li><li><p>l：引用层与声明层的层次差或某些相近功能指令的区分码 </p></li><li><p>a：某些指令可传入的参数或运算指令的区分码</p></li></ol><div class="table-container"><table><thead><tr><th>LIT  0,a</th><th>将数a置入栈顶</th></tr></thead><tbody><tr><td>LOD 0,a</td><td>将 0,a 形成的栈地址变量值置入栈顶</td></tr><tr><td>STO 0,a</td><td>将栈顶值存到 0,a 形成的栈地址变量</td></tr><tr><td>INT  0,a</td><td>预留 a 个存储位置</td></tr><tr><td>JMP 0,a</td><td>无条件转移</td></tr><tr><td>JPC 0,a</td><td>条件转移</td></tr><tr><td>OPR 0,a</td><td>算术关系运算符</td></tr><tr><td>当 a = 0</td><td>返回调用程序</td></tr><tr><td>当 a = 2</td><td>相加</td></tr><tr><td>当 a = 3</td><td>相减</td></tr><tr><td>当 a = 4</td><td>相乘</td></tr><tr><td>当 a = 5</td><td>相除</td></tr><tr><td>当 a = 6</td><td>自加</td></tr><tr><td>当 a = 7</td><td>自减</td></tr><tr><td>当 a = 8</td><td>判相等</td></tr><tr><td>当 a = 9</td><td>判不等</td></tr><tr><td>当 a = 10</td><td>判小于</td></tr><tr><td>当 a = 11</td><td>判小于等于</td></tr><tr><td>当 a = 12</td><td>判大于</td></tr><tr><td>当 a = 13</td><td>判大于等于</td></tr><tr><td>当 a = 14</td><td>求余</td></tr><tr><td>当 a = 15</td><td>输出</td></tr></tbody></table></div><p>read 没有专门的指令，将翻译为 LIT+STO。</p><h2 id="中间代码"><a href="#中间代码" class="headerlink" title="中间代码"></a>中间代码</h2><p>编译器采用四元式作为中间代码，格式为：序号 + (运算符,操作数1,操作数 2,结果/跳转地址)。</p><p>其中运算符为 FJ 时表示 if、for、while 语句块的开始，若不满足条件则跳转到 RJ 的下一句；RJ 表示 if、for、while 语句块一次循环的结束，并无条件跳转到语句块的开始。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>Windows 10 家庭版</p><p>IntelliJ IDEA 2021.2</p><p>jdk 1.8.0_301</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h3 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h3><ul><li><p>测试目标：求 2~100 之间的全部素数</p></li><li><p>源程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* 求2~100之间的全部素数*/</span><br><span class="line"></span><br><span class="line">main &#123;</span><br><span class="line">    int num;</span><br><span class="line">    int i;    // 用于遍历</span><br><span class="line">    int fac;</span><br><span class="line">    int tag;  // 布尔符号</span><br><span class="line">    i = 2;</span><br><span class="line">    num = 100;</span><br><span class="line">    while(i &lt;= num)&#123;</span><br><span class="line">        tag = 0;</span><br><span class="line">        fac = 2;</span><br><span class="line">        while(fac &lt; i)&#123;</span><br><span class="line">            if(i%fac == 0)&#123;</span><br><span class="line">                tag = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            fac = fac+1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(tag == 0)&#123;</span><br><span class="line">            write i;  // 输出素数</span><br><span class="line">        &#125;</span><br><span class="line">        i = i+1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试步骤：</p><ol><li><p>运行主程序</p></li><li><p>点击符号表</p></li><li>点击词法分析</li><li>点击语法分析</li><li>点击中间代码</li><li>点击目标代码</li><li>点击运行结果</li></ol></li><li><p>测试结果：</p><p><img src="8.png" alt=""></p><p><img src="9.png" alt=""></p><p><img src="10.png" alt=""></p><p><img src="11.png" alt=""></p><p><img src="12.png" alt=""></p><p><img src="13.png" alt=""></p></li></ul><h3 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h3><ul><li><p>测试目标：求两个数的最小公倍数</p></li><li><p>源程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* 求两个数的最小公倍数*/</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">    read a;</span><br><span class="line">    read b;</span><br><span class="line">    if(a &lt; b)&#123;</span><br><span class="line">        //令a为较大的数</span><br><span class="line">        c = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    x = a;</span><br><span class="line">    y = b;</span><br><span class="line">    while (x % y != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x + a;</span><br><span class="line">    &#125;</span><br><span class="line">    write x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试步骤：</p><ol><li>运行主程序</li><li><p>点击选择文件，选中 LCM.txt 文件，点击确定</p></li><li><p>点击符号表</p></li><li>点击词法分析</li><li>点击语法分析</li><li>点击中间代码</li><li>点击目标代码，在弹窗内依次输入 8 和 9</li><li>点击运行结果</li></ol></li><li><p>测试结果：</p><p>略，见测试文档。</p></li></ul><h3 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a>No.3</h3><ul><li><p>测试目标：测试 for 语句的正确性，包括嵌套 for 语句</p></li><li><p>源程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/* for 循环示例*/</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int j;</span><br><span class="line">    int k;</span><br><span class="line">    for(i = 0; i &lt; 3; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j = 0;j &lt; 3;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            write j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(k = 9; k &gt;= 0; k--)</span><br><span class="line">    &#123;</span><br><span class="line">        write k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试步骤：</p><ol><li>运行主程序</li><li><p>点击选择文件，选中 for.txt 文件，点击确定</p></li><li><p>点击符号表</p></li><li>点击词法分析</li><li>点击语法分析</li><li>点击中间代码</li><li>点击目标代码</li><li>点击运行结果</li></ol></li><li><p>测试结果：</p><p>略，见测试文档。</p></li></ul><h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/10185102110/X0-compiler">https://github.com/10185102110/X0-compiler</a></p><p>文档不便公开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;编译器是将高级语言编写的程序转换成能在一台计算机上执行的等价目标代码或机器语言程序的软件系统。可以扩展到包含将一种</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://10185102110.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JUnit基础</title>
    <link href="http://10185102110.github.io/2021/11/26/JUnit%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://10185102110.github.io/2021/11/26/JUnit%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2021-11-26T12:06:36.000Z</published>
    <updated>2021-12-03T06:45:02.715Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JUnit 是一个 Java 语言的单元测试框架，目前已被主流平台集成。</p><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><p>JUnit 5 在运行时要求 Java 8 以上，但仍然可以测试使用 JDK 的以前版本编译的代码。</p><p>maven 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注解（Annotations）"><a href="#注解（Annotations）" class="headerlink" title="注解（Annotations）"></a>注解（Annotations）</h1><p>Junit5 所有支持的注解都在包 <code>org.junit.jupiter.api</code> 下。</p><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Test</td><td>表示方法是测试方法。这个注解不能声明任何属性。</td></tr><tr><td>@ParameterizedTest</td><td>表示方法是参数化测试。</td></tr><tr><td>@RepeatedTest</td><td>表示方法可以按照指定次数重复执行。</td></tr><tr><td>@TestFactory</td><td>表示方法是用于动态测试的测试工厂。</td></tr><tr><td>@TestTemplate</td><td>表示方法是为测试用例设计的模板，根据注册提供程序返回的调用上下文的数量进行多次调用。</td></tr><tr><td>@TestClassOrder</td><td>用于@Nested注解的测试类，可以配置测试类执行顺序。</td></tr><tr><td>@TestMethodOrder</td><td>用于为测试类配置测试方法执行顺序。</td></tr><tr><td>@TestInstance</td><td>用于为测试类配置测试实例生命周期。</td></tr><tr><td>@DisplayName</td><td>为测试类或测试方法声明自定义的显示名称。</td></tr><tr><td>@DisplayNameGeneration</td><td>为测试类声明一个自定义的显示名称生成器。</td></tr><tr><td>@BeforeEach</td><td>表示方法应该在当前类的每个@Test，@RepeatedTest，@ParameterizedTest或@TestFactory方法之前执行。</td></tr><tr><td>@AfterEach</td><td>表示方法应该在当前类的每个@Test，@RepeatedTest，@ParameterizedTest或@TestFactory方法之后执行。</td></tr><tr><td>@BeforeAll</td><td>表示方法应该在当前类的所有@Test，@RepeatedTest，@ParameterizedTest和@TestFactory方法之前执行。</td></tr><tr><td>@AfterAll</td><td>表示方法应该在当前类的所有@Test，@RepeatedTest，@ParameterizedTest和@TestFactory方法之后执行。</td></tr><tr><td>@Nested</td><td>表示一个非静态的嵌套测试类。除非使用“per-class”测试实例生命周期，否则@BeforeAll和@AfterAll方法不能直接在@Nested测试类中使用。</td></tr><tr><td>@Tag</td><td>在类或方法级别声明标签，用于过滤测试。</td></tr><tr><td>@Disabled</td><td>用于禁用测试类或测试方法。</td></tr><tr><td>@Timeout</td><td>用于测试方法、测试工厂、测试模板或生命周期方法，在其执行超过指定时间时失败。</td></tr><tr><td>@ExtendWith</td><td>用于注册自定义扩展。</td></tr><tr><td>@RegisterExtension</td><td>用于通过字段以编程方式注册扩展。</td></tr><tr><td>@TempDir</td><td>用于在生命周期方法或测试方法中通过字段注入或参数注入临时目录。</td></tr></tbody></table></div><p><strong>参数化测试</strong>使用 @ParameterizedTest 注解代替 @Test，可以使用不同的参数多次运行同一个测试方法。但是必须至少声明一个参数源，然后在测试方法中使用这些参数。配合 @ParameterizedTest 使用的参数源注解如下：</p><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@ValueSource</td><td>最简单的参数源。可以指定一个一维数组，并且在参数化测试时提供单个参数。</td></tr><tr><td>@NullSource</td><td>为参数化测试方法提供一个空参数，不能用于基本类型参数。</td></tr><tr><td>@EmptySource</td><td>为参数化测试方法提供一个空参数，用于以下类型的参数: java.lang.String, java.util.List, java.util.Set, java.util.Map, primitive arrays , object arrays，但是不支持它们的子类型。</td></tr><tr><td>@NullAndEmptySource</td><td>一个组合注释，结合了@NullSource和@EmptySource的功能。</td></tr><tr><td>@EnumSource</td><td>提供一种使用枚举常量的方便方法。</td></tr><tr><td>@MethodSource</td><td>可以引用测试类或外部类的一个或多个工厂方法。</td></tr><tr><td>@CsvSource</td><td>可以用逗号分隔的值来表达参数列表。通过value属性提供的每个字符串表示一个CSV行，并导致对参数化测试的一次调用。</td></tr><tr><td>@CsvFileSource</td><td>使用类路径或本地文件系统中 CSV 文件(逗号分隔的)作为参数源，文件中的每一行都会导致对参数化测试的一次调用。</td></tr><tr><td>@ArgumentsSource</td><td>用来指定一个自定义的、可重用的ArgumentsProvider（必须声明为顶级类或静态嵌套类）。</td></tr></tbody></table></div><h1 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h1><h2 id="测试类和方法"><a href="#测试类和方法" class="headerlink" title="测试类和方法"></a>测试类和方法</h2><p>测试类（Test Class）是至少包含一个测试方法的任意顶级类、静态成员类或者 @Nested 注解的类。测试类不能是抽象的，且必须有一个构造函数。</p><p>测试方法（Test Method）是直接使用 @Test、@RepeatedTest、@ParameterizedTest、@TestFactory 或 @TestTemplate 或者使用这些注解组合的元注解的方法。</p><p>生命周期方法（Lifecycle Method）是任意被 @BeforeAll, @AfterAll, @BeforeEach 或 @AfterEach 注解的方法。</p><p>一个标准的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.fail;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">succeedingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fail(<span class="string">&quot;a failing test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled(&quot;for demonstration purposes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">skippedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// not executed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">abortedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(<span class="string">&quot;abc&quot;</span>.contains(<span class="string">&quot;Z&quot;</span>));</span><br><span class="line">        fail(<span class="string">&quot;test should have been aborted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDownAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示名称（Display-Names）"><a href="#显示名称（Display-Names）" class="headerlink" title="显示名称（Display Names）"></a>显示名称（Display Names）</h2><p>测试类和测试方法可以声明自定义显示名称：带有空格、特殊字符甚至表情符号，由测试运行器和测试报告显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;A special test case&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayNameDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;Custom test name containing spaces&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithDisplayNameContainingSpaces</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;╯°□°）╯&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithDisplayNameContainingSpecialCharacters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;😱&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithDisplayNameContainingEmoji</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还提供了两种方法自动生成展示名称：</p><ul><li>@DisplayNameGeneration，将 value 设置为 ReplaceUnderscores 时，会把方法名的所有下划线替换为空格显示。</li><li>@IndicativeSentencesGeneration，测试类名+连接符+测试方法名，并且类名和方法名的下划线都会被替换成空格。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayNameGeneration;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayNameGenerator;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.IndicativeSentencesGeneration;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisplayNameGeneratorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A_year_is_not_supported</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_zero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@DisplayName(&quot;A negative value for year is not supported by the leap year computation.&quot;)</span></span><br><span class="line">        <span class="meta">@ParameterizedTest(name = &quot;For example, year &#123;0&#125; is not supported.&quot;)</span></span><br><span class="line">        <span class="meta">@ValueSource(ints = &#123; -1, -4 &#125;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_negative</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@IndicativeSentencesGeneration(separator = &quot; -&gt; &quot;, generator = DisplayNameGenerator.ReplaceUnderscores.class)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A_year_is_a_leap_year</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_divisible_by_4_but_not_by_100</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@ParameterizedTest(name = &quot;Year &#123;0&#125; is a leap year.&quot;)</span></span><br><span class="line">        <span class="meta">@ValueSource(ints = &#123; 2016, 2020, 2048 &#125;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">if_it_is_one_of_the_following_years</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="断言（Assertions）"><a href="#断言（Assertions）" class="headerlink" title="断言（Assertions）"></a>断言（Assertions）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMillis;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMinutes;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertAll;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertNotNull;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertThrows;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTimeout;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssertTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">standardAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        assertNotEquals(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言期望数组等于实际数组,数组中元素的数量和顺序必须相同</span></span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        assertArrayEquals(arr1,arr2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//断言期望和实际的可迭代项高度相等,集合中元素的数量和顺序必须相同</span></span><br><span class="line">        Iterable&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">        Iterable&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>));</span><br><span class="line">        assertIterableEquals(list1, list2);</span><br><span class="line"></span><br><span class="line">        assertTrue(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sameObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言预期和实际是否引用同一对象</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        assertNotSame(s1,s2);</span><br><span class="line">        assertSame(s1,s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">groupedAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言组会报告所有错误</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person().getDefaultPerson();</span><br><span class="line">        assertAll(<span class="string">&quot;person&quot;</span>,</span><br><span class="line">                () -&gt; assertEquals(<span class="string">&quot;John&quot;</span>, person.getFirstName()),</span><br><span class="line">                () -&gt; assertEquals(<span class="string">&quot;Doe&quot;</span>, person.getLastName())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dependentAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在一个代码块内，如果一个断言失败，之后的代码会被跳过</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person().getDefaultPerson();</span><br><span class="line">        assertAll(<span class="string">&quot;properties&quot;</span>,</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    String firstName = person.getFirstName();</span><br><span class="line">                    assertNotNull(firstName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 前面的断言有效才执行</span></span><br><span class="line">                    assertAll(<span class="string">&quot;first name&quot;</span>,</span><br><span class="line">                            () -&gt; assertTrue(firstName.startsWith(<span class="string">&quot;J&quot;</span>)),</span><br><span class="line">                            () -&gt; assertTrue(firstName.endsWith(<span class="string">&quot;n&quot;</span>))</span><br><span class="line">                    );</span><br><span class="line">                &#125;,</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    String lastName = person.getLastName();</span><br><span class="line">                    assertNull(lastName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 前面的断言无效，不执行</span></span><br><span class="line">                    assertAll(<span class="string">&quot;last name&quot;</span>,</span><br><span class="line">                            () -&gt; assertTrue(lastName.startsWith(<span class="string">&quot;D&quot;</span>)),</span><br><span class="line">                            () -&gt; assertTrue(lastName.endsWith(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exceptionTesting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言所提供的Executable的执行将引发expectedType的异常并返回该异常。</span></span><br><span class="line">        Throwable exception = assertThrows(IllegalArgumentException.class, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;a message&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        assertEquals(<span class="string">&quot;a message&quot;</span>, exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果测试用例中的给定任务花费的时间超过指定的持续时间，则测试将失败。</span></span><br><span class="line">        assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceededWithResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言成功则返回对象。</span></span><br><span class="line">        String actualResult = assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;a result&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        assertEquals(<span class="string">&quot;a result&quot;</span>, actualResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceededWithMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 断言成功并返回函数执行的结果</span></span><br><span class="line">        String actualGreeting = assertTimeout(ofMinutes(<span class="number">2</span>), AssertTest::greeting);</span><br><span class="line">        assertEquals(<span class="string">&quot;Hello, World!&quot;</span>, actualGreeting);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutExceeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 超时，断言失败</span></span><br><span class="line">        assertTimeout(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutExceededWithPreemptiveTermination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 超时，断言失败</span></span><br><span class="line">        assertTimeoutPreemptively(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">            <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> firstName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lastName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">getDefaultPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;ryo&quot;</span>, <span class="string">&quot;12222&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-Kotlin-的断言"><a href="#支持-Kotlin-的断言" class="headerlink" title="支持 Kotlin 的断言"></a>支持 Kotlin 的断言</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-kotlin">https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-kotlin</a></p><h3 id="第三方断言库"><a href="#第三方断言库" class="headerlink" title="第三方断言库"></a>第三方断言库</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-third-party">https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-third-party</a></p><h2 id="假设（Assumptions）"><a href="#假设（Assumptions）" class="headerlink" title="假设（Assumptions）"></a>假设（Assumptions）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumingThat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssumptionsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testOnlyOnWindowsNT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设正确，如果失败则将第二个参数作为失败提示</span></span><br><span class="line">        assumeTrue(<span class="string">&quot;Windows&quot;</span>.equals(System.getenv(<span class="string">&quot;OS&quot;</span>)),</span><br><span class="line">                () -&gt; <span class="string">&quot;环境不匹配，当前环境:&quot;</span> + System.getenv(<span class="string">&quot;OS&quot;</span>));</span><br><span class="line">        <span class="comment">//System.getenv()读取当前系统环境的环境变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testInAllEnvironments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一个参数正确才执行第二个参数</span></span><br><span class="line">        assumingThat(<span class="string">&quot;Windows_NT&quot;</span>.equals(System.getenv(<span class="string">&quot;OS&quot;</span>)),</span><br><span class="line">                () -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 只有在Windows_NT环境上执行</span></span><br><span class="line">                    assertEquals(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在所有环境下执行</span></span><br><span class="line">        assertEquals(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用（Disabling-Tests）"><a href="#禁用（Disabling-Tests）" class="headerlink" title="禁用（Disabling Tests）"></a>禁用（Disabling Tests）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用类</span></span><br><span class="line"><span class="meta">@Disabled</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DisabledClassDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWillBeSkipped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnableClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用方法</span></span><br><span class="line">    <span class="meta">@Disabled</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWillBeSkipped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件执行（Conditional-Test-Execution）"><a href="#条件执行（Conditional-Test-Execution）" class="headerlink" title="条件执行（Conditional Test Execution）"></a>条件执行（Conditional Test Execution）</h2><h3 id="操作系统条件"><a href="#操作系统条件" class="headerlink" title="操作系统条件"></a>操作系统条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledOnOs;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledOnOs;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.OS.LINUX;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.OS.MAC;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.OS.WINDOWS;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperateSysCondition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnOs(WINDOWS)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnWindows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只在Windows执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestOnWin</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testOnWin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据已经有的注解，组合而成的新注解，功能同上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnOs(&#123; LINUX, MAC &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLinuxOrMac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledOnOs(WINDOWS)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnWindows</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 在windows禁用该用例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnOs(WINDOWS)</span></span><br><span class="line">    <span class="meta">@interface</span> TestOnWin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-环境条件"><a href="#Java-环境条件" class="headerlink" title="Java 环境条件"></a>Java 环境条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledOnJre;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledOnJre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.JRE.JAVA_10;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.JRE.JAVA_8;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.condition.JRE.JAVA_9;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JRECondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnJre(JAVA_8)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnJava8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledOnJre(&#123; JAVA_9, JAVA_10 &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onJava9Or10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledOnJre(JAVA_9)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnJava9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统属性条件"><a href="#系统属性条件" class="headerlink" title="系统属性条件"></a>系统属性条件</h3><p>系统属性 named 的值是否匹配 matches 的值，匹配就启用测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledIfSystemProperty;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledIfSystemProperty;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemPropertyCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledIfSystemProperty(named = &quot;java.vm.specification.version&quot;, matches = &quot;1.8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnVM1_8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印所有系统属性值</span></span><br><span class="line">        System.getProperties().forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot; = &quot;</span> + v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledIfSystemProperty(named = &quot;java.vm.specification.version&quot;, matches = &quot;1.8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnVM1_8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境变量条件"><a href="#环境变量条件" class="headerlink" title="环境变量条件"></a>环境变量条件</h3><p>系统环境变量 named 的值是否匹配 matches 的值，匹配就启用测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnvVarCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledIfEnvironmentVariable(named = &quot;OS&quot;, matches = &quot;Windows_NT&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onlyOnWindowsNT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledIfEnvironmentVariable(named = &quot;OS&quot;, matches = &quot;Windows_NT&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notOnWindowsNT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义条件"><a href="#自定义条件" class="headerlink" title="自定义条件"></a>自定义条件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.DisabledIf;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.condition.EnabledIf;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCondition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@EnabledIf(&quot;customCondition&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisabledIf(&quot;customCondition&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标签和过滤（Tagging-and-Filtering）"><a href="#标签和过滤（Tagging-and-Filtering）" class="headerlink" title="标签和过滤（Tagging and Filtering）"></a>标签和过滤（Tagging and Filtering）</h2><p>通过 <code>@Tag</code> 注释对测试类和方法进行标记，这些标记稍后可用于筛选测试发现和执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Tag;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tag(&quot;fast&quot;)</span></span><br><span class="line"><span class="meta">@Tag(&quot;model&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaggingDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Tag(&quot;taxes&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testingTaxCalculation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行顺序（Test-Execution-Order）"><a href="#执行顺序（Test-Execution-Order）" class="headerlink" title="执行顺序（Test Execution Order）"></a>执行顺序（Test Execution Order）</h2><ul><li><p>方法排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.MethodOrderer.OrderAnnotation;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestMethodOrder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestMethodOrder(OrderAnnotation.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedTestsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nullValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">emptyValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(3)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">validValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.ClassOrderer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestClassOrder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestClassOrder(ClassOrderer.OrderAnnotation.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedNestedTestClassesDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PrimaryTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SecondaryTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内嵌测试（Nested-Tests）"><a href="#内嵌测试（Nested-Tests）" class="headerlink" title="内嵌测试（Nested Tests）"></a>内嵌测试（Nested Tests）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertFalse;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertThrows;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingAStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isInstantiatedWithNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WhenNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">createNewStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AfterPushing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String anElement = <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">pushAnElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">isNotEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="0.png" alt=""></p><h2 id="依赖注入（Dependency-Injection-for-Constructors-and-Methods）"><a href="#依赖注入（Dependency-Injection-for-Constructors-and-Methods）" class="headerlink" title="依赖注入（Dependency Injection for Constructors and Methods）"></a>依赖注入（Dependency Injection for Constructors and Methods）</h2><ul><li><p>TestInfo 检索当前测试的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Tag;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;TestInfo Demo&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestInfoDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestInfoDemo(TestInfo testInfo) &#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;TestInfo Demo&quot;</span>, testInfo.getDisplayName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(TestInfo testInfo)</span> </span>&#123;</span><br><span class="line">        String displayName = testInfo.getDisplayName();</span><br><span class="line">        assertTrue(displayName.equals(<span class="string">&quot;TEST 1&quot;</span>) || displayName.equals(<span class="string">&quot;test2()&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;TEST 1&quot;)</span></span><br><span class="line">    <span class="meta">@Tag(&quot;my-tag&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">(TestInfo testInfo)</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;TEST 1&quot;</span>, testInfo.getDisplayName());</span><br><span class="line">        assertTrue(testInfo.getTags().contains(<span class="string">&quot;my-tag&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TestReporter 发布当前测试运行的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestReporter;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestReporterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reportSingleValue</span><span class="params">(TestReporter testReporter)</span> </span>&#123;</span><br><span class="line">        testReporter.publishEntry(<span class="string">&quot;a key&quot;</span>, <span class="string">&quot;a value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reportSeveralValues</span><span class="params">(TestReporter testReporter)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; values = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        values.put(<span class="string">&quot;user name&quot;</span>, <span class="string">&quot;dk38&quot;</span>);</span><br><span class="line">        values.put(<span class="string">&quot;award year&quot;</span>, <span class="string">&quot;1974&quot;</span>);</span><br><span class="line"></span><br><span class="line">        testReporter.publishEntry(values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timestamp = 2021-11-06T15:13:31.503, a key = a value</span><br><span class="line">timestamp = 2021-11-06T15:13:31.534, user name = dk38, award year = 1974</span><br></pre></td></tr></table></figure></li></ul><h2 id="重复测试（Repeated-Tests）"><a href="#重复测试（Repeated-Tests）" class="headerlink" title="重复测试（Repeated Tests）"></a>重复测试（Repeated Tests）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.RepeatedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.RepetitionInfo;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeatedTestsDemo</span> </span>&#123;</span><br><span class="line">    Logger logger = Logger.getLogger(RepeatedTestsDemo.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">(TestInfo testInfo, RepetitionInfo repetitionInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentRepetition = repetitionInfo.getCurrentRepetition();</span><br><span class="line">        <span class="keyword">int</span> totalRepetitions = repetitionInfo.getTotalRepetitions();</span><br><span class="line">        String methodName = testInfo.getTestMethod().get().getName();</span><br><span class="line">        logger.info(String.format(<span class="string">&quot;About to execute repetition %d of %d for %s&quot;</span>, <span class="comment">//</span></span><br><span class="line">                currentRepetition, totalRepetitions, methodName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(10)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">repeatedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(value = 5, name = &quot;Wiederholung &#123;currentRepetition&#125; von &#123;totalRepetitions&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">repeatedTestInGerman</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="1.png" alt=""></p><h2 id="参数化测试（Parameterized-Tests）"><a href="#参数化测试（Parameterized-Tests）" class="headerlink" title="参数化测试（Parameterized Tests）"></a>参数化测试（Parameterized Tests）</h2><ul><li><p>@ValueSource，数组的方式，支持基本类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(ints = &#123; 1, 2, 3 &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithValueSource</span><span class="params">(<span class="keyword">int</span> argument)</span> </span>&#123;</span><br><span class="line">        assertTrue(argument &gt; <span class="number">0</span> &amp;&amp; argument &lt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@EnumSource，使用 Enum 常量，可以指定哪些常量被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.EnumSource;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(TimeUnit.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithEnumSource</span><span class="params">(TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        assertNotNull(timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(value = TimeUnit.class, names = &#123;&quot;DAYS&quot;, &quot;HOURS&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithEnumSourceInclude</span><span class="params">(TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        assertTrue(EnumSet.of(TimeUnit.DAYS, TimeUnit.HOURS).contains(timeUnit));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@MethodSource，引用测试类或外部类的一个或多个工厂方法。工厂方法不能接受任何参数，<br>且必须是静态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.MethodSource;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;stringProvider&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithSimpleMethodSource</span><span class="params">(String argument)</span> </span>&#123;</span><br><span class="line">        assertNotNull(argument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">stringProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个参数需要返回参数实例的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.Arguments;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.MethodSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;stringIntAndListProvider&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWithMultiArgMethodSource</span><span class="params">(String str, <span class="keyword">int</span> num, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">3</span>, str.length());</span><br><span class="line">        assertTrue(num &gt;=<span class="number">1</span> &amp;&amp; num &lt;=<span class="number">2</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title">stringIntAndListProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">                Arguments.of(<span class="string">&quot;foo&quot;</span>, <span class="number">1</span>, Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)),</span><br><span class="line">                Arguments.of(<span class="string">&quot;bar&quot;</span>, <span class="number">2</span>, Arrays.asList(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@CsvSource，将参数列表表示为逗号分隔的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvSource(&#123; &quot;foo, 1&quot;, &quot;bar, 2&quot;, &quot;&#x27;baz, qux&#x27;, 3&quot; &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWithCsvSource</span><span class="params">(String first, <span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">    assertNotNull(first);</span><br><span class="line">    assertNotEquals(<span class="number">0</span>, second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@CsvFileSource，使用类路径中的 CSV 文件。CSV 文件中的每一行都会调用一次参数化测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvFileSource(resources = &quot;/two-column.csv&quot;, numLinesToSkip = 1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWithCsvFileSource</span><span class="params">(String first, <span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">    assertNotNull(first);</span><br><span class="line">    assertNotEquals(<span class="number">0</span>, second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义显示名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;Display name of container&quot;)</span></span><br><span class="line"><span class="meta">@ParameterizedTest(name = &quot;&#123;index&#125; ==&gt; first=&#x27;&#x27;&#123;0&#125;&#x27;&#x27;, second=&#123;1&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CsvSource(&#123; &quot;foo, 1&quot;, &quot;bar, 2&quot;, &quot;&#x27;baz, qux&#x27;, 3&quot; &#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testWithCustomDisplayNames</span><span class="params">(String first, <span class="keyword">int</span> second)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试模板（Test-Templates）"><a href="#测试模板（Test-Templates）" class="headerlink" title="测试模板（Test Templates）"></a>测试模板（Test Templates）</h2><p>根据注册提供程序返回的调用上下文的数量，多次调用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.Extension;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtensionContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ParameterContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ParameterResolver;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.TestTemplateInvocationContext;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.TestTemplateInvocationContextProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestTemplateInvocationContextProvider</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">TestTemplateInvocationContextProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsTestTemplate</span><span class="params">(ExtensionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Stream&lt;TestTemplateInvocationContext&gt; <span class="title">provideTestTemplateInvocationContexts</span><span class="params">(ExtensionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(invocationContext(<span class="string">&quot;foo&quot;</span>), invocationContext(<span class="string">&quot;bar&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TestTemplateInvocationContext <span class="title">invocationContext</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestTemplateInvocationContext() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayName</span><span class="params">(<span class="keyword">int</span> invocationIndex)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> parameter;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Extension&gt; <span class="title">getAdditionalExtensions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> ParameterResolver() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(ParameterContext parameterContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                     ExtensionContext extensionContext)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> parameterContext.getParameter().getType().equals(String.class);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveParameter</span><span class="params">(ParameterContext parameterContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                   ExtensionContext extensionContext)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> parameter;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTemplate</span></span><br><span class="line">    <span class="meta">@ExtendWith(MyTestTemplateInvocationContextProvider.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testTemplate</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">3</span>, parameter.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://junit.org/junit5/docs/current/user-guide/">JUnit 5 User Guide</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;JUnit 是一个 Java 语言的单元测试框架，目前已被主流平台集成。&lt;/p&gt;
&lt;p&gt;JUnit 5 = JUn</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>pytest 测试框架</title>
    <link href="http://10185102110.github.io/2021/11/04/pytest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://10185102110.github.io/2021/11/04/pytest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2021-11-04T07:40:36.000Z</published>
    <updated>2021-11-04T07:44:42.263Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>与 unittest 单元测试框架大同小异，但是 pytest 更灵活美观，代码也是原生的 python 风格。</p><p>需要安装第三方库，我的环境是 python-3.8.3 + pytest-5.4.3。</p><h1 id="pytest-规则"><a href="#pytest-规则" class="headerlink" title="pytest 规则"></a>pytest 规则</h1><ul><li>文件命名默认以 “test_” 开头或 “_test” 结尾；</li><li>测试类命名默认以 “Test” 开头；</li><li>函数命名默认以 “test_” 开头；</li><li>断言直接使用 python 的 assert；</li><li>和 unittest 一样，“.”代表断言成功，“F”代表断言失败。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStorm</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;test_1.py&quot;</span>])</span><br></pre></td></tr></table></figure><p>也可以把测试用例放在 class 外面，直接定义函数并执行。</p><h1 id="测试固件"><a href="#测试固件" class="headerlink" title="测试固件"></a>测试固件</h1><p>用于 class 外：</p><ul><li>setup_module 和 teardown_module，在整个文件的开始和最后执行一次。</li><li>setup_function 和 teardown_function，在每个函数开始前后执行。</li></ul><p>用于 class 内：</p><ul><li>setup_class 和 teardown_class，在整个class的开始和最后执行一次。</li><li>setup_method 和 teardown_method，在每个方法开始前后执行。</li></ul><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setup_class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown_class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setup_method&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;teardown_method&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="number">5</span> &gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;Storm&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;Hello Storm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;test_1.py&quot;</span>])</span><br></pre></td></tr></table></figure><p>如果测试用例定义在 class 外，则没有 self 参数。</p><p><code>pytest.main([&quot;-s&quot;])</code> 会执行当前文件所在目录下所有符合条件的测试用例，添加文件名可以指定执行一个文件，<code>pytest.main([&quot;-s&quot;, &quot;test_1.py::Test01&quot;])</code> 可以指定执行某个类。</p><h1 id="失败重试"><a href="#失败重试" class="headerlink" title="失败重试"></a>失败重试</h1><p>Pytest 本身不支持测试用例执行失败重试的功能，需要安装一个插件：pytest rerunfailures，然后就可以通过 “—reruns重试次数” 来设置测试用例执行失败后的重试次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test02</span>():</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;c&#x27;</span>  <span class="comment"># 让其执行失败</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_c</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;c&#x27;</span> == <span class="string">&#x27;c&#x27;</span> </span><br></pre></td></tr></table></figure><p>在命令行使用 “pytest test_1.py —reruns 2” 执行测试用例，结果如下：</p><p><img src="0.png" alt=""></p><p>可以指定断言失败后的重试间隔时间，增加 “—-reruns-delay” 参数。</p><p>例如 “pytest test_1.py —reruns 2 —reruns-delay 2”</p><h1 id="标记机制"><a href="#标记机制" class="headerlink" title="标记机制"></a>标记机制</h1><p>Pytest 提供了标记机制，借助 “mark” 关键字可以对测试函数/类/方法进行标记。</p><ul><li><p>对测试用例进行分级</p><p>例如某些主流程的用例可以标记为 L1，次要流程的用例标记为 L2 等。这样的好处是可以在不同的情况执行不同的测试用例。例如，在做冒烟测试的时候，只需要执行 L1 级别的用例就行了。</p><p>一个测试用例可以标注多个级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line"><span class="meta">      @pytest.mark.L1</span></span><br><span class="line"><span class="meta">      @pytest.mark.L2</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @pytest.mark.L2</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test02</span>():</span></span><br><span class="line"><span class="meta">      @pytest.mark.L1</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_c</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;c&#x27;</span> == <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @pytest.mark.L3</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_d</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">           <span class="keyword">assert</span> <span class="string">&#x27;d&#x27;</span> == <span class="string">&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure><p>pytest -s “test_1.py”  -m “L1” 可以只执行 L1 级别的用例。</p><p>pytest -s “test_1.py”  -m “L1 or L2” 可以执行 L1 和 L2 级别的用例。</p><p>pytest -s “test_1.py”  -m “not L1” 可以执行非 L1 级别的用例。</p><p>添加一个 pytest.ini 文件，配置所有 mark 可以避免警告。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="attr">markers</span> = L1</span><br><span class="line">    L2</span><br><span class="line">    L3</span><br></pre></td></tr></table></figure></li><li><p>跳过某些用例</p><ul><li><p>使用 skip(reason=None) 实现无条件跳过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.skip(<span class="params">reason=<span class="string">&#x27;这里是原因&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 skipif(condition, reason=None) 实现满足条件跳过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params"><span class="number">2</span>&gt;<span class="number">1</span>, reason=<span class="string">&#x27;这里是原因&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h1><p>可以将一些配置信息写入 pytest.ini 文件，注意文件内容不能包含中文。</p><p>（1）通过关键字 “addopts” 来设置命令行参数，如 “-s” 或 “-v” 监控、失败重试的次数、重试的时间间隔、按标签来执行，多个参数之间用空格分隔。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addopts = -v --reruns 2  --reruns-delay 2 -m &quot;L1&quot;</span><br></pre></td></tr></table></figure><p>（2）自定义标签</p><p>示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markers</span> = L1:level_1</span><br><span class="line">    L2:level_2</span><br></pre></td></tr></table></figure><p>（3）自定义测试用例查找规则</p><ul><li>在当前文件目录中的 testcases 目录下查找测试用例：testpaths = testcases。</li><li>查找文件名以 “test<em>” 开头的文件，也可以修改为以其他文件名开头：python<em>file =test</em></em>*.py。</li><li>查找以 “Test*” 开头的类，也可以修改为以其他类名开头：python_classes = Test*。</li><li>查找以 “test_” 开头的函数，也可以修改为以其他函数名开头：python<em>functions = test</em>*。</li></ul><h1 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h1><p>Pytest 框架支持多种形式的测试报告。</p><ul><li><p>pythonpytest-html</p><p>这是一个第三方库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span>():</span></span><br><span class="line"><span class="meta">    @pytest.mark.L1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">&#x27;a&#x27;</span> == <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&quot;-s&quot;</span>, <span class="string">&quot;test_1.py&quot;</span>, <span class="string">&quot;--html=./report.html&quot;</span>])</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="1.png" alt=""></p><p>也可以在 pytest.ini 文件中配置，然后用命令行执行。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="attr">addopts</span> = -v --reruns <span class="number">2</span>  --reruns-delay <span class="number">2</span> -m <span class="string">&quot;L1 or L2&quot;</span> --html=./report.html</span><br><span class="line"><span class="attr">markers</span> = L1:level_1 testcases</span><br><span class="line">    L2:level_2 testcases</span><br><span class="line"><span class="attr">testpaths</span> = testcases</span><br><span class="line"><span class="attr">python_file</span> = test_*.py</span><br><span class="line"><span class="attr">python_classes</span> = Test*</span><br><span class="line"><span class="attr">python_functions</span> = test_*</span><br></pre></td></tr></table></figure></li><li><p>Allure 测试报告</p><p>Allure基于 Java 开发，因此需要安装 Java 8 或以上版本的环境。</p><p>然后用 pip 安装 allure-pytest 插件。</p><p>再手动下载文件：“allure-commandline-2.16.1.zip”：</p><p><a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.16.1/">Central Repository: io/qameta/allure/allure-commandline/2.16.1 (apache.org)</a></p><p>解压后将它的 bin 目录添加到环境变量，在命令行输入 allure 验证。</p><p>下面是示例：</p><p>新建一个 package，创建 report 文件夹，添加两个测试文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest,allure</span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;测试场景1&quot;</span></span>)      </span><span class="comment">#标记场景</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例1-1&quot;</span></span>) </span><span class="comment"># 标记测试用例</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;trivial&quot;</span></span>) </span><span class="comment"># 标记用例级别</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1_1</span>(<span class="params">self</span>):</span> <span class="comment"># 用例1</span></span><br><span class="line">           a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">           <span class="keyword">assert</span> a == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例1-2&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;critical&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.step(<span class="params"><span class="string">&#x27;用例2:重要步骤&#x27;</span></span>)</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_1_2</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="number">2</span> == <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest,allure</span><br><span class="line"></span><br><span class="line"><span class="meta">@allure.feature(<span class="params"><span class="string">&quot;测试场景2&quot;</span></span>)      </span><span class="comment">#标记代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span>():</span></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例2-1&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;minor&quot;</span></span>)</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_2_1</span>(<span class="params">self</span>):</span></span><br><span class="line">           a = <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">           <span class="keyword">assert</span> a == <span class="number">3</span>  <span class="comment"># 断言失败</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @allure.story(<span class="params"><span class="string">&quot;测试用例2-2&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.severity(<span class="params"><span class="string">&quot;minor&quot;</span></span>)</span></span><br><span class="line"><span class="meta">      @allure.step(<span class="params"><span class="string">&#x27;用例2:重要步骤&#x27;</span></span>)</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_2_2</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">assert</span> <span class="number">2</span> == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     pytest.main([<span class="string">&#x27;-s&#x27;</span>, <span class="string">&#x27;-q&#x27;</span>, <span class="string">&#x27;--alluredir&#x27;</span>, <span class="string">&#x27;./report/&#x27;</span>])</span><br></pre></td></tr></table></figure><p>运行 main 函数，report 文件夹下生成了几个 json 文件。</p><p>在命令行 cd 到该 package 路径，执行 allure generate —clean report，生成 allure-report 文件夹，查看里面的 index.html，效果如下：</p><p><img src="2.png" alt=""></p><p>默认打开的 ”Overview“ 菜单包括以下内容：</p><ul><li>报告生成的时间、执行时间、执行的用例数量、环状图显示通过比例；</li><li>测试集合（class）的情况；</li><li>测试场景；</li><li>失败用例的信息。</li></ul><p><img src="3.png" alt=""></p></li></ul><p>在 ”Categories” 菜单可以看到断言失败的具体信息。</p><p>通过 “Suites” 菜单可以测试集合树的形式查看用例执行的结果。</p><p>在 “Graphs” 菜单可以看到用例执行状态的环状图、用例级别的柱状图、用例执行时间的柱状图。</p><p><strong>定制化报告：</strong></p><ul><li>feature：标注主要功能模块。</li><li>story：标注features功能模块下的分支功能。</li><li><p>severity：标注测试用例的重要级别。</p><ul><li>blocker级别：致命缺陷。</li><li>critical级别：严重缺陷。</li><li>normal级别：一般缺陷，默认为这个级别。</li><li>minor级别：次要缺陷。</li><li>trivial级别：轻微缺陷。</li></ul></li><li><p>step：标注测试用例的重要步骤。</p></li><li>attach：用于向测试报告中输入一些附加的信息，通常是一些测试数据信息。</li><li>name就是附件名称，body就是数据，attachment_type就是传类型。附件支持的类型有TEXT、HTML、XML、PNG、JPG、JSON、OTHER。    </li><li>issue：这里传的是一个连接，记录的是你的问题。</li><li>testcase：这里传的是一个连接，记录的是你的用例。</li><li>description：描述用例信息。</li></ul><p>参考资料：</p><ul><li>李鲲程，边宇明：Python实现Web UI 自动化测试实战. 北京：人民邮电出版社，2021</li><li><a href="https://www.pytest.org/en/latest/">pytest: helps you write better programs — pytest documentation</a></li><li><a href="https://docs.qameta.io/allure/">Allure Framework (qameta.io)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;与 unittest 单元测试框架大同小异，但是 pytest 更灵活美观，代码也是原生的 python 风格。&lt;/p&gt;
&lt;p&gt;需要安装第三方库，我的环境是 python-3.8.3 + pytest-5.4.3。&lt;/p&gt;
&lt;h1 id=&quot;pyte</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>unittest测试框架</title>
    <link href="http://10185102110.github.io/2021/11/02/unittest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://10185102110.github.io/2021/11/02/unittest%20%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2021-11-02T12:06:36.000Z</published>
    <updated>2021-11-04T07:40:23.881Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>unittest 是 Python 的内置模块，支持自动化测试。</p><ul><li><p>测试固件（test fixture）</p><p>在测试之前或者之后需要做的一些操作。例如测试执行前，可能需要打开浏览器、创建数据库连接等；测试结束后，可能需要清理测试环境、关闭数据库连接等。</p><ul><li>setUp：在每个测试方法执行前执行，负责测试前的初始化工作。</li><li>tearDown：在每个测试方法结束后执行，负责测试后的清理工作。</li><li>setUpClass：在所有测试方法执行前执行，负责单元测试前期准备。必须使用@classmethod装饰器进行修饰，在setUp函数之前执行，整个测试过程只执行一次。</li><li>tearDownClass：在所有测试方法执行结束后执行，负责单元测试后期处理。必须使用@classmethod装饰器进行修饰，在tearDown函数之后执行，整个测试过程只执行一次。</li></ul><p>代码示例 test_0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStorm</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">      @classmethod</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span> <span class="comment"># 在整个class开始前执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;setUpClass&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span>  <span class="comment"># 在每个测试用例执行前执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;setUp&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_first</span>(<span class="params">self</span>):</span>  <span class="comment"># 第一个测试用例</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_second</span>(<span class="params">self</span>):</span> <span class="comment"># 第二个测试用例</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;second&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span> <span class="comment"># 在每个测试用例结束后执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;tearDown&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">      @classmethod</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span> <span class="comment"># 在整个class最后执行一次</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;tearDownClass&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Testing started at 8:57 ...</span><br><span class="line"></span><br><span class="line">Launching unittests with arguments python -m unittest test_1.TestStorm in C:\Users\AveBai\PycharmProjects\Selenium</span><br><span class="line">Ran 2 tests in 0.006s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">setUpClass</span><br><span class="line">setUp</span><br><span class="line">first</span><br><span class="line">tearDown</span><br><span class="line">setUp</span><br><span class="line">second</span><br><span class="line">tearDown</span><br><span class="line">tearDownClass</span><br></pre></td></tr></table></figure></li><li><p>测试用例（test case）</p><p>测试用例是在 unittest 中执行测试的最小单元。它通过 unittest 提供的 assert 方法来验证一组特定的操作或输入以后得到的具体响应。</p><p>测试用例包含用例执行过程和对执行结果的断言，方法名建议使用小写字母，且必须以 “test” 开头。</p></li><li><p>测试套件（test suite）</p><p>测试套件就是一组测试用例，作用是将多个测试用例放到一起，执行一个测试套件就可以将这些测试用例全部执行。</p></li><li><p>测试运行器（test runner）</p><p>用来执行测试用例，并返回测试用例执行的结果。它还可以用图形、表格、文本等方式把测试结果形象地展现出来。</p></li></ul><h1 id="构建测试结合"><a href="#构建测试结合" class="headerlink" title="构建测试结合"></a>构建测试结合</h1><ul><li><p>通过 class 构造测试集合</p><p>代码示例 test_1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFirst</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_one</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_two</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSecond</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_three</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_four</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">           self.assertEqual(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testcase2 = unittest.TestLoader().loadTestsFromTestCase(TestSecond)</span><br><span class="line">     suite = unittest.TestSuite([testcase2])</span><br><span class="line">     unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></table></figure><p>代码示例 test_2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testcase2 = unittest.TestLoader().loadTestsFromTestCase(test_1.TestSecond)</span><br><span class="line">     suite = unittest.TestSuite([testcase2])  <span class="comment">#组装测试用例</span></span><br><span class="line">     unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></table></figure><p>上述两段代码运行效果一致，但是这种方法会执行一个 class 下所有的测试用例。</p></li><li><p>通过 addTest 构建测试集合</p><p>示例代码 test_3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     suite = unittest.TestSuite()</span><br><span class="line">     suite.addTest(test_1.TestFirst(<span class="string">&quot;test_one&quot;</span>))</span><br><span class="line">     suite.addTest(test_1.TestSecond(<span class="string">&quot;test_four&quot;</span>))</span><br><span class="line">     unittest.TextTestRunner().run(suite)</span><br></pre></td></tr></table></figure><p>上述代码从 TestFirst 类中取了 test_one 测试用例，从 TestSecond 类中取了 test_four 测试用例，两者组成了一个测试用例集合。</p></li><li><p>通过 discover 构建测试集合</p><p>代码示例 test_4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testSuite = unittest.TestLoader().discover(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">     unittest.TextTestRunner(verbosity=<span class="number">2</span>).run(testSuite)</span><br></pre></td></tr></table></figure><p>这里 discover 传递的目录是一个 “.”，代表文件所在目录。执行该文件的话，就会从该文件所在目录中去寻找所有符合条件的测试用例（以 ‘test’ 开头），可以用来批量执行测试文件。</p></li></ul><h1 id="用例执行顺序"><a href="#用例执行顺序" class="headerlink" title="用例执行顺序"></a>用例执行顺序</h1><p>测试用例执行的顺序依照的是<strong>方法和函数名的 ASCII 值</strong>排序。</p><p>因为 test_four 的 ‘f’ 排在 test_three 的 ‘t’ 前面，所以 test_four 会先执行。</p><p>为了确保测试用例按照正确顺序执行，可以采用以下两种方案：</p><ul><li>用 addTest 将用例按顺序添加到集合；</li><li>调整测试用例名称。</li></ul><p>同样，在一个目录下新建的测试用例文件也是按照文件名的 ASCII 值的排序来编排和执行的。</p><h1 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h1><p>有时会出现这种情况：某些测试用例不需要执行，但是不舍得删掉，这时可以使用装饰器。</p><ul><li><p>无条件跳过装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">      @unittest.skip(<span class="params"><span class="string">&#x27;skip info&#x27;</span></span>) </span><span class="comment">#无条件跳过</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_a</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_d</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_c</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_b</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Skipped: skip info</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br></pre></td></tr></table></figure></li><li><p>满足条件跳过装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line">......</span><br><span class="line"><span class="meta">@unittest.skipIf(<span class="params">a&gt;<span class="number">3</span>, <span class="string">&#x27;info&#x27;</span></span>) </span><span class="comment">#满足a&gt;3，跳过执行该用例</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>不满足条件跳过装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">4</span></span><br><span class="line">......</span><br><span class="line"><span class="meta">@unittest.skipUnless(<span class="params">a==<span class="number">5</span>,<span class="string">&#x27;info&#x27;</span></span>) </span><span class="comment">#不满足a==5，跳过执行该用例</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul><h1 id="测试断言"><a href="#测试断言" class="headerlink" title="测试断言"></a>测试断言</h1><p>断言是为了检查测试的结果是否符合预期，并能在断言失败后抛出失败的原因。</p><p>TestCase 类提供了很多断言方法：</p><div class="table-container"><table><thead><tr><th>方法</th><th>检查</th></tr></thead><tbody><tr><td>assertEqual(a,b)</td><td>a == b</td></tr><tr><td>assertNotEqual(a,b)</td><td>a != b</td></tr><tr><td>assertTrue(x)</td><td>bool(x) is True</td></tr><tr><td>assertFalse(x)</td><td>bool(x) is False</td></tr><tr><td>assertIs(a,b)</td><td>a is b</td></tr><tr><td>assertIsNot(a,b)</td><td>a is not b</td></tr><tr><td>assertIsNone(x)</td><td>x is None</td></tr><tr><td>assertIsNotNone(x)</td><td>x is not None</td></tr><tr><td>assertIn(a,b)</td><td>a in b</td></tr><tr><td>assertNotIn(a,b)</td><td>a not in b</td></tr><tr><td>assertIsInstance(a,b)</td><td>IsInstance(a,b)</td></tr><tr><td>assertNotIsInstance(a,b)</td><td>not IsInstance(a,b)</td></tr></tbody></table></div><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMath</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;test start&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="number">5</span></span><br><span class="line">           self.assertEqual(j + <span class="number">1</span>, <span class="number">6</span>) <span class="comment"># 判断相等</span></span><br><span class="line">           self.assertNotEqual(j + <span class="number">1</span>, <span class="number">5</span>) <span class="comment"># 判断不相等</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="literal">True</span></span><br><span class="line">           f = <span class="literal">False</span></span><br><span class="line">           self.assertTrue(j) <span class="comment"># 判断j是否为True</span></span><br><span class="line">           self.assertFalse(f) <span class="comment"># 判断f是否为False</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_003</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIs(j, <span class="string">&#x27;Storm&#x27;</span>) <span class="comment"># 判断j是否是&quot;Storm&quot;</span></span><br><span class="line">           self.assertIsNot(j, <span class="string">&#x27;storm&#x27;</span>) <span class="comment"># 判断j是否是&quot;storm&quot;，区分大小写</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_004</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="literal">None</span></span><br><span class="line">           t = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIsNone(j)  <span class="comment"># 判断j是否为None</span></span><br><span class="line">           self.assertIsNotNone(t) <span class="comment"># 判断t是否不是None</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_005</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIn(j, <span class="string">&#x27;Storm&#x27;</span>)  <span class="comment"># 判断j是否包含在&quot;Storm&quot;中</span></span><br><span class="line">           self.assertNotIn(j, <span class="string">&#x27;xxx&#x27;</span>)  <span class="comment"># 判断j是否没有包含在&quot;xxx&quot;中</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test_006</span>(<span class="params">self</span>):</span></span><br><span class="line">           j = <span class="string">&#x27;Storm&#x27;</span></span><br><span class="line">           self.assertIsInstance(j, <span class="built_in">str</span>) <span class="comment"># 判断j的类型是否是str</span></span><br><span class="line">           self.assertNotIsInstance(j, <span class="built_in">int</span>) <span class="comment"># 判断j的类型是否是int</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;test end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><h1 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h1><p>下载 “HTMLTestRunner.py” 文件，将其复制到 python 安装目录下的 Lib 文件夹中。</p><p>该文件是用 python2 编写的，因此要做一些修改：</p><p>第 94 行，将 import StringIO 修改成 import io<br>第 539 行，将 self.outputBuffer = StringIO.StringIO() 修改成 self.outputBuffer = io.StringIO()<br>第 642 行，将 if not rmap.has_key(cls): 修改成 if not cls in rmap:<br>第 766 行，将 uo = o.decode(‘latin-1’) 修改成 uo = e<br>第 772 行，将 ue = e.decode(‘latin-1’) 修改成 ue = e<br>第 631 行，将 print &gt;&gt; sys.stderr, ‘\nTime Elapsed: %s’ % (self.stopTime-self.startTime) 修改成 print(sys.stderr, ‘\nTime Elapsed: %s’ % (self.stopTime-self.startTime))</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     <span class="comment"># 查找当前目录的测试用例文件</span></span><br><span class="line">     testSuite = unittest.TestLoader().discover(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">     <span class="comment"># 定义一个文件名，文件名以年月日时分秒结尾</span></span><br><span class="line">     filename = <span class="string">&quot;.\\report_&#123;&#125;.html&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>,time.localtime (time.time())))</span><br><span class="line">     <span class="comment"># 以with open的方式打开文件</span></span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          <span class="comment"># 通过HTMLTestRunner来执行测试用例，并生成报告</span></span><br><span class="line">          runner = HTMLTestRunner.HTMLTestRunner(stream=f,title=<span class="string">&#x27;这里是报告的标题&#x27;</span>, description=<span class="string">&#x27;这里是报告的描述信息&#x27;</span>)</span><br><span class="line">          runner.run(testSuite)</span><br></pre></td></tr></table></figure><p>生成的测试报告如下：</p><p><img src="0.png" alt=""></p><h1 id="对-QQ-邮箱的登录功能做简单测试"><a href="#对-QQ-邮箱的登录功能做简单测试" class="headerlink" title="对 QQ 邮箱的登录功能做简单测试"></a>对 QQ 邮箱的登录功能做简单测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver = webdriver.Chrome()</span><br><span class="line">          self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">          self.driver.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line">          login_frame = self.driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">          self.driver.switch_to.frame(login_frame)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 用例一:不输入密码直接登录</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;878379451&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">          self.assertEqual(err,<span class="string">&#x27;你还没有输入密码！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 用例二:密码错误</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_002</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;878379451&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">          self.assertEqual(err,<span class="string">&#x27;你输入的帐号或密码不正确，请重新输入。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 用例三:正确登录</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_003</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;878379451&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(<span class="string">&quot;aabbcc123&quot;</span>)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          self.driver.switch_to.default_content()</span><br><span class="line">          name = self.driver.find_element_by_id(<span class="string">&#x27;useralias&#x27;</span>).text <span class="comment"># 获取用户名</span></span><br><span class="line">          self.assertEqual(name,<span class="string">&#x27;878379451&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     testSuite = unittest.TestLoader().discover(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">     filename = <span class="string">&quot;.\\report_&#123;&#125;.html&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>,time.localtime (time.time())))</span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">          runner = HTMLTestRunner.HTMLTestRunner(stream=f,title=<span class="string">&#x27;QQ邮箱登录&#x27;</span>, description=<span class="string">&#x27;以用户名密码方式&#x27;</span>)</span><br><span class="line">          runner.run(testSuite)</span><br></pre></td></tr></table></figure><h1 id="unittest-参数化"><a href="#unittest-参数化" class="headerlink" title="unittest 参数化"></a>unittest 参数化</h1><ul><li><p>DDT（Data-Driven Tests）是数据驱动测试的意思，需要自己安装这个库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> ddt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明使用ddt</span></span><br><span class="line"><span class="meta">@ddt.ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver = webdriver.Chrome()</span><br><span class="line">          self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">          self.driver.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line">          login_frame = self.driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">          self.driver.switch_to.frame(login_frame)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment"># 传入两个列表代表两个测试用例，每个测试用例包含3个参数，status代表登录成功与否</span></span><br><span class="line"><span class="meta">     @ddt.data(<span class="params">[<span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],[<span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],[<span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;BSJbsj123&#x27;</span>, <span class="string">&#x27;1&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">     @ddt.unpack</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self,username,password,status</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(username)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).clear()</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(password)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">               err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">               <span class="keyword">if</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    self.assertEqual(err,<span class="string">&#x27;你还没有输入密码！&#x27;</span>)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                    self.assertEqual(err, <span class="string">&#x27;你输入的帐号或密码不正确，请重新输入。&#x27;</span>)</span><br><span class="line">          <span class="keyword">elif</span> status == <span class="number">1</span>:</span><br><span class="line">               self.driver.switch_to.default_content()</span><br><span class="line">               name = self.driver.find_element_by_id(<span class="string">&#x27;useralias&#x27;</span>).text  <span class="comment"># 获取用户名</span></span><br><span class="line">               self.assertEqual(name, <span class="string">&#x27;878379451&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure><p>这样只需要一个测试用例就能实现 3 种情况，需要测试其他数据的话添加参数即可。</p></li><li><p>parameterized，也是一个实现参数化的第三方库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pythonfrom selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver = webdriver.Chrome()</span><br><span class="line">          self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">          self.driver.get(<span class="string">&#x27;https://mail.qq.com/&#x27;</span>)</span><br><span class="line">          login_frame = self.driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">          self.driver.switch_to.frame(login_frame)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="meta">     @parameterized.expand(<span class="params">[(<span class="params"><span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span>),(<span class="params"><span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;0&#x27;</span></span>),(<span class="params"><span class="string">&#x27;878379451&#x27;</span>, <span class="string">&#x27;BSJbsj123&#x27;</span>, <span class="string">&#x27;1&#x27;</span></span>)]</span>)</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_001</span>(<span class="params">self,username,password,status</span>):</span></span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(username)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).clear()</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(password)</span><br><span class="line">          self.driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">          <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">               err = self.driver.find_element_by_id(<span class="string">&#x27;err_m&#x27;</span>).text</span><br><span class="line">               <span class="keyword">if</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                    self.assertEqual(err,<span class="string">&#x27;你还没有输入密码！&#x27;</span>)</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                    self.assertEqual(err, <span class="string">&#x27;你输入的帐号或密码不正确，请重新输入。&#x27;</span>)</span><br><span class="line">          <span class="keyword">elif</span> status == <span class="number">1</span>:</span><br><span class="line">               self.driver.switch_to.default_content()</span><br><span class="line">               name = self.driver.find_element_by_id(<span class="string">&#x27;useralias&#x27;</span>).text  <span class="comment"># 获取用户名</span></span><br><span class="line">               self.assertEqual(name, <span class="string">&#x27;878379451&#x27;</span>)</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">          self.driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     unittest.main()</span><br></pre></td></tr></table></figure></li></ul><p>参考资料：</p><ul><li><p>李鲲程，边宇明：Python实现Web UI 自动化测试实战. 北京：人民邮电出版社，2021</p></li><li><p><a href="https://docs.python.org/zh-cn/3.7/library/unittest.html#assert-methods">unittest —- 单元测试框架 — Python 3.7.12 文档</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;unittest 是 Python 的内置模块，支持自动化测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试固件（tes</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Selenium3基础</title>
    <link href="http://10185102110.github.io/2021/10/29/Selenium3%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://10185102110.github.io/2021/10/29/Selenium3%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-29T12:06:36.000Z</published>
    <updated>2021-10-29T16:44:45.275Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="测试环境的搭建"><a href="#测试环境的搭建" class="headerlink" title="测试环境的搭建"></a>测试环境的搭建</h1><ol><li><p>使用 Pycharm，python 3.8.3，安装 selenium 包。</p></li><li><p>下载浏览器驱动。</p><p>各浏览器驱动下载地址：</p><p>GeckoDriver（Firefox）：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a> </p><p>ChromeDriver（Chrome）：<a href="https://sites.google.com/a/chromium.org/chromedriver/home">https://sites.google.com/a/chromium.org/chromedriver/home</a> </p><p>IEDriverServer（IE）：<a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a> </p><p>OperaDriver（Opera）：<a href="https://github.com/operasoftware/operachromiumdriver/releases">https://github.com/operasoftware/operachromiumdriver/releases</a> </p><p>MicrosoftWebDriver（Edge）：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver</a></p><p>将解压后的 exe 文件放到 python.exe 同一路径即可，注意 Edge 的文件要改名为 MicrosoftWebDriver.exe。</p></li><li><p>环境测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用webdriver模块下的Chrome()类</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#调用Chrome()类提供的get()方法访问百度首页</span></span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#通过find_element_by_id()方法分别定位页面上的元素</span></span><br><span class="line"><span class="comment">#通过send_keys()和click()做输入、单击操作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;Selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"><span class="comment">#关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li></ol><h1 id="WebDriver-API"><a href="#WebDriver-API" class="headerlink" title="WebDriver API"></a>WebDriver API</h1><h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><p>一个网页上有输入框、按钮、文字链接、图片等元素，自动化测试要做的就是模拟鼠标和键盘来操作这些元素，如单击、输入、鼠标悬停等。而操作这些元素的前提是要定位它们。WebDriver 通过网页的 HTML 代码来定位。</p><p>WebDriver 提供了 8 种元素定位方法，在 Python 中，对应的方法如下： </p><ul><li>id 定位 → <code>find_element_by_id()</code> </li><li>name 定位 → <code>find_element_by_name()</code> </li><li>tag 定位 → <code>find_element_by_tag_name()</code> </li><li>class 定位 → <code>find_element_by_class_name()</code> </li><li>link_text 定位 → <code>find_element_by_link_text()</code> </li><li>partial link 定位 → <code>find_element_by_partial_link_text()</code> </li><li>XPath 定位 → <code>find_element_by_xpath()</code> </li><li>CSS_selector 定位 → <code>find_element_by_css_selector()</code></li></ul><p>以百度的输入框和搜索按钮为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="id-定位"><a href="#id-定位" class="headerlink" title="id 定位"></a>id 定位</h3><p>HTML 中 id 是唯一的。通过 id 定位百度输入框和搜索按钮的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="name-定位"><a href="#name-定位" class="headerlink" title="name 定位"></a>name 定位</h3><p>HTML 中 name 用来指定元素的名称。</p><p>定位百度输入框的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_name(<span class="string">&quot;wd&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="class-定位"><a href="#class-定位" class="headerlink" title="class 定位"></a>class 定位</h3><p>HTML 中 class 用来指定元素的类名。</p><p>定位百度输入框的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="tag-定位"><a href="#tag-定位" class="headerlink" title="tag 定位"></a>tag 定位</h3><p>HTML 通过 tag 来定义不同页面的元素。例如，<code>&lt;input&gt;</code> 一般用来定义输入框，<code>&lt;a&gt;</code> 标签用来定义超链接等。</p><p>通过标签名（tag name）定位百度输入框的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_tag_name(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="link-定位"><a href="#link-定位" class="headerlink" title="link 定位"></a>link 定位</h3><p>link 专门用来定位文本链接。</p><p>百度输入框上面的几个文字链接的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://news.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.hao123.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://map.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://live.baidu.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>直播<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://haokan.baidu.com/?sfrom=baidu-top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tieba.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://xueshu.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mnav c-font-normal c-color-t&quot;</span>&gt;</span>学术<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 link 定位链接的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;hao123&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;地图&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;直播&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;视频&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;贴吧&quot;</span>)</span><br><span class="line">find_element_by_link_text(<span class="string">&quot;学术&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="partial-link-定位"><a href="#partial-link-定位" class="headerlink" title="partial link 定位"></a>partial link 定位</h3><p>partial link 定位是对 link 定位的一种补充，有些文字链接比较长，这时可以取文字链接的部分文字进行定位，只要这部分文字可以唯一地标识这个链接即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_lang&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>一个很长的文本链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 partial link 定位链接的用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_partial_link_text(<span class="string">&quot;一个很长的&quot;</span>) </span><br><span class="line">find_element_by_partial_link_text(<span class="string">&quot;文本链接&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="XPath-定位"><a href="#XPath-定位" class="headerlink" title="XPath 定位"></a>XPath 定位</h3><ul><li><p>绝对路径定位</p><p>参考开发者工具所展示的代码层级结构，可以通过下面的方式找到百度输入框和百度搜索按钮：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;/html/body/div/div/div[5]/div/div/form/span/input&quot;</span>)</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;/html/body/div/div/div[5]/div/div/form/span[2]/input</span></span><br><span class="line"><span class="string">&quot;</span>)</span><br></pre></td></tr></table></figure><p>div[2] 表示当前层级下第二个 div 标签。</p></li><li><p>利用元素属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;su&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><p>//input 表示当前页面某个 input 标签，[@id=’kw’] 表示这个元素的 id 值是 kw。</p><p>下面通过 name 和 class 来定位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//*[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;//*[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果不想指定标签名，那么可以用星号（*）代替。使用 XPath 不局限于 id、name 和 class 这三个属性值，元素的任意属性都可以使用，只要它能唯一标识一个元素。</p></li><li><p>层级与属性结合</p><p>如果一个元素本身没有可以唯一标识这个元素的属性值，那么我们可以查找其上一级元素。如果它的上一级元素有可以唯一标识属性的值，就可以拿来使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//百度输入框的上一级元素</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_ipt_wr new-pmd quickdelete-wrap&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 XPath 描述如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//span[@class=&#x27;bg s_ipt_wr new-pmd quickdelete-wrap&#x27;]/input&quot;</span>)</span><br><span class="line">//或者再往上一级</span><br><span class="line">find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;form&#x27;]/span/input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用逻辑运算符</p><p>如果一个属性不能唯一区分一个元素，可以使用逻辑运算符连接多个属性来查找元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27; and @class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 contains 方法</p><p>contains 方法用于匹配一个属性中包含的字符串。例如，span 标签的 class 属性为“bg  s_ipt_wr new-pmd quickdelete-wrap”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//span[contains(@class,&#x27;s_ipt_wr&#x27;)]/input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用 text() 方法</p><p>text() 方法用于匹配显示文本信息。例如，前面通过 link text 定位的文字链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_xpath(<span class="string">&quot;//a[contains(text(),&#x27;新闻&#x27;)]&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h3><p>CSS 选择器的常见语法：</p><div class="table-container"><table><thead><tr><th>选择器</th><th>举例</th><th>描述</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择 class=”intro”的所有元素</td></tr><tr><td>#id</td><td>#firstname</td><td>选择 id=”firstname”的所有元素</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td></tr><tr><td>element</td><td>p</td><td>选择所有 <p> 元素</td></tr><tr><td>element&gt;element</td><td>div&gt;input</td><td>选择父元素为 <div> 的所有 <input> 元素</td></tr><tr><td>element+element</td><td>div+input</td><td>选择同一级紧接在 <div> 元素之后的所有 <input> 元素</td></tr><tr><td>[attribute=value]</td><td>[target=blank]</td><td>选择 target=”blank” 的所有元素</td></tr></tbody></table></div><p>以百度的输入框和搜索按钮为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_ipt_wr new-pmd quickdelete-wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-hover-tip&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span>按图片搜索</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn_wr&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg s_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>通过 id 定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;#su&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过 class 定位 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;.s_ipt&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;.bg s_btn&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标签名定位 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过标签层级关系定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;span &gt; input&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过属性定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;[autocomplete=off]&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&#x27;[type=&quot;submit&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>组合定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_css_selector(<span class="string">&quot;form.fm &gt; span &gt; input.s_ipt&quot;</span>)</span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;form#form &gt; span &gt; input#kw&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>更多用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找class属性包含“s_ipt_wr”字符串的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[class*=s_ipt_wr]&quot;</span>)</span><br><span class="line"><span class="comment">#查找class属性以“bg”字符串开头的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[class^=bg]&quot;</span>)</span><br><span class="line"><span class="comment">#查找class属性以“wrap”字符串结尾的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;[class$=wrap]&quot;</span>)</span><br><span class="line"><span class="comment">#查找form标签下面第 2 个 input 标签的元素。</span></span><br><span class="line">find_element_by_css_selector(<span class="string">&quot;form &gt; input:nth-child(2)&quot;</span>)</span><br></pre></td></tr></table></figure><p>其余用法可以参考 <a href="http://www.w3school.com.cn/cssref/css_selectors.asp">http://www.w3school.com.cn/cssref/css_selectors.asp</a></p></li></ul><h3 id="用-By-定位元素"><a href="#用-By-定位元素" class="headerlink" title="用 By 定位元素"></a>用 By 定位元素</h3><p>针对前面的 8 种定位方法，WebDriver 还提供了另外一套写法，即统一调用 find_element() 方法，通过 By 来声明定位，并且传入对应定位方法的定位参数，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">find_element(By.ID,<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">find_element(By.NAME,<span class="string">&quot;wd&quot;</span>)</span><br><span class="line">find_element(By.CLASS_NAME,<span class="string">&quot;s_ipt&quot;</span>)</span><br><span class="line">find_element(By.TAG_NAME,<span class="string">&quot;input&quot;</span>)</span><br><span class="line">find_element(By.LINK_TEXT,<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">find_element(By.PARTIAL_LINK_TEXT,<span class="string">&quot;新&quot;</span>)</span><br><span class="line">find_element(By.XPATH,<span class="string">&quot;//*[@class=&#x27;bg s_btn&#x27;]&quot;</span>)</span><br><span class="line">find_element(By.CSS_SELECTOR,<span class="string">&quot;span.bg s_btn_wr&gt;input#su&quot;</span>)</span><br></pre></td></tr></table></figure><p>底层实现其实一样。</p><h2 id="控制浏览器"><a href="#控制浏览器" class="headerlink" title="控制浏览器"></a>控制浏览器</h2><h3 id="控制窗口大小"><a href="#控制窗口大小" class="headerlink" title="控制窗口大小"></a>控制窗口大小</h3><p>WebDriver 提供的 <code>set_window_size()</code> 方法可以用来设置浏览器窗口大小。</p><p><code>maximize_window()</code> 方法表示全屏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://m.baidu.com&quot;</span>) <span class="comment">#百度移动版首页</span></span><br><span class="line">driver.set_window_size(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">#设置宽高</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="控制浏览器后退、前进和刷新"><a href="#控制浏览器后退、前进和刷新" class="headerlink" title="控制浏览器后退、前进和刷新"></a>控制浏览器后退、前进和刷新</h3><p>WebDriver 提供了 <code>back()</code> 和 <code>forward()</code> 方法来模拟后退和前进按钮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 访问百度首页</span></span><br><span class="line">first_url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">driver.get(first_url)</span><br><span class="line"><span class="comment"># 访问新闻页</span></span><br><span class="line">second_url=<span class="string">&#x27;http://news.baidu.com&#x27;</span></span><br><span class="line">driver.get(second_url)</span><br><span class="line"><span class="comment"># 返回到百度首页</span></span><br><span class="line">driver.back()</span><br><span class="line"><span class="comment"># 前进到新闻页</span></span><br><span class="line">driver.forward()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p><code>refresh()</code> 方法可以刷新当前页面。</p><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><ul><li><p><code>clear()</code>：清除文本。</p></li><li><p><code>send_keys(value)</code>：模拟按键输入。</p></li><li><p><code>click()</code>：单击元素。</p></li><li><p><code>submit()</code>：提交表单，模拟回车键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">search_text = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">search_text.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">search_text.submit()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li><li><p><code>size</code>：返回元素的尺寸。</p></li><li><p><code>text</code>：获取元素的文本。</p></li><li><p><code>get_attribute(name)</code>：获得属性值。</p></li><li><p><code>is_displayed()</code>：设置该元素是否用户可见。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获得输入框的尺寸</span></span><br><span class="line">size = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).size</span><br><span class="line"><span class="built_in">print</span>(size)</span><br><span class="line"><span class="comment"># 返回百度页面底部备案信息</span></span><br><span class="line">text = driver.find_element_by_class_name(<span class="string">&quot;text-color&quot;</span>).text</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"><span class="comment"># 返回元素的属性值，可以是 id、name、type 或其他任意属性</span></span><br><span class="line">attribute = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).get_attribute(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(attribute)</span><br><span class="line"><span class="comment"># 返回元素的结果是否可见，返回结果为 True</span></span><br><span class="line">result = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).is_displayed()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li></ul><h2 id="操作鼠标"><a href="#操作鼠标" class="headerlink" title="操作鼠标"></a>操作鼠标</h2><p>ActionChains 类提供了鼠标操作的常用方法： </p><ul><li><code>perform()</code>：执行 ActionChains 类中存储的所有行为。 </li><li><code>context_click()</code>：右击。 </li><li><code>double_click()</code>：双击。 </li><li><code>drag_and_drop()</code>：拖动。 </li><li><code>move_to_element()</code>：鼠标悬停。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.cn&quot;</span>)</span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line">above = driver.find_element_by_xpath(<span class="string">&quot;//span[contains(text(),&#x27;设置&#x27;)]&quot;</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(above).perform()</span><br></pre></td></tr></table></figure><h2 id="操作键盘"><a href="#操作键盘" class="headerlink" title="操作键盘"></a>操作键盘</h2><p><code>send_keys()</code> 方法不仅可以用来模拟键盘输入，还可以用它来输入键盘上的按键，甚至是组合键，如 Ctrl+a、Ctrl+c 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br></pre></td></tr></table></figure><p>常见的键盘操作：</p><ul><li><p>send_keys(Keys.BACK_SPACE)：删除键（BackSpace） </p></li><li><p>send_keys(Keys.SPACE)：空格键（Space） </p></li><li><p>send_keys(Keys.TAB)：制表键（Tab） </p></li><li><p>send_keys(Keys.ESCAPE)：回退键（Esc） </p></li><li><p>send_keys(Keys.ENTER)：回车键（Enter）</p></li><li><p>send_keys(Keys.CONTROL,’a’)：全选（Ctrl+a） </p></li><li><p>send_keys(Keys.CONTROL,’c’)：复制（Ctrl+c） </p></li><li><p>send_keys(Keys.CONTROL,’x’)：剪切（Ctrl+x） </p></li><li><p>send_keys(Keys.CONTROL,’v’)：粘贴（Ctrl+v） </p></li><li><p>send_keys(Keys.F1)：键盘 F1</p><p>……</p></li><li><p>send_keys(Keys.F12)：键盘 F12</p></li></ul><h2 id="获得验证信息"><a href="#获得验证信息" class="headerlink" title="获得验证信息"></a>获得验证信息</h2><p>在进行 Web 自动化测试中，用得最多的几种验证信息：</p><ul><li>title：用于获取当前页面的标题。 </li><li>current_url：用于获取当前页面的 URL。 </li><li>text：用于获取当前页面的文本信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Before search================&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印当前页面 title</span></span><br><span class="line">title = driver.title</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>+ title)</span><br><span class="line"><span class="comment"># 打印当前页面 URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL:&quot;</span>+now_url)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;After search================&#x27;</span>)</span><br><span class="line"><span class="comment"># 再次打印当前页面 title</span></span><br><span class="line">title = driver.title</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>+title)</span><br><span class="line"><span class="comment"># 再次打印当前页面 URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;URL:&quot;</span>+now_url)</span><br><span class="line"><span class="comment"># 获取搜索结果条数</span></span><br><span class="line">num = driver.find_element_by_class_name(<span class="string">&#x27;nums&#x27;</span>).text</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result:&quot;</span>+num)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Before search================</span><br><span class="line">title:百度一下，你就知道</span><br><span class="line">URL:https://www.baidu.com/</span><br><span class="line">After search================</span><br><span class="line">title:selenium_百度搜索</span><br><span class="line">URL:https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=selenium&amp;fenlei=256&amp;rsv_pq=91169e5b0002382c&amp;rsv_t=61a7095gLdcmwC3ez1XIuOB%2BSLUYQnawqzJKnDLa%2FObzM7ETj6s1intaYQA&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=0&amp;rsv_sug3=8&amp;rsv_btype=i&amp;inputT=228&amp;rsv_sug4=228</span><br><span class="line">result:搜索工具</span><br><span class="line">百度为您找到相关结果约100,000,000个</span><br></pre></td></tr></table></figure><h2 id="设置元素等待"><a href="#设置元素等待" class="headerlink" title="设置元素等待"></a>设置元素等待</h2><h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><p>显式等待是 WebDriver 等待某个条件成立则继续执行，否则在达到最大时长时抛出超 时异常（TimeoutException）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(EC.visibility_of_element_located((By.ID, <span class="string">&quot;kw&quot;</span>)))</span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>WebDriverWait 类是 WebDriver 提供的等待方法。在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间仍检测不到，则抛出异常。格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait(driver, timeout, poll_frequency=<span class="number">0.5</span>, ignored_exceptions=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#driver：浏览器驱动。</span></span><br><span class="line"><span class="comment">#timeout：最长超时时间，默认以秒为单位。</span></span><br><span class="line"><span class="comment">#poll_frequency：检测的间隔（步长）时间，默认为 0.5s。</span></span><br><span class="line"><span class="comment">#ignored_exceptions：超时后的异常信息，默认情况下抛出 NoSuchElementException异常。</span></span><br></pre></td></tr></table></figure><p><code>WebDriverWait()</code> 一般与 <code>until()</code> 或 <code>until_not()</code> 方法配合使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until(method, message=″)</span><br><span class="line"><span class="comment">#调用该方法提供的驱动程序作为一个参数，直到返回值为 True。 </span></span><br><span class="line">until_not(method, message=″) </span><br><span class="line"><span class="comment">#调用该方法提供的驱动程序作为一个参数，直到返回值为 False。</span></span><br></pre></td></tr></table></figure><p>这里通过 as 关键字将 expected_conditions 重命名为 EC。</p><p>expected_conditions 类提供的预期条件判断方法如下所示：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>title_is</td><td>判断当前页面的标题是否等于预期</td></tr><tr><td>title_contains</td><td>判断当前页面的标题是否包含预期字符串</td></tr><tr><td>presence_of_element_located</td><td>判断元素是否被加在 DOM 树里，并不代表该元素一定可见</td></tr><tr><td>visibility_of_element_located</td><td>判断元素是否可见（可见代表元素非隐藏，并且元素的宽和高都不等于 0）</td></tr><tr><td>visibility_of</td><td>同上，上一个方法的参数为定位，该方法接收的参数为定位后的元素</td></tr><tr><td>presence_of_all_elements_located</td><td>判断是否至少有一个元素存在于 DOM 树中。</td></tr><tr><td>text_to_be_present_in_element</td><td>判断某个元素中的 text 是否包含预期的字符串</td></tr><tr><td>text_to_be_present_in_element_value</td><td>判断某个元素的 value 属性是否包含预期的字符串</td></tr><tr><td>frame_to_be_available_and_switch_to_it</td><td>判断该表单是否可以切换进去，如果可以，返回 True 并且切换进去， 否则返回 False</td></tr><tr><td>invisibility_of_element_located</td><td>判断某个元素是否不在 DOM 树中或不可见</td></tr><tr><td>element_to_be_clickable</td><td>判断某个元素是否可见并且是可以点击的</td></tr><tr><td>staleness_of</td><td>等到一个元素从 DOM 树中移除</td></tr><tr><td>element_to_be_selected</td><td>判断某个元素是否被选中，一般用在下拉列表中</td></tr><tr><td>element_selection_state_to_be</td><td>判断某个元素的选中状态是否符合预期</td></tr><tr><td>element_located_selection_state_to_be</td><td>同上，只是上一个方法参数为定位后的元素，该方法接收的参数为定位</td></tr><tr><td>alert_is_present</td><td>判断页面上是否存在 alert</td></tr></tbody></table></div><p>也可以用 <code>is_displayed()</code> 方法自己实现元素显示等待：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, ctime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ctime())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">  el = driver.find_element_by_id(<span class="string">&quot;kw22&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> el.is_displayed():</span><br><span class="line">   <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"> sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ctime())</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#Fri Oct 29 20:48:51 2021</span></span><br><span class="line"><span class="comment">#time out</span></span><br><span class="line"><span class="comment">#Fri Oct 29 20:49:01 2021</span></span><br></pre></td></tr></table></figure><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>WebDriver 提供的 <code>implicitly_wait()</code> 方法可用来实现隐式等待。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置隐式等待为 10s</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> <span class="built_in">print</span>(ctime())</span><br><span class="line"> driver.find_element_by_id(<span class="string">&quot;kw22&quot;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e:</span><br><span class="line"> <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"> <span class="built_in">print</span>(ctime())</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="comment">#Fri Oct 29 21:37:01 2021</span></span><br><span class="line"><span class="comment">#Message: no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;cssselector&quot;,&quot;selector&quot;:&quot;[id=&quot;kw22&quot;]&quot;&#125; (Session info: chrome=95.0.4638.69)</span></span><br><span class="line"><span class="comment">#Fri Oct 29 21:37:11 2021</span></span><br></pre></td></tr></table></figure><p><code>implicitly_wait()</code> 的参数是时间，单位为秒，这里设置的等待时间为 10s。首先，这 10s 并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它会等待页面上的所有元素。当脚本执行到某个元素定位时，如果元素存在，则继续执行；如果定位不到元素， 则它将以轮询的方式不断地判断元素是否存在。若直到超出设置时间（10s）还没有定位到元素，则抛出异常。</p><h2 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a>定位一组元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find_elements_by_id()</span><br><span class="line">find_elements_by_name()</span><br><span class="line">find_elements_by_class_name()</span><br><span class="line">find_elements_by_tag_name()</span><br><span class="line">find_elements_by_link_text()</span><br><span class="line">find_elements_by_partial_link_text()</span><br><span class="line">find_elements_by_xpath()</span><br><span class="line">find_elements_by_css_selector()</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 定位一组元素</span></span><br><span class="line">texts = driver.find_elements_by_xpath(<span class="string">&quot;//div[@tpl=&#x27;se_com_default&#x27;]/h3/a&quot;</span>)</span><br><span class="line"><span class="comment"># 计算匹配结果个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(texts))</span><br><span class="line"><span class="comment"># 循环遍历出每一条搜索结果的标题</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> texts:</span><br><span class="line"> <span class="built_in">print</span>(t.text)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="多表单切换"><a href="#多表单切换" class="headerlink" title="多表单切换"></a>多表单切换</h2><p>WebDriver 只能在一个页面上对元素进行识别和定位，无法直接定位 frame/iframe 表单内嵌页面上的元素，这时就需要通过 <code>switch_to.frame()</code> 方法将当前定位的主体切换为 frame/iframe 表单的内嵌页面。</p><p>下面是自动登录 QQ 邮箱的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://mail.qq.com/&quot;</span>)</span><br><span class="line"><span class="comment">#切换表单</span></span><br><span class="line">login_frame = driver.find_element_by_css_selector(<span class="string">&#x27;iframe[id=&quot;login_frame&quot;]&#x27;</span>)</span><br><span class="line">driver.switch_to.frame(login_frame)</span><br><span class="line"><span class="comment">#点击“账号密码登录“</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;switcher_plogin&quot;</span>).click()</span><br><span class="line"><span class="comment">#输入账号</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;u&quot;</span>).send_keys(<span class="string">&quot;account&quot;</span>)</span><br><span class="line"><span class="comment">#输入密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;p&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="comment">#点击”登录“</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line"><span class="comment">#回到最外层的表单</span></span><br><span class="line">driver.switch_to.default_content()</span><br></pre></td></tr></table></figure><h2 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h2><p>WebDriver 提供的 <code>switch_to.window()</code> 方法可以实现在不同的窗口间切换。</p><ul><li><code>current_window_handle</code>：获得当前窗口句柄。 </li><li><code>window_handles</code>：返回所有窗口的句柄到当前会话。 </li><li><code>switch_to.window()</code>：切换到相应的窗口。</li></ul><p>以百度首页和账号注册页为例，在两个窗口之间的切换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#隐式等待，等元素可见再执行</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获得百度搜索窗口句柄</span></span><br><span class="line">search_windows = driver.current_window_handle</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;立即注册&quot;</span>).click()</span><br><span class="line"><span class="comment"># 获得当前所有打开的窗口句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"><span class="comment"># 进入注册窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</span><br><span class="line"> <span class="keyword">if</span> handle != search_windows:</span><br><span class="line">    driver.switch_to.window(handle)</span><br><span class="line">    <span class="built_in">print</span>(driver.title)</span><br><span class="line">    driver.find_element_by_name(<span class="string">&quot;userName&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    driver.find_element_by_name(<span class="string">&#x27;phone&#x27;</span>).send_keys(<span class="string">&#x27;18019080162&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭当前窗口</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># 回到搜索窗口</span></span><br><span class="line">driver.switch_to.window(search_windows)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br></pre></td></tr></table></figure><h2 id="警告框处理"><a href="#警告框处理" class="headerlink" title="警告框处理"></a>警告框处理</h2><p>在 WebDriver 中处理 JavaScript 生成的 alert、confirm 和 prompt 十分简单，具体做法是首先使用 <code>switch_to.alert()</code> 方法定位，然后使用 text、accept、dismiss、send_keys 等进行操作。</p><ul><li>text：返回 alert、confirm、prompt 中的文字信息。 </li><li>accept()：接受现有警告框。 </li><li>dismiss()：解散现有警告框。 </li><li>send_keys()：在警告框中输入文本。</li></ul><p>可以使用 <code>switch_to.alert()</code> 方法为百度搜索设置弹窗：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">link = driver.find_element_by_id(<span class="string">&#x27;s-usersetting-top&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line"><span class="comment"># 获取警告框</span></span><br><span class="line">alert = driver.switch_to.alert</span><br><span class="line"><span class="comment"># 获取警告框提示信息</span></span><br><span class="line">alert_text = alert.text</span><br><span class="line"><span class="built_in">print</span>(alert_text)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 接取警告框</span></span><br><span class="line">alert.accept()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="下拉框处理"><a href="#下拉框处理" class="headerlink" title="下拉框处理"></a>下拉框处理</h2><p>WebDriver 提供了 Select 类来处理下拉框。 </p><ul><li>select_by_value()：通过 value 值定位下拉选项。 </li><li>select_by_visible_text()：通过 text 值定位下拉选项。 </li><li>select_by_index()：根据下拉选项的索引进行选择。第一个选项为 0，第二个选项为 1。</li></ul><p>以百度搜索设置为例，下拉框代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;NR&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nr&quot;</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;&quot;</span>&gt;</span>每页显示 10 条<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span>每页显示 20 条<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span>每页显示 50 条<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 WebDriver 代码操作下拉框：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">link = driver.find_element_by_id(<span class="string">&#x27;s-usersetting-top&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># value=&quot;20&quot;</span></span><br><span class="line">Select(sel).select_by_value(<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># &lt;option&gt;每页显示 50 条&lt;/option&gt;</span></span><br><span class="line">Select(sel).select_by_visible_text(<span class="string">&quot;每页显示 50 条&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 根据下拉选项的索引进行选择</span></span><br><span class="line">Select(sel).select_by_index(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="操作-Cookie"><a href="#操作-Cookie" class="headerlink" title="操作 Cookie"></a>操作 Cookie</h2><p>WebDriver 操作 Cookie 的方法如下：</p><ul><li><code>get_cookies()</code>：获得所有 Cookie。 </li><li><code>get_cookie(name)</code>：返回字典中 key 为“name”的 Cookie。 </li><li><code>add_cookie(cookie_dict)</code>：添加 Cookie。 </li><li><code>delete_cookie(name,optionsString)</code>：删除名为 OpenString 的 Cookie。 </li><li><code>delete_all_cookies()</code>：删除所有 Cookie。</li></ul><p>下面通过 <code>get_cookies()</code> 获取当前浏览器的所有 Cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获得所有 Cookie 信息并打印</span></span><br><span class="line">cookie = driver.get_cookies()</span><br><span class="line"><span class="built_in">print</span>(cookie)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 1635526453, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BA_HECTOR&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;8p2g0ga10gahag64il1gno6950r&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 1667058853, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BAIDUID_BFESS&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;sameSite&#x27;: &#x27;None&#x27;, &#x27;secure&#x27;: True, &#x27;value&#x27;: &#x27;3ECF2109496A371FC86784F70A86AC3E:FG=1&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;H_PS_PSSID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;34837_34067_31254_34862_34712_34584_34518_34917_34964_26350_34827_34867_22159&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;www.baidu.com&#x27;, &#x27;expiry&#x27;: 1635522853, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BD_LAST_QID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;12449484618997190050&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 1667058852, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BAIDUID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;3ECF2109496A371FC86784F70A86AC3E:FG=1&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 3783006499, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BIDUPSID&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;3ECF2109496A371FC63160F643893301&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;.baidu.com&#x27;, &#x27;expiry&#x27;: 3783006499, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;PSTM&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;1635522852&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;www.baidu.com&#x27;, &#x27;expiry&#x27;: 1636386853, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BD_UPN&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;12314753&#x27;&#125;, &#123;&#x27;domain&#x27;: &#x27;www.baidu.com&#x27;, &#x27;httpOnly&#x27;: False, &#x27;name&#x27;: &#x27;BD_HOME&#x27;, &#x27;path&#x27;: &#x27;/&#x27;, &#x27;secure&#x27;: False, &#x27;value&#x27;: &#x27;1&#x27;&#125;]</span><br></pre></td></tr></table></figure><p>从执行结果可以看出，Cookie 中的数据是以字典形式存放的。知道了 Cookie 中数据的存放形式后，即可按照这种形式向浏览器中添加 Cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 Cookie 信息</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;key-aaaaaaa&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;value-bbbbbb&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 遍历指定的 Cookies</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;%s -&gt; %s&quot;</span> % (cookie[<span class="string">&#x27;name&#x27;</span>], cookie[<span class="string">&#x27;value&#x27;</span>]))</span><br></pre></td></tr></table></figure><h2 id="调用-JavaScript"><a href="#调用-JavaScript" class="headerlink" title="调用 JavaScript"></a>调用 JavaScript</h2><p>有些页面操作不能依靠 WebDriver 提供的 API 来实现，如浏览器滚动条的拖动。这时就需要借助 JavaScript 脚本。WebDriver 提供了 <code>execute_script()</code> 方法来执行 JavaScript 代码。</p><p>用于调整浏览器滚动条位置的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">driver.set_window_size(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 通过 JavaScript 设置浏览器窗口的滚动条位置</span></span><br><span class="line"><span class="comment"># window.scrollTo()方法用于设置浏览器窗口滚动条的水平位置和垂直位置</span></span><br><span class="line">js = <span class="string">&quot;window.scrollTo(100,400);&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure><p>还可以向 textarea 文本框中输入内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 98%&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;textarea&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然可以通过 id 定位到元素，但是不能通过 send_keys()在文本框中输入文本信息。在这种情况下，可以借助 JavaScript 代码输入文本信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;input text&quot;</span></span><br><span class="line">js = <span class="string">&quot;document.getElementById(&#x27;id&#x27;).value=&#x27;&quot;</span> + text + <span class="string">&quot;&#x27;;&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br></pre></td></tr></table></figure><h2 id="处理-HTML5-视频播放"><a href="#处理-HTML5-视频播放" class="headerlink" title="处理 HTML5 视频播放"></a>处理 HTML5 视频播放</h2><p><code>&lt;video&gt;</code> 提供了 JavaScript 接口和多种方法及属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://videojs.com/&quot;</span>)</span><br><span class="line">video = driver.find_element_by_id(<span class="string">&quot;preview-player_html5_api&quot;</span>)</span><br><span class="line"><span class="comment"># 返回播放文件地址</span></span><br><span class="line">url = driver.execute_script(<span class="string">&quot;return arguments[0].currentSrc;&quot;</span>, video)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"><span class="comment"># 播放视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].play()&quot;</span>, video)</span><br><span class="line"><span class="comment"># 播放 15s</span></span><br><span class="line">sleep(<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 暂停视频</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].pause()&quot;</span>, video)</span><br></pre></td></tr></table></figure><p>JavaScript 有个内置的对象叫作 arguments。arguments 包含函数调用的参数数组，[0] 表示取对象的第 1 个值。 </p><p>currentSrc 返回当前音频/视频的 URL。如果未设置音频/视频，则返回空字符串。 </p><p>load()、play() 和 pause() 控制视频的加载、播放和暂停。</p><h2 id="窗口截图"><a href="#窗口截图" class="headerlink" title="窗口截图"></a>窗口截图</h2><p>WebDriver 提供了截图函数 <code>save_screenshot ()</code>，可用来截取当前窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 截取当前窗口，指定截图图片的保存位置</span></span><br><span class="line">driver.save_screenshot(<span class="string">&quot;./baidu_img.png&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="自动化测试模型"><a href="#自动化测试模型" class="headerlink" title="自动化测试模型"></a>自动化测试模型</h1><p>几种自动化测试模型：</p><ul><li><p>线性测试</p><p>通过录制或编写对应用程序的操作步骤会产生相应的线性脚本，每个线性脚本相对独立，且不产生依赖与调用。这是早期自动化测试的一种形式，即单纯地模拟用户完整的操作场景。缺点是不易维护。</p></li><li><p>模块化与类库</p><p>借鉴了编程语言中的模块化思想，把重复的操作单独封装成公共模块。在测试用例执行过程中，当需要用到模块封装时对其进行调用，这样就最大限度地消除了重复，从而提高测试用例的可维护性。</p></li><li><p>数据驱动测试</p><p>数据的改变驱动自动化测试的执行，最终引起测试结果的改变。 简单理解就是把数据驱动所需要的测试数据参数化，我们可以用多种方式来存储和管理这 些参数化的数据。</p></li><li><p>关键字驱动测试</p><p>这类框架会把自动化操作封装为“关键字”，避免测试人员直接接触代码，多以“填表格”的形式降低脚本的编写难度。</p></li></ul><h2 id="读取数据文件"><a href="#读取数据文件" class="headerlink" title="读取数据文件"></a>读取数据文件</h2><p>大多数测试倾向于把测试数据放到数据文件中。 下面是几种常见的读取数据文件的方法。</p><ul><li><p>读取 txt 文件</p><p>Python 提供了以下几种读取 txt 文件的方法。 </p><ul><li>read()：读取整个文件。 </li><li>readline()：读取一行数据。 </li><li>readlines()：读取所有行的数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span>(<span class="built_in">open</span>(<span class="string">&quot;./user_info.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)) <span class="keyword">as</span> user_file:</span><br><span class="line"> data = user_file.readlines()</span><br><span class="line"><span class="comment"># 格式化处理</span></span><br><span class="line">users = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line"> user = line[:-<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"> users.append(user)</span><br><span class="line"><span class="comment"># 打印 users 二维数组</span></span><br><span class="line"><span class="built_in">print</span>(users)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>读取 CSV 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"><span class="comment"># 读取本地 CSV 文件</span></span><br><span class="line">data = csv.reader(codecs.<span class="built_in">open</span>(<span class="string">&#x27;./user_info.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf_8_sig&#x27;</span>))</span><br><span class="line"><span class="comment"># 存放用户数据</span></span><br><span class="line">users = []</span><br><span class="line"><span class="comment"># 循环输出每行信息</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> islice(data, <span class="number">1</span>, <span class="literal">None</span>):</span><br><span class="line">    users.append(line)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(users)</span><br></pre></td></tr></table></figure><p><code>islice()</code> 函数返回一个迭代器，第一个参数指定迭代对象，第二个参数指定开始迭代的位置，第三个参数表示结束位。</p></li><li><p>读取 JSON 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./user_info.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> data = f.read()</span><br><span class="line">user_list = json.loads(data)</span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br></pre></td></tr></table></figure></li></ul><p><strong>参考资料：</strong></p><p>[1] 虫师：Selenium3自动化测试实战——基于Python语言. 北京：电子工业出版社，2019</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;测试环境的搭建&quot;&gt;&lt;a href=&quot;#测试环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;测试环境的搭建&quot;&gt;&lt;/a&gt;测试环境的搭建&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 Pycharm，python 3.8.3，安装 s</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JMeter实践</title>
    <link href="http://10185102110.github.io/2021/10/26/JMeter%20%E5%AE%9E%E8%B7%B5/"/>
    <id>http://10185102110.github.io/2021/10/26/JMeter%20%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-10-26T12:06:36.000Z</published>
    <updated>2021-10-29T16:54:45.655Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="JMeter-模拟-HTTP-请求"><a href="#JMeter-模拟-HTTP-请求" class="headerlink" title="JMeter 模拟 HTTP 请求"></a>JMeter 模拟 HTTP 请求</h1><h2 id="创建测试任务"><a href="#创建测试任务" class="headerlink" title="创建测试任务"></a>创建测试任务</h2><p>在 JMeter 中，任何类型的测试都需要先创建线程组，一个线程组可以看作一个测试任务。</p><p>（1）添加线程组。用鼠标右键单击“测试计划”，在快捷菜单中单击添加 -&gt; 线程(用户) -&gt; 线程组。</p><p>（2）设置线程组。线程组主要包括 3 个参数：</p><ul><li><p>线程数：一个线程代表一个虚拟用户。</p></li><li><p>Ramp-Up Period(in seconds)：设置线程的启动时长，单位为秒。如果线程数是 100，启动时长为 5s，那么需要 5s 启动 100 个线程，平均每秒启动 20 个线程。</p></li><li><p>循环次数：每个线程发送请求的次数。如果这个线程组中有 5 个HTTP请求，循环次数为 3 的话，那么一个线程会发送 5×3=15 个 HTTP 请求。如果选中了“永远”复选框，那么所有的线程会无限循环发送请求，直到手动单击工具栏上的停止按钮。</p></li></ul><p>如果用来做功能测试/接口测试，那么应保持默认设置。</p><p><img src="2.png" alt=""></p><h2 id="模拟网页-MD5-加密"><a href="#模拟网页-MD5-加密" class="headerlink" title="模拟网页 MD5 加密"></a>模拟网页 MD5 加密</h2><p>有一个 MD5 在线网站 <a href="http://www.md5.cz/。利用它可以对密码进行散列处理。用">http://www.md5.cz/。利用它可以对密码进行散列处理。用</a> Fiddler 对这个网站进行抓包，然后用 JMeter 来实现。具体的操作步骤如下。</p><p>（1）启动 Fiddler，打开浏览器，输入 <a href="http://ww.md5.cz/。在页面中输入“password”，然后单击按钮“hash">http://ww.md5.cz/。在页面中输入“password”，然后单击按钮“hash</a> darling, hash!”。</p><p><img src="0.png" alt=""></p><p><img src="1.png" alt=""></p><p>能看到浏览器发出的 HTTP 请求报文如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.md5.cz/getmd5.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.md5.cz</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>13</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.30</span><br><span class="line"><span class="attribute">Content-type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://www.md5.cz</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://www.md5.cz/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>_ga=GA1.2.1991138354.1635224796; _gid=GA1.2.478924991.1635224796</span><br><span class="line"></span><br><span class="line"><span class="ini"><span class="attr">what</span>=password</span></span><br></pre></td></tr></table></figure><p>（2）打开 JMeter，右击线程组-&gt;添加-&gt;取样器-&gt;HTTP 请求，参数按照报文填写：</p><p><img src="3.png" alt=""></p><p>（3）右击 HTTP请求-&gt;添加-&gt;配置元件-&gt;HTTP信息头管理器，添加 HTTP Header。可以先在 Fiddler 中复制所有的 HTTP Header，然后单击“从剪贴板添加”。由于 JMeter 自动添加 Host，所以不需要手动添加，如果有则需要删除。</p><p><img src="4.png" alt=""></p><p>（4）右击线程组-&gt;添加-&gt;监听器-&gt;察看结果树。运行JMeter，单击工具栏上的绿色按钮，可以运行脚本。通过结果树可以看到我们发出的 HTTP请求以及 Web 服务器返回的 HTTP 响应。</p><p><img src="5.png" alt=""></p><h1 id="JMeter-天气接口自动化测试"><a href="#JMeter-天气接口自动化测试" class="headerlink" title="JMeter 天气接口自动化测试"></a>JMeter 天气接口自动化测试</h1><h2 id="Fiddler-抓包分析"><a href="#Fiddler-抓包分析" class="headerlink" title="Fiddler 抓包分析"></a>Fiddler 抓包分析</h2><p>（1）启动 Fiddler，单击菜单栏中 Rules -&gt; Hide Image Requests。抓包的时候把图片的包隐藏。</p><p>（2）打开浏览器，打开 <a href="http://www.weather.com.cn/。在“城市名称”中输入“上海”，单击查询。">http://www.weather.com.cn/。在“城市名称”中输入“上海”，单击查询。</a></p><p>（3）抓到几十个包，但分析下来主要有两步操作：</p><ul><li><p>​    获取城市代码。发送一个 GET 请求到 <a href="http://toy1.weather.com.cn/search?cityname=%E4%B8%8A%E6%B5%B7&amp;callback=success_jsonpCallback&amp;_=1635227081722">http://toy1.weather.com.cn/search?cityname=%E4%B8%8A%E6%B5%B7&amp;callback=success_jsonpCallback&amp;_=1635227081722</a> ，“上海”被 URLEncode 后变成了 “%E4%B8%8A%E6%B5%B7”，从这个响应中可以得到上海的地区代码。</p><p><img src="6.png" alt=""></p></li><li><p>获取城市的天气数据。发送一个 GET 请求到 <a href="http://www.weather.com.cn/weather1d/101020100.shtml">http://www.weather.com.cn/weather1d/101020100.shtml</a> 得到该城市的天气数据。</p><p><img src="7.png" alt=""></p></li></ul><p>这两个请求必须带上一个叫“Referer”的 Header，Referer 的作用就是用来追踪来源的。</p><h2 id="JMeter-实现参数化"><a href="#JMeter-实现参数化" class="headerlink" title="JMeter 实现参数化"></a>JMeter 实现参数化</h2><p>（1）启动JMeter，在线程组下面新建一个 HTTP 请求，将其命名为 GetCityCode。发送一个Get方法的HTTP请求到 <a href="http://toy1.weather.com.cn/search?cityname=上海。添加一个HTTP信息头管理器，添加一个">http://toy1.weather.com.cn/search?cityname=上海。添加一个HTTP信息头管理器，添加一个</a> Referer：</p><p><img src="8.png" alt=""></p><p>（2）添加验证点。选择 GetCityCode 这个 HTTP 请求，右击-&gt;添加-&gt;断言-&gt;响应断言。右击线程组-&gt;添加-&gt;监听器-&gt;断言结果。匹配结果会显示到断言结果中，成功则只显示 HTTP 请求名称，失败则显示 HTTP 名称和没有匹配到的第一项。</p><p><img src="9.png" alt=""></p><p>（3）使用用户自定义变量。右击线程组-&gt;添加-&gt;配置元件-&gt;用户定义的变量。添加一个变量 city，其值设为“上海”。</p><p><img src="10.png" alt=""></p><p>在 GetCityCode 中使用这个变量：</p><p><img src="11.png" alt=""></p><p>这样就实现了参数化，以后修改城市的时候，只要修改用户自定义变量就可以。</p><h2 id="正则表达式提取城市地区代码"><a href="#正则表达式提取城市地区代码" class="headerlink" title="正则表达式提取城市地区代码"></a>正则表达式提取城市地区代码</h2><p>（1）选择 GetCityCode 这个 HTTP 请求，用鼠标右键选择添加-&gt;后置处理器-&gt;正则表达式提取器。</p><p><img src="12.png" alt=""></p><p>通过正则表达式提取器把城市代码提取出来，并且存到变量 citycode，然后把这个变量提供给第二个 HTTP 请求使用。</p><p>关联：一个 HTTP 请求使用了另一个 HTTP 请求中的数据，两个请求之间发生了关联。</p><p>（2）新建第二个 HTTP 请求，命名为 GetWeather。发送一个 GET 请求到 <a href="http://www.weather">http://www.weather</a>. com.cn/weather1d/${citycode}.shtml。运行结果如下：</p><p><img src="13.png" alt=""></p><p>到这里天气接口的简单自动化测试就完成了。</p><h1 id="BeanShell"><a href="#BeanShell" class="headerlink" title="BeanShell"></a>BeanShell</h1><p>BeanShell 是一个小型的 Java 源代码解释器，具有对象脚本语言特性。其能够动态执行标准 Java 语法，可以通过脚本来处理 Java 应用程序。</p><p>BeanShell 使用内置对象 vars 对变量进行存取操作。</p><ul><li><code>vars.get(&quot;name&quot;)</code>：从 JMeter 中获得变量值。</li><li><code>vars.put(&quot;key&quot;，&quot;value&quot;)</code>：数据存到 JMeter 变量中。</li></ul><p><strong>实例：BeanShell 调用自己写的 jar 包进行 MD5 加密</strong></p><p>（1）在 Eclipse 新建工程，添加一个 class 文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">md5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMd5</span><span class="params">(String plainText)</span> </span>&#123; </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>); </span><br><span class="line">            md.update(plainText.getBytes()); </span><br><span class="line">            <span class="keyword">byte</span> b[] = md.digest(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i; </span><br><span class="line"></span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>); </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; b.length; offset++) &#123; </span><br><span class="line">                i = b[offset]; </span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>) </span><br><span class="line">                i += <span class="number">256</span>; </span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">16</span>) </span><br><span class="line">                        buf.append(<span class="string">&quot;0&quot;</span>); </span><br><span class="line">                    buf.append(Integer.toHexString(i)); </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//32位加密 </span></span><br><span class="line">                <span class="keyword">return</span> buf.toString(); </span><br><span class="line">                <span class="comment">// 16位的加密 </span></span><br><span class="line">                <span class="comment">//return buf.toString().substring(8, 24); </span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123; </span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将工程导出为一个 jar 文件，取名为 md5.jar。</p><p>（2）启动 JMeter，在测试计划中引入这个 jar 包。</p><p><img src="14.png" alt=""></p><p>（3）在线程组中添加一个 BeanShell 取样器、一个调试取样器和一个查看结果树。</p><p><img src="15.png" alt=""></p><p><img src="16.png" alt=""></p><p>调试取样器中查看变量，可以看到密码被加密。</p><h1 id="自动登录禅道"><a href="#自动登录禅道" class="headerlink" title="自动登录禅道"></a>自动登录禅道</h1><h2 id="HTTP-Cookie-管理器"><a href="#HTTP-Cookie-管理器" class="headerlink" title="HTTP Cookie 管理器"></a>HTTP Cookie 管理器</h2><p>HTTP 协议本身是无状态的，为了维持登录的状态引入 Cookie 机制。</p><p>Cookie 的流程如下：<br>（1）浏览器发送第一个 HTTP 请求给 Web 服务器，里面包含用户名和密码。Web 服务器验证用户名和密码后，把登录相关的 Cookie 发送给浏览器客户端。<br>（2）浏览器客户端再一次访问的时候，会带上 Cookie，这样才处于登录状态，否则会被服务器跳转到登录页面。</p><p>用 JMeter 来模拟整个登录过程，需要在第一次登录后，用正则表达式提取器把登录相关的 Cookie 提取出来，然后把登录的 Cookie 插入后续的 HTTP 请求中形成关联。</p><p>JMeter 中的 HTTP Cookie 管理器可以自动管理 Cookie。如果 HTTP 响应中包含 Cookie，那么 HTTP Cookie 管理器会自动保存这些 Cookie。用户再次访问该站点时，HTTP 请求会自动使用这些 Cookie。一个线程组有自己存储 Cookie 的区域，并且一个线程组只能添加一个 HTTP Cookie 管理器。</p><p>选择线程组，用鼠标右键单击添加-&gt;配置元件-&gt;HTTP Cookie 管理器。</p><h2 id="自动登录禅道-1"><a href="#自动登录禅道-1" class="headerlink" title="自动登录禅道"></a>自动登录禅道</h2><p>（1）启动 Fiddler，启动过滤。在 Filter 选项卡中激活 Filter，并且在 Response Type and size 中选中“Show only HTML”。</p><p>（2）打开浏览器，输入 <a href="http://127.0.0.1:80/index.php（我部署的禅道地址），然后输入用户名和密码，单击“登录”。">http://127.0.0.1:80/index.php（我部署的禅道地址），然后输入用户名和密码，单击“登录”。</a></p><p>（3）从抓包可以看到，首先用 GET 方法得到一个数字（就是 verifyRand），然后用 POST 方法登录，但是密码是加密后发送给服务器的，Body 中的数据是 account=admin&amp;password=372539499122ad0a7085743c6c322bc8&amp;passwordStrength=1&amp;referer=%2Fzentao%2F&amp;verifyRand=527812645&amp;keepLogin=0&amp;captcha=。</p><p><img src="17.png" alt=""></p><p><img src="18.png" alt=""></p><p>（4）用浏览器的开发工具查看源代码，可以发现一个叫 md5 的 js 包。</p><p><img src="19.png" alt=""></p><p>查看登录页面的源代码发现加密规则是 <code>md5(md5(password) + rand)</code>，rand 就是上面说的 verifyRand，每次登录请求都会刷新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#loginPanel #submit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> account          = $(<span class="string">&#x27;#account&#x27;</span>).val().trim();</span><br><span class="line">    <span class="keyword">var</span> password         = $(<span class="string">&#x27;input:password&#x27;</span>).val().trim();</span><br><span class="line">    <span class="keyword">var</span> passwordStrength = computePasswordStrength(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hasMD5    = <span class="keyword">typeof</span>(md5) == <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> referer   = $(<span class="string">&#x27;#referer&#x27;</span>).val();</span><br><span class="line">    <span class="keyword">var</span> link      = createLink(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> keepLogin = $(<span class="string">&#x27;#keepLoginon&#x27;</span>).attr(<span class="string">&#x27;checked&#x27;</span>) == <span class="string">&#x27;checked&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> captcha   = $(<span class="string">&#x27;#captcha&#x27;</span>).length == <span class="number">1</span> ? $(<span class="string">&#x27;#captcha&#x27;</span>).val() : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    $.get(createLink(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;refreshRandom&#x27;</span>), <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> rand = data;</span><br><span class="line">        $.ajax</span><br><span class="line">        (&#123;</span><br><span class="line">            <span class="attr">url</span>: link,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;account&quot;</span>: account, </span><br><span class="line">                <span class="string">&quot;password&quot;</span>: hasMD5 ? md5(md5(password) + rand) : password,</span><br><span class="line">                <span class="string">&#x27;passwordStrength&#x27;</span> : passwordStrength,</span><br><span class="line">                <span class="string">&#x27;referer&#x27;</span> : referer,</span><br><span class="line">                <span class="string">&#x27;verifyRand&#x27;</span> : rand,</span><br><span class="line">                <span class="string">&#x27;keepLogin&#x27;</span> : keepLogin,</span><br><span class="line">                <span class="string">&#x27;captcha&#x27;</span> : captcha</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.result == <span class="string">&#x27;fail&#x27;</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    alert(data.message);</span><br><span class="line">                    <span class="keyword">if</span>($(<span class="string">&#x27;.captchaBox&#x27;</span>).length == <span class="number">1</span>) $(<span class="string">&#x27;.captchaBox .input-group .input-group-addon img&#x27;</span>).click();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                location.href = data.locate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>（5）重新写一个 jar 包实现禅道的加密，在测试计划中引入这个 jar 包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> md5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">md5</span> </span>&#123;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String key,String rand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> md5(md5(key) + rand);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//md5加密算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String plainText)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(plainText.getBytes());</span><br><span class="line">            <span class="keyword">byte</span> b[] = md.digest();</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; b.length; offset++) &#123;</span><br><span class="line">                i = b[offset];</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                    i += <span class="number">256</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">16</span>)</span><br><span class="line">                    buf.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                buf.append(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            result = buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）选择线程组，添加一个 HTTP Cookie 管理器，用来自动管理Cookie。</p><p>（7）选择线程组，添加一个 HTTP 请求默认值，填写的内容如图：</p><p><img src="20.png" alt=""></p><p>（8）选择线程组，添加用户自定义的变量。</p><p><img src="21.png" alt=""></p><p>（9）选择线程组，添加一个 HTTP 请求，命名为 Getverify，用来获取随机生成的 verifyRand，</p><p>GET <a href="http://127.0.0.1/zentao/user-refreshRandom.html。在这个请求下添加一个">http://127.0.0.1/zentao/user-refreshRandom.html。在这个请求下添加一个</a> HTTP 信息头管理器和一个 JSON 提取器。</p><p><img src="22.png" alt=""></p><p>（10）选择线程组，添加一个 BeanShell 取样器和一个调试取样器。</p><p><img src="23.png" alt=""></p><p>（11）选择线程组，添加一个 HTTP 请求，命名为 Login，用来登录禅道。添加一个 HTTP 信息头管理器，不填 Host 和 Cookie。</p><p><img src="24.png" alt=""></p><p>（12）添加一个察看结果树，运行就可以看到成功登录了。</p><p><img src="25.png" alt=""></p><h1 id="JMeter-给网站做压力测试"><a href="#JMeter-给网站做压力测试" class="headerlink" title="JMeter 给网站做压力测试"></a>JMeter 给网站做压力测试</h1><p>在一台电脑用 JMeter 模拟 200 个用户，同时去使用 bing 搜索不同的关键字， 查看页面返回的时间是否在正常范围内。</p><p>（1）首先把测试需要用到的 2 个参数放在 txt 文件中，新建一个 data.txt 文件，输入些数据， 一行有两个数据，用逗号分隔。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">百度百科,苹果</span><br><span class="line">百度百科,西瓜</span><br><span class="line">百度百科,香蕉</span><br><span class="line">百度百科,菠萝</span><br><span class="line">百度百科,杨梅</span><br></pre></td></tr></table></figure><p>（2）启动 JMeter，先添加一个线程组，然后右击添加-&gt;配置元件-&gt;CSV数据文件设置。</p><p><img src="26.png" alt=""></p><p>（3）添加 HTTP 请求，发送 GET 到 <a href="http://cn.bing.com/search?q=testteststtssdfds">http://cn.bing.com/search?q=</a>百度百科+水果名称。</p><p><img src="27.png" alt=""></p><p>（3）选中线程组，修改配置。</p><p><img src="28.png" alt=""></p><p>Ramp-Up 时间(秒):：设置线程需要多长时间全部启动。如果线程数为 200 ，准备时长为 10 ，那么需要每秒钟启动 20 个线程。</p><p>循环次数：每个线程发送请求的次数。如果线程数为 200 ，循环次数为 10 ，那么每个线程发送 10 次请求。总请求数为 200*10=2000 。</p><p>（4）添加汇总报告，运行并查看报告。</p><p><img src="29.png" alt=""></p><ul><li>异常%：本次测试中出现错误请求的数量。正常情况下应该是 0.00%。否则就是功能出现了问题。也就是当大量用户访问的时候，造成了功能失败的问题，这个问题很严重。</li><li>平均值：平均响应时间，单位是 ms。对于一个 HTTP 请求来说，响应时间应该在 200ms 之内，但是图中的平均响应时间是 8007ms，说明性能非常差。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;JMeter-模拟-HTTP-请求&quot;&gt;&lt;a href=&quot;#JMeter-模拟-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;JMeter 模拟 HTTP 请求&quot;&gt;&lt;/a&gt;JMeter 模拟 HTTP 请求&lt;/h1&gt;</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler抓包</title>
    <link href="http://10185102110.github.io/2021/10/20/fiddler%E6%8A%93%E5%8C%85/"/>
    <id>http://10185102110.github.io/2021/10/20/fiddler%E6%8A%93%E5%8C%85/</id>
    <published>2021-10-20T12:06:36.000Z</published>
    <updated>2021-10-29T16:53:03.593Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="基本界面"><a href="#基本界面" class="headerlink" title="基本界面"></a>基本界面</h1><p><img src="0.png" alt=""></p><p>左半边是 Web Sessions 列表（会话列表），显示捕捉到的每个 Session 的简短信息。</p><p>下面的一行黑框是 QuickExec（命令行工具），可以输入简单的命令，例如输入 cls 可以清空 Web Sessions。</p><p>右半边是 Inspectors 选项卡（功能面板），上面是 HTTP 请求报文，下面是 HTTP 响应报文。其中 Raw 选项卡可以查看完整的消息，Headers 选项卡只查看消息中的 Header。</p><p>Web Sessions 列表栏中包含的信息如下：</p><div class="table-container"><table><thead><tr><th>#</th><th>Result</th><th>Protocol</th><th>Host</th><th>URL</th><th>Body</th><th>Caching</th><th>Content-Type</th><th>Process</th></tr></thead><tbody><tr><td>Fiddler 生成的 ID</td><td>响应的状态码</td><td>使用的协议：HTTP/HTTPS</td><td>服务器的主机名和端口号</td><td>路径</td><td>响应中包含的字节数</td><td>跟缓存相关的字段的值</td><td>响应中 Content-Type 的值</td><td>对应本地 zhuabao</td></tr></tbody></table></div><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>Fiddler 是以代理 Web 服务器的形式工作的，它使用代理地址：127.0.0.1，端口：8888。</p><p>Fiddler 启动的时候，会偷偷地把 Internet 选项中的代理修改为 127.0.0.1，端口：8888。当 Fiddler 退出的时候，它会自动在 Internet 选项中取消代理，这样就不会影响别的程序。如果 Fiddler 非正常退出，这时候因为 Fiddler 没有自动注销，会造成网页无法访问，解决办法是重新启动 Fiddler。</p><h1 id="捕获-HTTP-HTTPS-协议的数据包"><a href="#捕获-HTTP-HTTPS-协议的数据包" class="headerlink" title="捕获 HTTP/HTTPS 协议的数据包"></a>捕获 HTTP/HTTPS 协议的数据包</h1><p>（1）启动 Fiddler，打开任何一个浏览器，输入 <a href="https://avebai.gitee.io/">https://avebai.gitee.io/</a>。</p><p>（2）回到 Fiddler 界面，在 Session 列表中，会看到 Fiddler 已经捕获到了很多 Session。可以选择任何一个 Session，然后选择 Inspectors 选项卡，就可以查看详细内容。</p><p>单击 Fiddler 左下角的 “Capturing” 按钮可以设置开始抓包或者停止抓包。</p><h2 id="HTTP-协议报文结构"><a href="#HTTP-协议报文结构" class="headerlink" title="HTTP 协议报文结构"></a>HTTP 协议报文结构</h2><p>HTTP 报文分 2 个：一个是 HTTP 请求报文，一个是 HTTP 响应报文。</p><p>（1）HTTP 请求报文的结构</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//起始行（Request line）</span><br><span class="line"><span class="keyword">GET</span> <span class="string">https://avebai.gitee.io/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">//首部（Request Header）</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>avebai.gitee.io    </span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Microsoft Edge&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.30  </span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9     </span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br  </span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6  </span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>Hm_lvt_211d055ab9f6b88805047adca6ce783d=1633064099,1634716265,1634914872,1635040194; Hm_lpvt_211d055ab9f6b88805047adca6ce783d=1635040543</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>W/&quot;6172d18e-a294&quot;</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 22 Oct 2021 14:58:22 GMT</span><br><span class="line">回车符+换行符</span><br><span class="line">//主体（Body）</span><br></pre></td></tr></table></figure><p>HTTP 请求报文分为 3 部分。其中首部第一行表示请求方法（POST/GET）+URI（不是URL）+协议版本，如果是 GET 就没有主体。</p><p>（2）HTTP 响应报文的结构</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//起始行（Response line）</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">304</span> Not Modified</span><br><span class="line">//首部（Response Header）</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Oct 2021 02:07:42 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Fri, 22 Oct 2021 14:58:22 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;6172d18e-a294&quot;</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>Mon, 25 Oct 2021 02:07:42 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=86400</span><br><span class="line">回车符+换行符</span><br><span class="line">//主体（Body）</span><br></pre></td></tr></table></figure><p>Response 消息的结构和 Request 消息的结构基本一样。</p><p>起始行包括协议版本+状态码+状态码信息。</p><div class="table-container"><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1XX</td><td>信息提示，表示请求已被成功接收，继续处理</td></tr><tr><td>2XX</td><td>成功，表示请求已被成功接收</td></tr><tr><td>3XX</td><td>重定向，必须进一步处理</td></tr><tr><td>4XX</td><td>客户端错误，请求有语法错误或请求无法实现</td></tr><tr><td>5XX</td><td>服务器错误，服务器未能实现合法的请求</td></tr></tbody></table></div><p>常见的状态码：</p><ul><li>200：OK，服务器成功处理了请求。</li><li>204：No Content，没有内容。</li><li>206：Partial Content，部分内容。</li><li>301/302：Moved Permanently，请求的 URL 已移走。</li><li>304：Not Modified，上次的文档已被缓存且是最新的，可以继续使用。</li><li>400：Bad Request，客户端请求有语法错误。</li><li>403：Forbidden，拒绝访问。</li><li>404：Not Found，未找到资源。</li><li>401：Unauthorized，未授权错误禁止访问。</li><li>501：Internal Server Error，服务器内部错误。</li><li>503：Server Unavailable，服务器暂时不可用。</li></ul><p>（3）URL</p><p>URL 的全称是Uniform Resource Locator，中文译名为“统一资源定位符”，用于完整地描述 Internet 上某一处资源的地址。<br>URI 的全称是 Uniform Resource Identifier，中文译名为“统一资源标识符”，用来唯一地标识一个资源。而 URL 是一种具体的 URI。</p><p>URL 的基本格式：协议+域名+资源路径+参数+锚</p><p>协议一般为 http、https、ftp 等；锚以 ‘#’ 开头。</p><p>参数可以通过 fiddler 中的 WebForms 查看。</p><p>锚是页面内部的超链接，可以快速到达本页内响应的位置。</p><p>（4）HTTP 请求方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息并返回实体主体。</td></tr><tr><td>HEAD</td><td>类似 GET，但返回的响应中没有具体内容，用于获取报文头部。</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理，数据被包含在请求体中。可能导致新资源的建立或对已有资源的修改。</td></tr><tr><td>PUT</td><td>向服务器传送数据。</td></tr><tr><td>DELETE</td><td>请求服务器删除指定页面。</td></tr></tbody></table></div><p>GET 和 POST 的区别：</p><ul><li>GET 提交的数据会放在 URL 之后，以 ‘？’ 分割 URL 和传输的数据，参数之间以 ‘&amp;’ 相连。POST 方法是把提交的数据放在 HTTP 包的 Body 中。</li><li>GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的数据大小没有限制。</li><li>GET 方式提交数据会带来安全问题，比如一个登录页面通过 GET 方式提交数据时，用户名和密码将出现在 URL 上。</li></ul><p>（5）Header</p><div class="table-container"><table><thead><tr><th>Header 字段</th><th>描述</th></tr></thead><tbody><tr><td>Cookie</td><td></td></tr><tr><td>Accept</td><td>表示浏览器可以接受的媒体类型。</td></tr><tr><td>Accept-Encoding</td><td>表示浏览器支持的压缩方式。</td></tr><tr><td>Accept-Language</td><td>表示浏览器支持的语言。</td></tr><tr><td>User-Agent</td><td>告诉服务器，浏览器客户端的相关信息，可以修改它伪装成任何客户端</td></tr><tr><td>Referer</td><td>用来让服务器判断用户的来源页面</td></tr><tr><td>Connection</td><td>表示 TCP 连接信息</td></tr><tr><td>Host</td><td>指定被请求的主机和端口号</td></tr><tr><td></td></tr></tbody></table></div><h2 id="设置断点拦截-HTTP-请求"><a href="#设置断点拦截-HTTP-请求" class="headerlink" title="设置断点拦截 HTTP 请求"></a>设置断点拦截 HTTP 请求</h2><p>一、全局断点</p><p>（1）启动 Fiddler，在菜单栏中单击 Rules -&gt; Automatic Breakpoint -&gt; Before Requests。</p><p>（2）打开浏览器，输入“www.baidu.com”，这时任务栏上的 Fiddler 图标闪烁，说明 Fiddler 拦截住了 HTTP 请求。</p><p>（3）在菜单栏中单击 Rules-&gt; Automatic Breakpoint-&gt;Disable（因为已经拦截住想要的 HTTP 请求了，其他 HTTP 请求就不需要拦截了）。</p><p>（4）选中需要修改的 HTTP 请求，选中 “Inspectors” 面板，可以使用 Raw 选项卡修改请求文件。</p><p>（5）单击绿色的 “Run to Completion” 按钮放行。</p><p>二、单个断点</p><p>命令行输入：bpm www.baidu.cm（拦截 www.baidu.com 请求）</p><p>输入命令：bpu （解除拦截）</p><h2 id="设置断点修改-HTTP-响应"><a href="#设置断点修改-HTTP-响应" class="headerlink" title="设置断点修改 HTTP 响应"></a>设置断点修改 HTTP 响应</h2><p>一、全局断点</p><p>（1）启动 Fiddler，在菜单栏中单击 Rules -&gt; Automatic Breakpoint -&gt; After Response。</p><p>（2）打开浏览器，输入“www.baidu.com”，这时任务栏上的 Fiddler 图标闪烁，说明 Fiddler 拦截住了 HTTP 请求。</p><p>（3）在菜单栏中单击 Rules-&gt; Automatic Breakpoint-&gt;Disable（因为已经拦截住想要的 HTTP 请求了，其他 HTTP 请求就不需要拦截了）。</p><p>（4）选中需要修改的 HTTP 请求，选中 “Inspectors” 面板，可以使用 Raw 选项卡修改响应文件。</p><p>（5）单击绿色的 “Run to Completion” 按钮放行。</p><p>二、单个断点</p><p>命令行输入：bpafter www.baidu.com（拦截 www.baidu.com 响应）</p><p>输入命令：bpafter （解除拦截）</p><h1 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h1><p>（1）启动 Fiddler，单击菜单栏中 Tools-&gt;Options-&gt;Connections，选中“Allow remote computers to connect”，Fiddler 的默认端口号是 8888。</p><p>（2）以小米 10 为例，打开手机中的设置-&gt;WLAN，找到手机当前连接的 WiFi，修改代理服务器，服务器主机名为 Fiddler 所在电脑的 IP 地址，服务器端口为 8888，如下图所示：</p><p><img src="2.jpg" alt=""></p><p>在 Fiddler 中，将鼠标放在右上方的“online”图标上能看到主机 IP 地址。</p><p>（3）现在在手机上打开网址或者应用就能在 Fiddler 中捕获手机发出的 HTTP 包，可以设置过滤条件，如下：</p><p><img src="3.png" alt=""></p><p>（4）要捕获 HTTPS 包就要在手机上安装证书。打开手机浏览器，输入 <a href="http://192.168.1.101:8888">http://192.168.1.101:8888</a> ，点击图中蓝色字段下载证书，点击证书文件进行安装即可。</p><p><img src="1.jpg" alt=""></p><p>（5）点击设置-&gt;系统安全-&gt;信任的凭证-&gt;用户 可以看到安装的证书，点击删除即可卸载。</p><p><img src="4.jpg" alt=""></p><h1 id="Fiddler-发送-HTTP-HTTPS-请求"><a href="#Fiddler-发送-HTTP-HTTPS-请求" class="headerlink" title="Fiddler 发送 HTTP/HTTPS 请求"></a>Fiddler 发送 HTTP/HTTPS 请求</h1><p>功能组件 Composer 可以用来发送 HTTP/HTTPS 请求。</p><p><img src="5.png" alt=""></p><p>Composer 有两种编辑模式：</p><ul><li>Parsed模式。这个模式比较常用，把请求分为 3 个部分：请求起始行、请求 Header 和请求 Body。</li><li>Raw模式。该模式需要一行一行地写一个请求。</li></ul><p>也可以把会话列表中的 HTTP/HTTPS 请求拖拽到 Composer 中编辑后再发送出去。</p><h2 id="Replay-菜单"><a href="#Replay-菜单" class="headerlink" title="Replay 菜单"></a>Replay 菜单</h2><p>在会话列表中，选中一个或者多个 Session，右键-&gt;Replay，可以看到一个菜单，详细说明如下：</p><div class="table-container"><table><thead><tr><th>Reissue Requests</th><th>重复发送请求</th></tr></thead><tbody><tr><td>Reissue Unconditionally</td><td>无条件反复发送选中的请求</td></tr><tr><td>Reissue and Edit</td><td>把选中的请求以原来的形式重新发送。在每个Session中设置断点，可以在发送给服务器之前修改请求</td></tr><tr><td>Reissue and Verify</td><td>重新发送请求，检查响应，如果和上一个请求一样就变成绿色</td></tr><tr><td>Reissue Sequentially</td><td>选中多个Session会按顺序重新发送请求，单线程</td></tr><tr><td>Reissue from Composer</td><td>在Composer中编辑该请求</td></tr><tr><td>Revisit in IE</td><td>在IE浏览器中用Get方法访问该请求</td></tr></tbody></table></div><h2 id="简单的性能测试"><a href="#简单的性能测试" class="headerlink" title="简单的性能测试"></a>简单的性能测试</h2><p>在 Web Sessions 列表中，选中一个或者多个 Session，然后按下 Shift 键的同时单击“Replay”按钮，会弹出提示框，要求指定每个请求被重新发送的次数。Fiddler 会用多线程同时发送该请求，相当于模拟了很多用户同时访问该请求。</p><p><img src="6.png" alt=""></p><h2 id="安全测试之重放攻击"><a href="#安全测试之重放攻击" class="headerlink" title="安全测试之重放攻击"></a>安全测试之重放攻击</h2><p>重放攻击（Replay Attacks），指黑客通过抓包的方式，得到客户端的请求数据及请求连接，重复地向服务器发送请求的行为。</p><p>重放攻击的危害很大，比如下单、投票、点赞等功能，攻击者可以对用户的请求进行抓包，然后重复发送来进行刷单、刷票等操作。</p><p><strong>如何防止重放攻击？</strong></p><p>在 HTTP/HTTPS 请求中添加时间戳（stamp）和数字签名（sign），可以防止重放攻击。也就是说每次发送请求时需要多传两个参数，分别为 stamp 和 sign。数字签名使用对称加密，保证请求的有效性；时间戳保证请求的时效性。</p><h1 id="Fiddler-实现弱网测试"><a href="#Fiddler-实现弱网测试" class="headerlink" title="Fiddler 实现弱网测试"></a>Fiddler 实现弱网测试</h1><p>Fiddler 是通过延迟发送或接收数据的时间来模拟限速的。</p><p>需要模拟出以下 3 种弱网场景：<br>（1）网络慢或延迟，导致加载时间长。<br>（2）网络中断，Web 服务器返回 500 等状态码。<br>（3）网络超时，HTTP/HTTPS 请求发出去后，很久都没有响应。</p><h2 id="精确控制网速"><a href="#精确控制网速" class="headerlink" title="精确控制网速"></a>精确控制网速</h2><p>（1）启动 Fiddler，选择 Rules -&gt; Performances -&gt; Simulate Modem Speeds，此时打开一个网页可以感觉到明显变慢。</p><p>（2）点击菜单 Rules-&gt;Customize Rules，在 FiddlerScript 中找到如下一段代码（ctrl+F 快速查找）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (m_SimulateModem) &#123;</span><br><span class="line">// Delay sends by 300ms per KB uploaded.每上传1kb数据，延时0.3秒</span><br><span class="line">oSession[&quot;request-trickle-delay&quot;] = &quot;300&quot;; </span><br><span class="line">    // Delay receives by 150ms per KB downloaded.每下载1kb数据，延时0.15秒</span><br><span class="line">    oSession[&quot;response-trickle-delay&quot;] = &quot;150&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以修改数值以精确控制网速。</p><p>网络取值的算法就是 1000/下载速度 = 需要延迟的时间（ms），比如 50kbit/s 需要延迟 200ms 来接收数据。</p><h2 id="模拟网络中断"><a href="#模拟网络中断" class="headerlink" title="模拟网络中断"></a>模拟网络中断</h2><p>用 Fiddler 可以下断点，伪造 HTTP 响应。客户端发出的 HTTP 请求根本没有到达服务器，而是被 Fiddler 直接返回了一个伪造的 HTTP 响应。</p><p>具体做法是用 Fiddler 拦截住客户端发出来的 HTTP 请求，然后在“Choose Response”选中需要返回的状态码，然后单击“Run to Completion”返回给客户端，如下图：</p><p><img src="7.png" alt=""></p><p>返回的页面信息被改为 502。</p><h2 id="Fiddler-模拟网络超时"><a href="#Fiddler-模拟网络超时" class="headerlink" title="Fiddler 模拟网络超时"></a>Fiddler 模拟网络超时</h2><p>利用 Fiddler 下断点的功能拦截住移动客户端发出的 HTTP 请求，这样就相当于网络超时了，然后再检查客户端有没有重发或者超时的机制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;基本界面&quot;&gt;&lt;a href=&quot;#基本界面&quot; class=&quot;headerlink&quot; title=&quot;基本界面&quot;&gt;&lt;/a&gt;基本界面&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;0.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;左半边是 Web Sessions</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>设计一个加密算法</title>
    <link href="http://10185102110.github.io/2021/10/14/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>http://10185102110.github.io/2021/10/14/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</id>
    <published>2021-10-14T11:24:56.000Z</published>
    <updated>2021-10-22T14:55:13.209Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>密钥为一个随机密码本中的一个随机段落，以下步骤采用同一密钥。</p><ul><li><p>先采用维吉尼亚(Vigenere)表的一次密码本加密。</p><p>Vigenere 表：</p><p><img src="0.png" alt=""></p><p>加密示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">密钥(列选择器)：iamie   xistt   hatis   cert</span><br><span class="line">明文(行选择器)：MACHI   NESCA   NNOTT   HINK</span><br><span class="line">密文(表中的值)：uaopm   kmkvt   unhbl   jmed</span><br></pre></td></tr></table></figure></li><li><p>再采用带密钥的简单列置换算法对第一步得到的密文加密，行入列出。</p><p>加密示例：</p><p>假设明文为：endalen is bordered on the northwest by the municipalities of alvdal and tynset</p><ol><li>选取密钥，比如 sample。（以此确定矩阵每行字符数以及输出列选择顺序。如有相同字母，保留最左边，其他剔除）。</li><li>按照密钥 sample 中各字母的排列顺序来确定输出列选择顺序。（字母表排列在前的值小），sample 对应的输出列选择顺序为：614532。</li><li>按密钥长度按行写明文为如下（去掉空格），最末一行如不足一行，随便添点数据。</li><li>按 614532 顺序按列读下面的矩阵，得到密文：niettbuasdtaerooseiilneelodnehctaasddsrhhynloaybabeewtiiflncendnrtmpevdt</li><li>解密时，将密文按 614532 顺序按列填写矩阵，然后按行读取即是明文。</li></ol><p><img src="1.png" alt=""></p></li><li><p>解密时，先用列入行出的列置换算法解密，再用 Vigenere 表解密。</p></li></ul><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><ul><li>Windows 10</li><li>JDK 1.8.0_301</li></ul><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><p>主要函数功能说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成维吉尼亚表</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FixVigenere</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//加密，明文仅支持大写字母</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Encode</span><span class="params">(String s,String password)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//解密，密文仅支持小写字母</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Decode</span><span class="params">(String s,String password)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//得到列选择顺序</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">MySort</span><span class="params">(String password)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//随机生成密钥</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">GeneratePassword</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">char</span>[][] vigenere = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String lowStr = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> colleft; <span class="comment">//列置换时记录最后一行应有的字符个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成维吉尼亚表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FixVigenere</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=i;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">                vigenere[i][j-i] = lowStr.charAt(j);</span><br><span class="line">            &#125;</span><br><span class="line">            j = j-i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                vigenere[i][j++] = lowStr.charAt(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Encode</span><span class="params">(String s,String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">//首先替换密码</span></span><br><span class="line">        String ss = s.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = ss.length(); <span class="comment">//明文长度</span></span><br><span class="line">        StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = ss.charAt(index)-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">int</span> col = password.charAt(index % password.length())-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            str.append(vigenere[row][col]);</span><br><span class="line">            length--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后置换密码，行入列出</span></span><br><span class="line">        String sss = str.toString();</span><br><span class="line">        <span class="keyword">int</span>[] arr = MySort(password);</span><br><span class="line">        <span class="keyword">int</span> rowlen = (<span class="keyword">int</span>)Math.ceil((<span class="keyword">double</span>)sss.length()/arr.length);</span><br><span class="line">        colleft = sss.length() % arr.length;</span><br><span class="line">        <span class="keyword">char</span>[][] ColChange = <span class="keyword">new</span> <span class="keyword">char</span>[rowlen][arr.length];</span><br><span class="line">        <span class="comment">//最后一行的空位填充</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-colleft;i++)&#123;</span><br><span class="line">            ColChange[ColChange.length-<span class="number">1</span>][colleft+i] = (<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sss.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = i / arr.length;</span><br><span class="line">            <span class="keyword">int</span> col = i % arr.length;</span><br><span class="line">            ColChange[row][col] = sss.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        ArrayList&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)&#123;</span><br><span class="line">            l.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sssindex = <span class="number">0</span>;</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++)&#123;</span><br><span class="line">            index = l.indexOf(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ColChange.length;j++)&#123;</span><br><span class="line">                ans.append(ColChange[j][index]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">Decode</span><span class="params">(String s,String password)</span></span>&#123;</span><br><span class="line">        String sss = s.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//置换密码，列入行出</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = MySort(password);</span><br><span class="line">        <span class="keyword">int</span> rowlen = sss.length()/arr.length;</span><br><span class="line">        <span class="keyword">char</span>[][] ColChange = <span class="keyword">new</span> <span class="keyword">char</span>[rowlen][arr.length];</span><br><span class="line">        ArrayList&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)&#123;</span><br><span class="line">            l.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sssindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = l.indexOf(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ColChange.length;j++)&#123;</span><br><span class="line">                ColChange[j][index] = sss.charAt(sssindex++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ColChange.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">                ans.append(ColChange[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;colleft;i++)&#123;</span><br><span class="line">            ans.append(ColChange[ColChange.length-<span class="number">1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//替换密码</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        String ss = ans.toString();</span><br><span class="line">        <span class="keyword">int</span> length = ss.length();</span><br><span class="line">        StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> key = password.charAt(index % password.length());</span><br><span class="line">            <span class="keyword">int</span> col = key-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">char</span> mi = ss.charAt(index);</span><br><span class="line">            <span class="keyword">char</span> ming;</span><br><span class="line">            <span class="keyword">if</span>(mi&gt;=key)&#123;</span><br><span class="line">                ming = (<span class="keyword">char</span>)(mi-key+<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ming = (<span class="keyword">char</span>)(<span class="string">&#x27;Z&#x27;</span>-(key-mi-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            str.append(ming);</span><br><span class="line">            length--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到列选择顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] MySort(String password)&#123;</span><br><span class="line">        ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;password.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = password.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(c)) list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (Character ch : list) &#123;</span><br><span class="line">            str.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        String s = str.toString();</span><br><span class="line">        <span class="comment">//System.out.println(s);</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            arr[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(j)&gt;s.charAt(i))&#123;</span><br><span class="line">                    arr[j]++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    arr[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机生成密钥</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">GeneratePassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>, n = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> length = (<span class="keyword">int</span>)(Math.random()*(n-m)+m);</span><br><span class="line">        StringBuffer password = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = (<span class="keyword">int</span>)(Math.random()*<span class="number">26</span>);</span><br><span class="line">            password.append(lowStr.charAt(index));</span><br><span class="line">            length--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> password.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成维吉尼亚表</span></span><br><span class="line">        FixVigenere();</span><br><span class="line">        <span class="comment">//随机生成密钥</span></span><br><span class="line">        String password = GeneratePassword();</span><br><span class="line"></span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;密码 @AveBai 2021/10/16&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">850</span>, <span class="number">600</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建中间容器（面板容器）</span></span><br><span class="line">        JSplitPane splitPane = <span class="keyword">new</span> JSplitPane();</span><br><span class="line">        JPanel panel1 = <span class="keyword">new</span> JPanel(<span class="keyword">null</span>);</span><br><span class="line">        JPanel panel2 = <span class="keyword">new</span> JPanel(<span class="keyword">null</span>);</span><br><span class="line">        splitPane.setLeftComponent(panel1);</span><br><span class="line">        splitPane.setRightComponent(panel2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          加密界面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        JLabel label1 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label1.setBounds(<span class="number">20</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">        label1.setText(<span class="string">&quot;输入明文:&quot;</span>);</span><br><span class="line">        label1.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        label1.setForeground(Color.BLUE);</span><br><span class="line">        panel1.add(label1);</span><br><span class="line"></span><br><span class="line">        JLabel label3 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label3.setBounds(<span class="number">20</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">        label3.setText(<span class="string">&quot;友情提示:仅支持大写字母&quot;</span>);</span><br><span class="line">        label3.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">        panel1.add(label3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域组件</span></span><br><span class="line">        JTextArea textArea1 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea1.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea1.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        JTextArea textArea2 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea2.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea2.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane1 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea1,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane1.setBounds(<span class="number">20</span>,<span class="number">50</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel1.add(scrollPane1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域组件</span></span><br><span class="line">        JTextArea textArea3 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea3.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea3.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        JTextArea textArea4 = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea4.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea4.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密按钮</span></span><br><span class="line">        <span class="keyword">final</span> JButton btn1 = <span class="keyword">new</span> JButton(<span class="string">&quot;加密&quot;</span>);</span><br><span class="line">        btn1.setBounds(<span class="number">20</span>,<span class="number">260</span>,<span class="number">80</span>,<span class="number">35</span>);</span><br><span class="line">        btn1.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        btn1.setForeground(Color.BLUE);</span><br><span class="line">        btn1.setContentAreaFilled(<span class="keyword">false</span>);</span><br><span class="line">        btn1.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                textArea3.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                textArea3.append(Encode(textArea1.getText(),password));</span><br><span class="line">                textArea2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                textArea2.append(textArea3.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel1.add(btn1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane3 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea3,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane3.setBounds(<span class="number">20</span>,<span class="number">320</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel1.add(scrollPane3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          解密界面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        JLabel label2 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label2.setBounds(<span class="number">20</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">        label2.setText(<span class="string">&quot;输入密文:&quot;</span>);</span><br><span class="line">        label2.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">        label2.setForeground(Color.BLUE);</span><br><span class="line">        panel2.add(label2);</span><br><span class="line"></span><br><span class="line">        JLabel label4 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label4.setBounds(<span class="number">20</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">50</span>);</span><br><span class="line">        label4.setText(<span class="string">&quot;友情提示:仅支持小写字母&quot;</span>);</span><br><span class="line">        label4.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">16</span>));</span><br><span class="line">        panel2.add(label4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane2 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea2,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane2.setBounds(<span class="number">20</span>,<span class="number">50</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel2.add(scrollPane2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密按钮</span></span><br><span class="line">        <span class="keyword">final</span> JButton btn2 = <span class="keyword">new</span> JButton(<span class="string">&quot;解密&quot;</span>);</span><br><span class="line">        btn2.setBounds(<span class="number">20</span>,<span class="number">260</span>,<span class="number">80</span>,<span class="number">35</span>);</span><br><span class="line">        btn2.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        btn2.setForeground(Color.BLUE);</span><br><span class="line">        btn2.setContentAreaFilled(<span class="keyword">false</span>);</span><br><span class="line">        btn2.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                textArea4.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                textArea4.append(Decode(textArea2.getText(),password));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel2.add(btn2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板</span></span><br><span class="line">        JScrollPane scrollPane4 = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea4,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line">        scrollPane4.setBounds(<span class="number">20</span>,<span class="number">320</span>,<span class="number">350</span>,<span class="number">150</span>);</span><br><span class="line">        panel2.add(scrollPane4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分隔条上显示快速 折叠/展开 两边组件的小按钮</span></span><br><span class="line">        splitPane.setOneTouchExpandable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 拖动分隔条时连续重绘组件</span></span><br><span class="line">        splitPane.setContinuousLayout(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置分隔条的初始位置</span></span><br><span class="line">        splitPane.setDividerLocation(<span class="number">400</span>);</span><br><span class="line">        <span class="comment">// 把分隔面板作为内容面板添加到窗口并显示</span></span><br><span class="line">        jf.setContentPane(splitPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        textArea1.append(<span class="string">&quot;MACHINESCANNOTTHINK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;p&gt;密钥为一个随机密码本中的一个随机段落，以下步骤采用同一密钥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先采用维吉尼亚(Vi</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="信息安全" scheme="http://10185102110.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java swing</title>
    <link href="http://10185102110.github.io/2021/10/14/Java%20swing/"/>
    <id>http://10185102110.github.io/2021/10/14/Java%20swing/</id>
    <published>2021-10-14T08:51:52.000Z</published>
    <updated>2021-10-17T15:39:29.457Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Swing 是 Java 为图形界面应用开发提供的一组工具包，是 Java 基础类的一部分。</p><p>Swing 包含了构建图形界面（GUI）的各种组件，如: 窗口、标签、按钮、文本框等。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>一个 Java 的图形界面，由各种不同类型的“元素”组成，例如: 窗口、菜单栏、对话框、标签、按钮、文本框等等，这些“元素”统一被称为组件（Component）。</p><p>组件按照不同的功能，可分为顶层容器、中间容器、基本组件。一个简单窗口的组成，如下层级结构所示:</p><ul><li>顶层容器<ul><li>菜单栏</li><li>中间容器<ul><li>基本组件</li><li>基本组件</li></ul></li></ul></li></ul><p>组件类型的继承关系:</p><ol><li>顶层容器属于窗口类组件，继承自 java.awt.Window；</li><li>中间容器和基本组件 继承自 javax.swing.JComponent。</li></ol><h3 id="顶层容器"><a href="#顶层容器" class="headerlink" title="顶层容器"></a>顶层容器</h3><p>顶层容器属于窗口类组件，可以独立显示，一个图形界面至少需要一个窗口，例如:</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JFrame</td><td>一个普通的窗口（绝大多数 Swing 图形界面程序使用 JFrame 作为顶层容器）</td></tr><tr><td style="text-align:center">2</td><td>JDialog</td><td>对话框</td></tr></tbody></table></div><h3 id="中间容器"><a href="#中间容器" class="headerlink" title="中间容器"></a>中间容器</h3><p>中间容器充当基本组件的载体，不可独立显示。中间容器可以添加若干基本组件（也可以嵌套添加中间容器），对容器内的组件进行管理，类似于给各种复杂的组件进行分组管理。最顶层的一个中间容器必须依托在顶层容器（窗口）内。</p><p>常用的中间容器（面板）:</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JPanel</td><td>一般轻量级面板容器组件</td></tr><tr><td style="text-align:center">2</td><td>JScrollPane</td><td>带滚动条的，可以水平和垂直滚动的面板组件</td></tr><tr><td style="text-align:center">3</td><td>JSplitPane</td><td>分隔面板</td></tr><tr><td style="text-align:center">4</td><td>JTabbedPane</td><td>选项卡面板</td></tr><tr><td style="text-align:center">5</td><td>JLayeredPane</td><td>层级面板</td></tr></tbody></table></div><p>特殊的中间容器：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JMenuBar</td><td>菜单栏</td></tr><tr><td style="text-align:center">2</td><td>JToolBar</td><td>工具栏</td></tr><tr><td style="text-align:center">3</td><td>JPopupMenu</td><td>弹出菜单</td></tr><tr><td style="text-align:center">4</td><td>JInternalFrame</td><td>内部窗口</td></tr></tbody></table></div><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><p>基本组件是直接实现人机交互的组件。</p><p>常用的简单的基本组件:</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JLabel</td><td>标签</td></tr><tr><td style="text-align:center">2</td><td>JButton</td><td>按钮</td></tr><tr><td style="text-align:center">3</td><td>JRadioButton</td><td>单选按钮</td></tr><tr><td style="text-align:center">4</td><td>JCheckBox</td><td>复选框</td></tr><tr><td style="text-align:center">5</td><td>JToggleButton</td><td>开关按钮</td></tr><tr><td style="text-align:center">6</td><td>JTextField</td><td>文本框</td></tr><tr><td style="text-align:center">7</td><td>JPasswordField</td><td>密码框</td></tr><tr><td style="text-align:center">8</td><td>JTextArea</td><td>文本区域</td></tr><tr><td style="text-align:center">9</td><td>JComboBox</td><td>下拉列表框</td></tr><tr><td style="text-align:center">10</td><td>JList</td><td>列表</td></tr><tr><td style="text-align:center">11</td><td>JProgressBar</td><td>进度条</td></tr><tr><td style="text-align:center">12</td><td>JSlider</td><td>滑块</td></tr></tbody></table></div><p>选取器组件：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JFileChooser</td><td>文件选取器</td></tr><tr><td style="text-align:center">2</td><td>JColorChooser</td><td>颜色选取器</td></tr></tbody></table></div><p>其他较为复杂的基本组件：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>JTable</td><td>表格</td></tr><tr><td style="text-align:center">2</td><td>JTree</td><td>树</td></tr></tbody></table></div><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><p>把 <code>Swing</code> 的各种组件(<code>JComponent</code>)添加到面板容器中(<code>JPanel</code>)，需要给面板容器指定布局管理器(<code>LayoutManager</code>)，明确容器(<code>Container</code>)内的各个组件之间的排列布局方式。</p><p>常用的布局管理器：</p><div class="table-container"><table><thead><tr><th style="text-align:center">#</th><th>布局管理器</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>FlowLayout</td><td>流式布局，按组件加入的顺序，按水平方向排列，排满一行换下一行继续排列。</td></tr><tr><td style="text-align:center">2</td><td>GridLayout</td><td>网格布局，把<code>Container</code>按指定行列数分隔出若干网格，每一个网格按顺序放置一个控件。</td></tr><tr><td style="text-align:center">3</td><td>GridBagLayout</td><td>网格袋布局，按网格划分<code>Container</code>，每个组件可占用一个或多个网格，可将组件垂直、水平或沿它们的基线对齐。</td></tr><tr><td style="text-align:center">4</td><td>BoxLayout</td><td>箱式布局，将<code>Container</code>中的多个组件按 水平 或 垂直 的方式排列。</td></tr><tr><td style="text-align:center">5</td><td>GroupLayout</td><td>分组布局，将组件按层次分组（串行 或 并行），分别确定 组件组 在 水平 和 垂直 方向上的位置。</td></tr><tr><td style="text-align:center">6</td><td>CardLayout</td><td>卡片布局，将<code>Container</code>中的每个组件看作一张卡片，一次只能显示一张卡片，默认显示第一张卡片。</td></tr><tr><td style="text-align:center">7</td><td>BorderLayout</td><td>边界布局，把<code>Container</code>按方位分为 5 个区域（东、西、南、北、中），每个区域放置一个组件。</td></tr><tr><td style="text-align:center">8</td><td>SpringLayout</td><td>弹性布局，通过定义组件四条边的坐标位置来实现布局。</td></tr><tr><td style="text-align:center">9</td><td>null</td><td>绝对布局，通过设置组件在<code>Container</code>中的<strong>坐标位置</strong>来放置组件。</td></tr></tbody></table></div><p>若采用绝对布局，给组件设置坐标和宽高的方法（方法定义在 Component 组件基类中）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置组件的坐标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(Point p)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的宽高</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Dimension d)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的界限（一次性设置组件的 坐标 和 宽高）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBounds</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBounds</span><span class="params">(Rectangle rect)</span></span></span><br></pre></td></tr></table></figure><h2 id="一个简单的窗口程序"><a href="#一个简单的窗口程序" class="headerlink" title="一个简单的窗口程序"></a>一个简单的窗口程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个顶层容器（窗口）</span></span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);        </span><br><span class="line">        jf.setSize(<span class="number">700</span>, <span class="number">500</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);  <span class="comment">// 把窗口位置设置到屏幕中心</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); </span><br><span class="line">        <span class="comment">// 当点击窗口的关闭按钮时退出程序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建中间容器（面板容器）</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个基本组件（按钮），并添加到 面板容器 中</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把面板容器作为窗口的内容面板 设置到 窗口</span></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示窗口</span></span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaSwing-面板组件"><a href="#JavaSwing-面板组件" class="headerlink" title="JavaSwing 面板组件"></a>JavaSwing 面板组件</h1><h2 id="JPanel（面板）"><a href="#JPanel（面板）" class="headerlink" title="JPanel（面板）"></a>JPanel（面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JPanel.html">javax.swing.JPanel</a></p><p>JPanel 常用构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建默认使用流式布局的面板</span></span><br><span class="line">JPanel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建指定布局管理器的面板</span></span><br><span class="line">JPanel(LayoutManager layout)</span><br></pre></td></tr></table></figure><h2 id="JScrollPane（滚动面板）"><a href="#JScrollPane（滚动面板）" class="headerlink" title="JScrollPane（滚动面板）"></a>JScrollPane（滚动面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JScrollPane.html">javax.swing.JScrollPane</a></p><p>JScrollPane 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * view: 需要滚动显示的视图组件</span></span><br><span class="line"><span class="comment"> * vsbPolicy: 垂直滚动条的显示策略</span></span><br><span class="line"><span class="comment"> * hsbPolicy: 水平滚动条的显示策略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JScrollPane()</span><br><span class="line"></span><br><span class="line">JScrollPane(Component view)</span><br><span class="line"></span><br><span class="line">JScrollPane(Component view, <span class="keyword">int</span> vsbPolicy, <span class="keyword">int</span> hsbPolicy)</span><br><span class="line"></span><br><span class="line">JScrollPane(<span class="keyword">int</span> vsbPolicy, <span class="keyword">int</span> hsbPolicy)</span><br></pre></td></tr></table></figure><p>滚动条的显示策略的取值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 垂直滚动条（vsbPolicy）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED    <span class="comment">// 需要时显示（默认）</span></span><br><span class="line">   ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER        <span class="comment">// 从不显示</span></span><br><span class="line">   ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS       <span class="comment">// 总是显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 水平滚动条（hsbPolicy）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED  <span class="comment">// 需要时显示（默认）</span></span><br><span class="line">   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER      <span class="comment">// 从不显示</span></span><br><span class="line">   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS     <span class="comment">// 总是显示</span></span><br></pre></td></tr></table></figure><p>JScrollPane 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置滚动显示视图内容组件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setViewportView</span><span class="params">(Component view)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置垂直滚动条的显示策略</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVerticalScrollBarPolicy</span><span class="params">(<span class="keyword">int</span> policy)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置水平滚动条的显示策略</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalScrollBarPolicy</span><span class="params">(<span class="keyword">int</span> policy)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 是否响应鼠标滚动事件，默认响应</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWheelScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> handleWheel)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域组件</span></span><br><span class="line">        JTextArea textArea = <span class="keyword">new</span> JTextArea();</span><br><span class="line">        textArea.setLineWrap(<span class="keyword">true</span>);                         <span class="comment">// 自动换行</span></span><br><span class="line">        textArea.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">18</span>));   <span class="comment">// 设置字体</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建滚动面板, 指定滚动显示的视图组件(textArea), 垂直滚动条一直显示, 水平滚动条从不显示</span></span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(</span><br><span class="line">                textArea,</span><br><span class="line">                ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,</span><br><span class="line">                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(scrollPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\10.png" alt="10"></p><h2 id="JSplitPane（分隔面板）"><a href="#JSplitPane（分隔面板）" class="headerlink" title="JSplitPane（分隔面板）"></a>JSplitPane（分隔面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JSplitPane.html">javax.swing.JSplitPane</a></p><p>JSplitPane 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * orientation: 分隔的方向，取值 JSplitPane.HORIZONTAL_SPLIT（水平左右分隔） </span></span><br><span class="line"><span class="comment"> * 或 JSplitPane.VERTICAL_SPLIT（垂直上下分隔），默认水平左右分隔。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * continuousLayout: 拖动分隔条时，是否连续重绘组件，如果为flase，则拖动分隔条停止后才重绘组件。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * leftComponent: 左边/上面 显示的组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * rightComponent: 右边/下面 显示的组件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JSplitPane()</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation)</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation, <span class="keyword">boolean</span> continuousLayout)</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation, <span class="keyword">boolean</span> continuousLayout, Component leftComponent, Component rightComponent)</span><br><span class="line"></span><br><span class="line">JSplitPane(<span class="keyword">int</span> orientation, Component leftComponent, Component rightComponent)</span><br></pre></td></tr></table></figure><p>JSplitPane 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置分隔的方向，水平(左右) 或 垂直(上下) 分隔</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 左边/上面 显示的组件（下面两个方法完全一致）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLeftComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTopComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 左边/下面 显示的组件（下面两个方法完全一致）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setRightComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBottomComponent</span><span class="params">(Component comp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 拖动分隔条 时是否 连续重绘 组件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContinuousLayout</span><span class="params">(<span class="keyword">boolean</span> continuousLayout)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 分隔条上是否显示快速 折叠/展开 两边组件的小按钮</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOneTouchExpandable</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置分隔条的大小（宽度）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDividerSize</span><span class="params">(<span class="keyword">int</span> newSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置分隔条的位置，相对于 左边/顶部 的像素长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDividerLocation</span><span class="params">(<span class="keyword">int</span> location)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置分隔条的位置，相对于 宽度/高度 的比例 [0.0 ~ 1.0]（该方法必须要先确保 JSplitPane 已经有宽高值，否则无效）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDividerLocation</span><span class="params">(<span class="keyword">double</span> proportionalLocation)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建分隔面板</span></span><br><span class="line">        JSplitPane splitPane = <span class="keyword">new</span> JSplitPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置左右两边显示的组件</span></span><br><span class="line">        splitPane.setLeftComponent(<span class="keyword">new</span> JButton(<span class="string">&quot;左边按钮&quot;</span>));</span><br><span class="line">        splitPane.setRightComponent(<span class="keyword">new</span> JButton(<span class="string">&quot;右边按钮&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分隔条上显示快速 折叠/展开 两边组件的小按钮</span></span><br><span class="line">        splitPane.setOneTouchExpandable(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拖动分隔条时连续重绘组件</span></span><br><span class="line">        splitPane.setContinuousLayout(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置分隔条的初始位置</span></span><br><span class="line">        splitPane.setDividerLocation(<span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把分隔面板作为内容面板添加到窗口并显示</span></span><br><span class="line">        jf.setContentPane(splitPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\11.png" alt="11"></p><h2 id="JTabbedPane（选项卡面板）"><a href="#JTabbedPane（选项卡面板）" class="headerlink" title="JTabbedPane（选项卡面板）"></a>JTabbedPane（选项卡面板）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JTabbedPane.html">javax.swing.JTabbedPane</a></p><p>常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参事说明:</span></span><br><span class="line"><span class="comment"> * tabPlacement: 选项卡标题的位置, 值为 JTabbedPane.TOP、JTabbedPane.BOTTOM、</span></span><br><span class="line"><span class="comment"> * JTabbedPane.LEFT 或 JTabbedPane.RIGHT, 默认为 TOP</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment"> * tabLayoutPolicy: 选项卡位置不能放入所有的选项卡时，放置选项卡的策略，</span></span><br><span class="line"><span class="comment"> * 值为 JTabbedPane.WRAP_TAB_LAYOUT 或 JTabbedPane.SCROLL_TAB_LAYOUT</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JTabbedPane()</span><br><span class="line"></span><br><span class="line">JTabbedPane(<span class="keyword">int</span> tabPlacement)</span><br><span class="line"></span><br><span class="line">JTabbedPane(<span class="keyword">int</span> tabPlacement, <span class="keyword">int</span> tabLayoutPolicy)</span><br></pre></td></tr></table></figure><p>创建选项卡:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * title: 选项卡的标题</span></span><br><span class="line"><span class="comment"> * icon: 选项卡的图标</span></span><br><span class="line"><span class="comment"> * tip: 当鼠标移到该选项卡时，悬浮提示的文本</span></span><br><span class="line"><span class="comment"> * component: 选中该选项卡时显示的内容组件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTab</span><span class="params">(String title, Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTab</span><span class="params">(String title, Icon icon, Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTab</span><span class="params">(String title, Icon icon, Component component, String tip)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"></span></span></span><br><span class="line"><span class="comment"><span class="function"> * 在指定索引位置插入一个选项卡</span></span></span><br><span class="line"><span class="comment"><span class="function">   */</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertTab</span><span class="params">(String title, Icon icon, Component component, String tip, <span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure><p>移除选项卡:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除指定位置的选项（下面两个方法完全一致）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeTabAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 移除指定内容控件的选项卡</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 移除所有选项卡</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeAll</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>选项卡相关操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置当前选中的选项卡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的选项卡索引</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSelectedIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的选项卡对应的内容组件</span></span></span><br><span class="line"><span class="function">Component <span class="title">getSelectedComponent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 index 位置的选项卡的标题</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTitleAt</span><span class="params">(<span class="keyword">int</span> index, String title)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 index 位置的选项卡的图标</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconAt</span><span class="params">(<span class="keyword">int</span> index, Icon icon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 index 位置的选项卡是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabledAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">boolean</span> enabled)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 将 index 位置的内容组件设置为 component</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setComponentAt</span><span class="params">(<span class="keyword">int</span> index, Component component)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取选项卡的数量</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTabCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"></span></span></span><br><span class="line"><span class="comment"><span class="function"> * 自定义选项卡标题位置的组件, 这里的 titleComponent 将放到选项卡标题位置。</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 应用场景: 例如, 在选项卡标题位置添加一个关闭按钮, 点击按钮移除选项卡。</span></span></span><br><span class="line"><span class="comment"><span class="function">   */</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTabComponentAt</span><span class="params">(<span class="keyword">int</span> index, Component titleComponent)</span></span></span><br></pre></td></tr></table></figure><p>状态监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加选项卡选中状态改变的监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建选项卡面板</span></span><br><span class="line">        <span class="keyword">final</span> JTabbedPane tabbedPane = <span class="keyword">new</span> JTabbedPane();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第1个选项卡（选项卡只包含 标题）</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;Tab01&quot;</span>, createTextPanel(<span class="string">&quot;TAB 01&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第2个选项卡（选项卡包含 标题 和 图标）</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;Tab02&quot;</span>, createTextPanel(<span class="string">&quot;TAB 02&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建第3个选项卡（选项卡包含 标题、图标 和 tip提示）</span></span><br><span class="line">        tabbedPane.addTab(<span class="string">&quot;Tab03&quot;</span>, createTextPanel(<span class="string">&quot;TAB 03&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加选项卡选中状态改变的监听器</span></span><br><span class="line">        tabbedPane.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前选中的选项卡: &quot;</span> + tabbedPane.getSelectedIndex());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认选中的选项卡</span></span><br><span class="line">        tabbedPane.setSelectedIndex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(tabbedPane);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个面板，面板中心显示一个标签，用于表示某个选项卡需要显示的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JComponent <span class="title">createTextPanel</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建面板, 使用一个 1 行 1 列的网格布局（为了让标签的宽高自动撑满面板）</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建标签</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(text);</span><br><span class="line">        label.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">50</span>));</span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加标签到面板</span></span><br><span class="line">        panel.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> panel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\12.png" alt="12"></p><h1 id="JavaSwing-基本组件"><a href="#JavaSwing-基本组件" class="headerlink" title="JavaSwing 基本组件"></a>JavaSwing 基本组件</h1><h2 id="JLabel（标签）"><a href="#JLabel（标签）" class="headerlink" title="JLabel（标签）"></a>JLabel（标签）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JLabel.html">javax.swing.JLabel</a></p><p><code>JLabel</code>，标签。标签主要用于展示 <strong>文本</strong> 或 <strong>图片</strong>，也可以 <strong>同时显示文本和图片</strong>。</p><p>JLabel 的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 构造方法中的参数含义:</span></span><br><span class="line"><span class="comment"> *     text: 标签显示的 文本</span></span><br><span class="line"><span class="comment"> *     image: 标签显示的 图片</span></span><br><span class="line"><span class="comment"> *     horizontalAlignment: 标签内容（在标签内）的水平对其方式（竖直方向默认居中, 可通过方法设置）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JLabel()</span><br><span class="line"></span><br><span class="line">JLabel(String text)</span><br><span class="line"></span><br><span class="line">JLabel(String text, <span class="keyword">int</span> horizontalAlignment)</span><br><span class="line"></span><br><span class="line">JLabel(Icon image) </span><br><span class="line"></span><br><span class="line">JLabel(Icon image, <span class="keyword">int</span> horizontalAlignment) </span><br><span class="line"></span><br><span class="line">JLabel(String text, Icon image, <span class="keyword">int</span> horizontalAlignment) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JLabel 的常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 文本 和 图片</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon icon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本相对于图片的位置（文本默认在图片右边垂直居中）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalTextPosition</span><span class="params">(<span class="keyword">int</span> textPosition)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVerticalTextPosition</span><span class="params">(<span class="keyword">int</span> textPosition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置标签内容（在标签内）的对其方式（默认左对齐并垂直居中）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVerticalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本之间的间隙</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="function"> * 下面的方法定义在 JComponent 基类中</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本的字体类型、样式 和 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置字体颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当鼠标移动到组件上时显示的提示文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setToolTipText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的背景</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(Color bg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可见</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setVisible</span><span class="params">(<span class="keyword">boolean</span> visible)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否为 不透明，JLabel默认为透明，设置为不透明后才能显示背景</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOpaque</span><span class="params">(<span class="keyword">boolean</span> isOpaque)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的 首选 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPreferredSize</span><span class="params">(Dimension preferredSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的 最小 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMinimumSize</span><span class="params">(Dimension minimumSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件的 最大 大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaximumSize</span><span class="params">(Dimension maximumSize)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 上面的对齐参数具体的取值常量参考 DocsApi；</span></span></span><br><span class="line"><span class="comment"><span class="function"> * setXXX(...) 方法往往都对应着 getXXX() 方法。</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br></pre></td></tr></table></figure><p>ImageIcon 的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 本地路径 图片创建 ImageIcon</span></span><br><span class="line">ImageIcon(String filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 网络路径 图片创建 ImageIcon</span></span><br><span class="line">ImageIcon(URL location)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用图片文件的字节数组创建 ImageIcon</span></span><br><span class="line">ImageIcon(<span class="keyword">byte</span>[] imageData)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 java.awt.Image 实例创建 ImageIcon</span></span><br><span class="line">ImageIcon(java.awt.Image image)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">700</span>, <span class="number">600</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);  <span class="comment">// 把窗口位置设置到屏幕中心</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建内容面板，默认使用流式布局</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 只显示文本</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JLabel label0 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label0.setLocation(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        label0.setSize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        label0.setText(<span class="string">&quot;Only Text&quot;</span>);</span><br><span class="line">        label0.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, Font.PLAIN, <span class="number">20</span>));  <span class="comment">// 设置字体，null 表示使用默认字体</span></span><br><span class="line">        panel.add(label0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 只显示图片</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JLabel label1 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label1.setLocation(<span class="number">0</span>,<span class="number">150</span>);</span><br><span class="line">        label1.setSize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        label1.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/test.gif&quot;</span>));</span><br><span class="line">        panel.add(label1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 同时显示文本和图片</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JLabel label2 = <span class="keyword">new</span> JLabel();</span><br><span class="line">        label2.setLocation(<span class="number">100</span>,<span class="number">300</span>);</span><br><span class="line">        label2.setSize(<span class="number">500</span>,<span class="number">200</span>);</span><br><span class="line">        label2.setText(<span class="string">&quot;文本和图片&quot;</span>);</span><br><span class="line">        label2.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>,Font.PLAIN,<span class="number">20</span>));</span><br><span class="line">        label2.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/test.gif&quot;</span>));</span><br><span class="line">        label2.setHorizontalTextPosition(SwingConstants.CENTER);   <span class="comment">// 水平方向文本在图片中心</span></span><br><span class="line">        label2.setVerticalTextPosition(SwingConstants.BOTTOM);     <span class="comment">// 垂直方向文本在图片下方</span></span><br><span class="line">        panel.add(label2);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\0.png" alt="0"></p><h2 id="JButton（按钮）"><a href="#JButton（按钮）" class="headerlink" title="JButton（按钮）"></a>JButton（按钮）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JButton.html">javax.swing.JButton</a></p><p>JButton 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建不带有设置文本或图标的按钮</span></span><br><span class="line">JButton()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个带文本的按钮</span></span><br><span class="line">JButton(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个带图标的按钮</span></span><br><span class="line">JButton(Icon icon)</span><br></pre></td></tr></table></figure><p>JButton 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置按钮的 文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置按钮是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置按钮在 默认、按下、不可用 时显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPressedIcon</span><span class="params">(Icon pressedIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledIcon</span><span class="params">(Icon disabledIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 是否绘制边框（设置不绘制边框，再结合上面三个设置按钮状态图片的方法，可实现自定义按钮）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBorderPainted</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>JButton 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加和移除按钮的点击事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActionListener</span><span class="params">(ActionListener listener)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeActionListener</span><span class="params">(ActionListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：简单按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮</span></span><br><span class="line">        <span class="keyword">final</span> JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;测试按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加按钮的点击事件监听器</span></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取到的事件源就是按钮本身</span></span><br><span class="line">                <span class="comment">// JButton btn = (JButton) e.getSource();</span></span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">&quot;按钮被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\1.png" alt="1"></p><p>代码实例: 自定义图片按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">700</span>, <span class="number">500</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> JButton btn = <span class="keyword">new</span> JButton();</span><br><span class="line">        btn.setBounds(<span class="number">100</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置按钮的默认图片</span></span><br><span class="line">        btn.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/button.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置按钮被点击时的图片</span></span><br><span class="line">        btn.setPressedIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;src/image/press.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不绘制边框</span></span><br><span class="line">        btn.setBorderPainted(<span class="keyword">false</span>);</span><br><span class="line">        btn.setContentAreaFilled(<span class="keyword">false</span>);    <span class="comment">//不绘制默认按钮背景</span></span><br><span class="line">        btn.setFocusPainted(<span class="keyword">false</span>);           <span class="comment">//不绘制图片或文字周围的焦点虚框</span></span><br><span class="line">        <span class="comment">// 添加按钮点击事件监听器</span></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JRadioButton（单选按钮）"><a href="#JRadioButton（单选按钮）" class="headerlink" title="JRadioButton（单选按钮）"></a>JRadioButton（单选按钮）</h2><p>官方 JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButton.html">javax.swing.JRadioButton</a></p><p>JButton 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无文本，未选中</span></span><br><span class="line">JRadioButton()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，未选中</span></span><br><span class="line">JRadioButton(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，并指定是否选中</span></span><br><span class="line">JRadioButton(String text, <span class="keyword">boolean</span> selected)</span><br></pre></td></tr></table></figure><p>JRadioButton 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置单选按钮的 文本、字体 和字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置单选按钮是否选中状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断单选按钮是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置单选按钮是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置单选按钮在 默认、被选中、不可用时显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPressedIcon</span><span class="params">(Icon pressedIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledIcon</span><span class="params">(Icon disabledIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本的间距</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br></pre></td></tr></table></figure><p>JRadioButton 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加状态改变监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>ButtonGroup（按钮组）: 当有多个单选按钮时，一般只允许一个单选按钮选中，因此需要对同一类型的单选按钮进行分组，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个按钮组</span></span><br><span class="line">ButtonGroup btnGroup = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加单选按钮到按钮组</span></span><br><span class="line">btnGroup.add(radioBtn01);</span><br><span class="line">btnGroup.add(radioBtn02);</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个单选按钮</span></span><br><span class="line">        JRadioButton radioBtn01 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        JRadioButton radioBtn02 = <span class="keyword">new</span> JRadioButton(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建按钮组，把两个单选按钮添加到该组</span></span><br><span class="line">        ButtonGroup btnGroup = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        btnGroup.add(radioBtn01);</span><br><span class="line">        btnGroup.add(radioBtn02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认第一个单选按钮选中</span></span><br><span class="line">        radioBtn01.setSelected(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        panel.add(radioBtn01);</span><br><span class="line">        panel.add(radioBtn02);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\2.png" alt="2"></p><h2 id="JCheckBox（复选框）"><a href="#JCheckBox（复选框）" class="headerlink" title="JCheckBox（复选框）"></a>JCheckBox（复选框）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBox.html">javax.swing.JCheckBox</a></p><p>JCheckBox 常用构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无文本，默认未选中</span></span><br><span class="line">JCheckBox()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，默认未选中</span></span><br><span class="line">JCheckBox(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，并指定是否选中</span></span><br><span class="line">JCheckBox(String text, <span class="keyword">boolean</span> selected)</span><br></pre></td></tr></table></figure><p>JCheckBox 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置复选框的 文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置复选框是否选中状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断复选框是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置复选框是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本的间距</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br></pre></td></tr></table></figure><p>JCheckBox 常用监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加状态改变监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建复选框</span></span><br><span class="line">        JCheckBox checkBox01 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;菠萝&quot;</span>);</span><br><span class="line">        JCheckBox checkBox02 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">        JCheckBox checkBox03 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;雪梨&quot;</span>);</span><br><span class="line">        JCheckBox checkBox04 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;荔枝&quot;</span>);</span><br><span class="line">        JCheckBox checkBox05 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line">        JCheckBox checkBox06 = <span class="keyword">new</span> JCheckBox(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加第一个复选框的状态被改变的监听（其他复选框如果需要监听状态改变，则可按此方法添加监听）</span></span><br><span class="line">        checkBox01.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取事件源（即复选框本身）</span></span><br><span class="line">                JCheckBox checkBox = (JCheckBox) e.getSource();</span><br><span class="line">                System.out.println(checkBox.getText() + <span class="string">&quot; 是否选中: &quot;</span> + checkBox.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认第一个复选框选中</span></span><br><span class="line">        checkBox01.setSelected(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        panel.add(checkBox01);</span><br><span class="line">        panel.add(checkBox02);</span><br><span class="line">        panel.add(checkBox03);</span><br><span class="line">        panel.add(checkBox04);</span><br><span class="line">        panel.add(checkBox05);</span><br><span class="line">        panel.add(checkBox06);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\3.png" alt="3"></p><h2 id="JToggleButton（开关按钮）"><a href="#JToggleButton（开关按钮）" class="headerlink" title="JToggleButton（开关按钮）"></a>JToggleButton（开关按钮）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JToggleButton.html">javax.swing.JToggleButton</a></p><p>JToggleButton 是 JRadioButton, JCheckBox 的父类，主要实现一个按钮的两种状态（选中 和 未选中）来实现开关切换的效果。</p><p>JToggleButton 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无文本，默认未选中</span></span><br><span class="line">JToggleButton()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，默认未选中</span></span><br><span class="line">JToggleButton(String text)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有文本，并指定是否选中</span></span><br><span class="line">JToggleButton(String text, <span class="keyword">boolean</span> selected)</span><br></pre></td></tr></table></figure><p>JToggleButton 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置开关按钮的 文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 以下方法定义在 javax.swing.AbstractButton 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置开关按钮是否选中状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断开关按钮是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置开关按钮是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置开关按钮在 默认(关)、被选中(开)、不可用 时显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPressedIcon</span><span class="params">(Icon pressedIcon)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledIcon</span><span class="params">(Icon disabledIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置图片和文本之间的间距</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIconTextGap</span><span class="params">(<span class="keyword">int</span> iconTextGap)</span></span></span><br></pre></td></tr></table></figure><p>JToggleButton 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加状态改变监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：默认的开关按钮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建开关按钮</span></span><br><span class="line">        JToggleButton toggleBtn = <span class="keyword">new</span> JToggleButton(<span class="string">&quot;开关按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 toggleBtn 的状态被改变的监听</span></span><br><span class="line">        toggleBtn.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取事件源（即开关按钮本身）</span></span><br><span class="line">                JToggleButton toggleBtn = (JToggleButton) e.getSource();</span><br><span class="line">                System.out.println(toggleBtn.getText() + <span class="string">&quot; 是否选中: &quot;</span> + toggleBtn.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(toggleBtn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\4.png" alt="4"></p><p>代码实例：自定义图片开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建开关按钮</span></span><br><span class="line">        JToggleButton toggleBtn = <span class="keyword">new</span> JToggleButton();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先设置不绘制按钮边框</span></span><br><span class="line">        toggleBtn.setBorderPainted(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 选中(开) 和 未选中(关) 时显示的图片</span></span><br><span class="line">        toggleBtn.setSelectedIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;toggle_on.png&quot;</span>));</span><br><span class="line">        toggleBtn.setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">&quot;toggle_off.png&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 toggleBtn 的状态被改变的监听</span></span><br><span class="line">        toggleBtn.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 获取事件源（即开关按钮本身）</span></span><br><span class="line">                JToggleButton toggleBtn = (JToggleButton) e.getSource();</span><br><span class="line">                System.out.println(toggleBtn.getText() + <span class="string">&quot; 是否选中: &quot;</span> + toggleBtn.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        panel.add(toggleBtn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JTextField（文本框）"><a href="#JTextField（文本框）" class="headerlink" title="JTextField（文本框）"></a>JTextField（文本框）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JTextField.html">javax.swing.JTextField</a></p><p>JTextField 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 默认显示的文本</span></span><br><span class="line"><span class="comment"> * columns: 用来计算首选宽度的列数；如果列设置为 0，则首选宽度将是组件实现的自然结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JTextField()</span><br><span class="line"></span><br><span class="line">JTextField(String text)</span><br><span class="line"></span><br><span class="line">JTextField(<span class="keyword">int</span> columns)</span><br><span class="line"></span><br><span class="line">JTextField(String text, <span class="keyword">int</span> columns)</span><br></pre></td></tr></table></figure><p>JTextField 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文本框中的文本</span></span><br><span class="line"><span class="function">String <span class="title">getText</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框的 文本、字体 和 字体颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置颜色，分别为: 光标颜色、呈现选中部分的背景颜色、选中部分文本的颜色、不可用时文本的颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCaretColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本内容的水平对齐方式</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框是否可编辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 下面方法定义在 java.awt.Component 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断组件当前是否拥有焦点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFocusOwner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br></pre></td></tr></table></figure><p>JTextField 复制粘贴相关方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置光标开始位置，selectionStart &gt;= 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionStart</span><span class="params">(<span class="keyword">int</span> selectionStart)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置光标结束位置，selectionEnd &gt;= selectionStart</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionEnd</span><span class="params">(<span class="keyword">int</span> selectionEnd)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 复制选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 剪切选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 粘贴文本到文本框</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paste</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>JTextField 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加焦点事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFocusListener</span><span class="params">(FocusListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加文本框内的 文本改变 监听器</span></span></span><br><span class="line"><span class="function">textField.<span class="title">getDocument</span><span class="params">()</span>.<span class="title">addDocumentListener</span><span class="params">(DocumentListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加按键监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addKeyListener</span><span class="params">(KeyListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本框，指定可见列数为8列</span></span><br><span class="line">        <span class="keyword">final</span> JTextField textField = <span class="keyword">new</span> JTextField(<span class="number">8</span>);</span><br><span class="line">        textField.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        panel.add(textField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮，点击后获取文本框中的文本</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        btn.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;提交: &quot;</span> + textField.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\5.png" alt="5"></p><h2 id="JPasswordField（密码框）"><a href="#JPasswordField（密码框）" class="headerlink" title="JPasswordField（密码框）"></a>JPasswordField（密码框）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JPasswordField.html">javax.swing.JPasswordField</a></p><p>JPasswordField 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 默认显示的文本</span></span><br><span class="line"><span class="comment"> * columns: 用来计算首选宽度的列数；如果列设置为 0，则首选宽度将是组件实现的自然结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JPasswordField()</span><br><span class="line"></span><br><span class="line">JPasswordField(String text)</span><br><span class="line"></span><br><span class="line">JPasswordField(<span class="keyword">int</span> columns)</span><br><span class="line"></span><br><span class="line">JPasswordField(String text, <span class="keyword">int</span> columns)</span><br></pre></td></tr></table></figure><p>JPasswordField 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取密码框输入的密码</span></span><br><span class="line"><span class="keyword">char</span>[] getPassword()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置密码框的 密码文本、字体 和 字体颜色</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置密码框输入内容的水平对齐方式</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHorizontalAlignment</span><span class="params">(<span class="keyword">int</span> alignment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置密码框默认显示的密码字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEchoChar</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置密码框是否可编辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 下面方法定义在 java.awt.Component 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断组件当前是否拥有焦点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFocusOwner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br></pre></td></tr></table></figure><p>JPasswordField 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加焦点事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFocusListener</span><span class="params">(FocusListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加文本框内的文本改变监听器</span></span></span><br><span class="line"><span class="function">textField.<span class="title">getDocument</span><span class="params">()</span>.<span class="title">addDocumentListener</span><span class="params">(DocumentListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加按键监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addKeyListener</span><span class="params">(KeyListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AWTException </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建密码框，指定可见列数为10列</span></span><br><span class="line">        <span class="keyword">final</span> JPasswordField passwordField = <span class="keyword">new</span> JPasswordField(<span class="number">10</span>);</span><br><span class="line">        panel.add(passwordField);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮，点击后获取密码框中输入的密码</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;提交，密码为: &quot;</span> + <span class="keyword">new</span> String(passwordField.getPassword()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\6.png" alt="6"></p><h2 id="JTextArea（文本区域）"><a href="#JTextArea（文本区域）" class="headerlink" title="JTextArea（文本区域）"></a>JTextArea（文本区域）</h2><p>官方JavaDocsApi： <a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JTextArea.html">javax.swing.JTextArea</a></p><p>JTextArea 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 默认显示的文本</span></span><br><span class="line"><span class="comment"> * rows: 默认可见的行数</span></span><br><span class="line"><span class="comment"> * columns: 默认可见的列数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 默认由 rows 和 columns 决定首选大小</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   JTextArea()</span><br><span class="line"></span><br><span class="line">JTextArea(String text)</span><br><span class="line"></span><br><span class="line">JTextArea(<span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span><br><span class="line"></span><br><span class="line">JTextArea(String text, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns)</span><br></pre></td></tr></table></figure><p>JTextArea 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否自动换行，默认为 false</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLineWrap</span><span class="params">(<span class="keyword">boolean</span> wrap)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置自动换行方式。如果为 true，则将在单词边界（空白）处换行; 如果为 false，则将在字符边界处换行。默认为 false。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setWrapStyleWord</span><span class="params">(<span class="keyword">boolean</span> word)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取文本框中的文本</span></span></span><br><span class="line"><span class="function">String <span class="title">getText</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 追加文本到文档末尾</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 替换部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceRange</span><span class="params">(String str, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框的 文本、字体 和 字体颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Color fg)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取内容的行数（以换行符计算，满行自动换下一行不算增加行数）</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取指定行（行数从0开始）的行尾（包括换行符）在全文中的偏移量</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineEndOffset</span><span class="params">(<span class="keyword">int</span> line)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取指定偏移量所在的行数（行数从0开始）</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineOfOffset</span><span class="params">(<span class="keyword">int</span> offset)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置颜色，分别为: 光标颜色、呈现选中部分的背景颜色、选中部分文本的颜色、不可用时文本的颜色</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCaretColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDisabledTextColor</span><span class="params">(Color c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文本框是否可编辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/* 下面方法定义在 java.awt.Component 基类中 */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断组件当前是否拥有焦点</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFocusOwner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置组件是否可用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br></pre></td></tr></table></figure><p>JTextArea 复制粘贴相关方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置光标开始位置，selectionStart &gt;= 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionStart</span><span class="params">(<span class="keyword">int</span> selectionStart)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置光标结束位置，selectionEnd &gt;= selectionStart</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectionEnd</span><span class="params">(<span class="keyword">int</span> selectionEnd)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 复制选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 剪切选中部分文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 粘贴文本到文本框</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">paste</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>JTextArea 常用监听器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加焦点事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFocusListener</span><span class="params">(FocusListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加文本框内的 文本改变 监听器</span></span></span><br><span class="line"><span class="function">textField.<span class="title">getDocument</span><span class="params">()</span>.<span class="title">addDocumentListener</span><span class="params">(DocumentListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加按键监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addKeyListener</span><span class="params">(KeyListener listener)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 5 行 10 列的文本区域</span></span><br><span class="line">        <span class="keyword">final</span> JTextArea textArea = <span class="keyword">new</span> JTextArea(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 设置自动换行</span></span><br><span class="line">        textArea.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 添加到内容面板</span></span><br><span class="line">        panel.add(textArea);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个提交按钮，点击按钮获取输入文本</span></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;提交: &quot;</span> + textArea.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\7.png" alt="7"></p><h2 id="JComboBox（下拉列表框）"><a href="#JComboBox（下拉列表框）" class="headerlink" title="JComboBox（下拉列表框）"></a>JComboBox（下拉列表框）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html">javax.swing.JComboBox</a></p><p>JComboBox 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个 JComboBox 实例维护这一个 ComboBoxModel 实例。</span></span><br><span class="line"><span class="comment"> * ComboBoxModel 实例可以直接创建，也可以通过把 数组 或 集合 传递到 JComboBox 中间接创建。</span></span><br><span class="line"><span class="comment"> * JComboBox 内部创建的 ComboBoxModel 实例是 DefaultComboBoxModel。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   JComboBox()</span><br><span class="line"></span><br><span class="line">JComboBox(ComboBoxModel model)</span><br><span class="line"></span><br><span class="line">JComboBox(Object[] items)</span><br><span class="line"></span><br><span class="line">JComboBox(Vector&lt;?&gt; items)</span><br></pre></td></tr></table></figure><p>JComboBox 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置选中的索引</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的索引</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSelectedIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前选中的数据项</span></span></span><br><span class="line"><span class="function">Object <span class="title">getSelectedItem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置选项数据模型</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setModel</span><span class="params">(ComboBoxModel&lt;?&gt; model)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取维护选项数据的 ComboBoxModel。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 再通过 model.getElementAt(int index) 和 model.getSize() </span></span></span><br><span class="line"><span class="function"><span class="comment">// 可分别 获取指定索引的选项数据 和 选项数量。</span></span></span><br><span class="line"><span class="function">ComboBoxModel&lt;?&gt; <span class="title">getModel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加选项选中状态改变的监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addItemListener</span><span class="params">(ItemListener listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置下拉列表框是否可编辑，默认不可编辑。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果设置为可编辑，则除了选择指定的选项值外，还允许用户自行输入值（自行输入的值索引为-1）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditable</span><span class="params">(<span class="keyword">boolean</span> flag)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个标签</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">&quot;水果：&quot;</span>);</span><br><span class="line">        panel.add(label);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要选择的条目</span></span><br><span class="line">        String[] listData = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;荔枝&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个下拉列表框</span></span><br><span class="line">        <span class="keyword">final</span> JComboBox&lt;String&gt; comboBox = <span class="keyword">new</span> JComboBox&lt;String&gt;(listData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加条目选中状态改变的监听器</span></span><br><span class="line">        comboBox.addItemListener(<span class="keyword">new</span> ItemListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 只处理选中的状态</span></span><br><span class="line">                <span class="keyword">if</span> (e.getStateChange() == ItemEvent.SELECTED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;选中: &quot;</span> + comboBox.getSelectedIndex() + <span class="string">&quot; = &quot;</span> + comboBox.getSelectedItem());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认选中的条目</span></span><br><span class="line">        comboBox.setSelectedIndex(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加到内容面板</span></span><br><span class="line">        panel.add(comboBox);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\8.png" alt="8"></p><h2 id="JProgressBar（进度条）"><a href="#JProgressBar（进度条）" class="headerlink" title="JProgressBar（进度条）"></a>JProgressBar（进度条）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JProgressBar.html">javax.swing.JProgressBar</a></p><p>JProgressBar 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法中的参数含义:</span></span><br><span class="line"><span class="comment"> * orient: 进度条的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL，默认为水平方向</span></span><br><span class="line"><span class="comment"> * min: 最小进度值</span></span><br><span class="line"><span class="comment"> * max: 最大进度值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">JProgressBar()</span><br><span class="line"></span><br><span class="line">JProgressBar(<span class="keyword">int</span> orient)</span><br><span class="line"></span><br><span class="line">JProgressBar(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span><br><span class="line"></span><br><span class="line">JProgressBar(<span class="keyword">int</span> orient, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span><br></pre></td></tr></table></figure><p>JProgressBar 常用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 最小进度值、最大进度值、当前进度值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMinimum</span><span class="params">(<span class="keyword">int</span> min)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMaximum</span><span class="params">(<span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前进度值</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前进度的百分比</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPercentComplete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 是否绘制百分比文本（进度条中间显示的百分数）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setStringPainted</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置进度条进度是否为不确定模式</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIndeterminate</span><span class="params">(<span class="keyword">boolean</span> newValue)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置进度条的方向，SwingConstants.VERTICAL 或 SwingConstants.HORIZONTAL</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> newOrientation)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加进度条的进度改变监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_PROGRESS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_PROGRESS = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> currentProgress = MIN_PROGRESS;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">250</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个进度条</span></span><br><span class="line">        <span class="keyword">final</span> JProgressBar progressBar = <span class="keyword">new</span> JProgressBar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置进度的最小值 和最大值</span></span><br><span class="line">        progressBar.setMinimum(MIN_PROGRESS);</span><br><span class="line">        progressBar.setMaximum(MAX_PROGRESS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前进度值</span></span><br><span class="line">        progressBar.setValue(currentProgress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制百分比文本（进度条中间显示的百分数）</span></span><br><span class="line">        progressBar.setStringPainted(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加进度改变通知</span></span><br><span class="line">        progressBar.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前进度值: &quot;</span> + progressBar.getValue() + <span class="string">&quot;; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;进度百分比: &quot;</span> + progressBar.getPercentComplete());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加到内容面板</span></span><br><span class="line">        panel.add(progressBar);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟延时操作进度, 每隔 0.5 秒更新进度</span></span><br><span class="line">        <span class="keyword">new</span> Timer(<span class="number">500</span>, <span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                currentProgress++;</span><br><span class="line">                <span class="keyword">if</span> (currentProgress &gt; MAX_PROGRESS) &#123;</span><br><span class="line">                    currentProgress = MIN_PROGRESS;</span><br><span class="line">                &#125;</span><br><span class="line">                progressBar.setValue(currentProgress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\9.png" alt="9"></p><h1 id="JavaSwing-其他组件"><a href="#JavaSwing-其他组件" class="headerlink" title="JavaSwing 其他组件"></a>JavaSwing 其他组件</h1><h2 id="JFileChooser（文件选择器）"><a href="#JFileChooser（文件选择器）" class="headerlink" title="JFileChooser（文件选择器）"></a>JFileChooser（文件选择器）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JFileChooser.html">javax.swing.JFileChooser</a></p><p>JFileChooser 常用构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * currentDirectory: 打开文件选取器时默认显示的文件夹（默认为用户文件夹）</span></span><br><span class="line"><span class="comment"> * currentDirectoryPath: 打开文件选取器时默认显示的文件夹（默认为用户文件夹）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   JFileChooser()</span><br><span class="line"></span><br><span class="line">JFileChooser(File currentDirectory)</span><br><span class="line"></span><br><span class="line">JFileChooser(String currentDirectoryPath)</span><br></pre></td></tr></table></figure><p>JFileChooser 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置默认显示的文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCurrentDirectory</span><span class="params">(File dir)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置文件选择模式, 可选值如下:</span></span></span><br><span class="line"><span class="function"><span class="comment">//     JFileChooser.FILES_ONLY: 只能选文件</span></span></span><br><span class="line"><span class="function"><span class="comment">//     JFileChooser.DIRECTORIES_ONLY: 只能选文件夹</span></span></span><br><span class="line"><span class="function"><span class="comment">//     JFileChooser.FILES_AND_DIRECTORIES: 文件和文件夹都可以选</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFileSelectionMode</span><span class="params">(<span class="keyword">int</span> mode)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置是否允许同时选择多个（默认为不允许）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMultiSelectionEnabled</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加可供用户选择的文件过滤器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChoosableFileFilter</span><span class="params">(FileFilter filter)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置默认使用的文件过滤器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setFileFilter</span><span class="params">(FileFilter filter)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置默认被选中的文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedFile</span><span class="params">(File file)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelectedFiles</span><span class="params">(File[] selectedFiles)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 显示 打开文件 或 保存文件 的对话框（线程将被阻塞, 直到选择框被关闭）。</span></span></span><br><span class="line"><span class="comment"><span class="function"> *</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 参数: </span></span></span><br><span class="line"><span class="comment"><span class="function"> *     parent: 文件选取器对话框的父组件, 对话框将会尽量显示在靠近 parent 的中心; 如果传 null, 则显示在屏幕中心。</span></span></span><br><span class="line"><span class="comment"><span class="function"> * </span></span></span><br><span class="line"><span class="comment"><span class="function"> * 返回值:</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     JFileChooser.CANCEL_OPTION: 点击了取消或关闭</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     JFileChooser.APPROVE_OPTION: 点击了确认或保存</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     JFileChooser.ERROR_OPTION: 出现错误</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showOpenDialog</span><span class="params">(Component parent)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">showSaveDialog</span><span class="params">(Component parent)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获取选择的文件（一般在用户选择完文件点击了确认或保存后通过该方法获取选中的文件）</span></span></span><br><span class="line"><span class="function">File <span class="title">getSelectedFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function">File[] <span class="title">getSelectedFiles</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">400</span>, <span class="number">250</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文本区域, 用于显示相关信息</span></span><br><span class="line">        <span class="keyword">final</span> JTextArea msgTextArea = <span class="keyword">new</span> JTextArea(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">        msgTextArea.setLineWrap(<span class="keyword">true</span>);</span><br><span class="line">        panel.add(msgTextArea);</span><br><span class="line"></span><br><span class="line">        JButton openBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">        openBtn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                showFileOpenDialog(jf, msgTextArea);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(openBtn);</span><br><span class="line"></span><br><span class="line">        JButton saveBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">        saveBtn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                showFileSaveDialog(jf, msgTextArea);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        panel.add(saveBtn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 打开文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFileOpenDialog</span><span class="params">(Component parent, JTextArea msgTextArea)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个默认的文件选取器</span></span><br><span class="line">        JFileChooser fileChooser = <span class="keyword">new</span> JFileChooser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置默认显示的文件夹为当前文件夹</span></span><br><span class="line">        fileChooser.setCurrentDirectory(<span class="keyword">new</span> File(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置文件选择的模式（只选文件、只选文件夹、文件和文件均可选）</span></span><br><span class="line">        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);</span><br><span class="line">        <span class="comment">// 设置是否允许多选</span></span><br><span class="line">        fileChooser.setMultiSelectionEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加可用的文件过滤器（FileNameExtensionFilter 的第一个参数是描述, 后面是需要过滤的文件扩展名 可变参数）</span></span><br><span class="line">        fileChooser.addChoosableFileFilter(<span class="keyword">new</span> FileNameExtensionFilter(<span class="string">&quot;zip(*.zip, *.rar)&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;rar&quot;</span>));</span><br><span class="line">        <span class="comment">// 设置默认使用的文件过滤器</span></span><br><span class="line">        fileChooser.setFileFilter(<span class="keyword">new</span> FileNameExtensionFilter(<span class="string">&quot;image(*.jpg, *.png, *.gif)&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开文件选择框（线程将被阻塞, 直到选择框被关闭）</span></span><br><span class="line">        <span class="keyword">int</span> result = fileChooser.showOpenDialog(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">            <span class="comment">// 如果点击了&quot;确定&quot;, 则获取选择的文件路径</span></span><br><span class="line">            File file = fileChooser.getSelectedFile();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果允许选择多个文件, 则通过下面方法获取选择的所有文件</span></span><br><span class="line">            <span class="comment">// File[] files = fileChooser.getSelectedFiles();</span></span><br><span class="line"></span><br><span class="line">            msgTextArea.append(<span class="string">&quot;打开文件: &quot;</span> + file.getAbsolutePath() + <span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 选择文件保存路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFileSaveDialog</span><span class="params">(Component parent, JTextArea msgTextArea)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个默认的文件选取器</span></span><br><span class="line">        JFileChooser fileChooser = <span class="keyword">new</span> JFileChooser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置打开文件选择框后默认输入的文件名</span></span><br><span class="line">        fileChooser.setSelectedFile(<span class="keyword">new</span> File(<span class="string">&quot;测试文件.zip&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开文件选择框（线程将被阻塞, 直到选择框被关闭）</span></span><br><span class="line">        <span class="keyword">int</span> result = fileChooser.showSaveDialog(parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == JFileChooser.APPROVE_OPTION) &#123;</span><br><span class="line">            <span class="comment">// 如果点击了&quot;保存&quot;, 则获取选择的保存路径</span></span><br><span class="line">            File file = fileChooser.getSelectedFile();</span><br><span class="line">            msgTextArea.append(<span class="string">&quot;保存到文件: &quot;</span> + file.getAbsolutePath() + <span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\13.png" alt="13"></p><h2 id="JDialog、JOptionPane（对话框）"><a href="#JDialog、JOptionPane（对话框）" class="headerlink" title="JDialog、JOptionPane（对话框）"></a>JDialog、JOptionPane（对话框）</h2><p>官方 JavaDocsApi：</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html">javax.swing.JDialog</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html">javax.swing.JOptionPane</a></li></ul><p>JDialog 可以创建自定义有的对话框，或者调用 JOptionPane 中的多个静态方法快速创建各种标准的对话框。</p><p>JOptionPane 是 Java Swing 内部已实现好的，以静态方法的形式提供调用，能够快速方便的弹出要求用户提供值或向其发出通知的标准对话框。</p><p>JOptionPane 提供的<strong>标准对话框</strong>类型分为以下几种:</p><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>showMessageDialog</td><td>消息对话框，向用户展示一个消息，没有返回值。</td></tr><tr><td>showConfirmDialog</td><td>确认对话框，询问一个问题是否执行。</td></tr><tr><td>showInputDialog</td><td>输入对话框，要求用户提供某些输入。</td></tr><tr><td>showOptionDialog</td><td>选项对话框，上述三项的大统一，自定义按钮文本，询问用户需要点击哪个按钮。</td></tr></tbody></table></div><p>上述四个类型的方法（包括其若干重载）的参数遵循一致的模式，下面介绍各<strong>参数</strong>的含义:</p><p>(1) parentComponent：对话框的父级组件，决定对话框显示的位置，对话框的显示会尽量紧靠组件的中心，如果传 null，则显示在屏幕的中心。</p><p>(2) title：对话框标题。</p><p>(3) message：消息内容。</p><p>(4) messageType：消息类型，主要是提供默认的对话框图标。可能的值为：</p><ul><li>JOptionPane.PLAIN_MESSAGE 简单消息（不使用图标）</li><li>JOptionPane.INFORMATION_MESSAGE 信息消息（默认）</li><li>JOptionPane.QUESTION_MESSAGE 问题消息</li><li>JOptionPane.WARNING_MESSAGE 警告消息</li><li>JOptionPane.ERROR_MESSAGE 错误消息</li></ul><p>(5) icon：自定义的对话框图标，如果传 null，则图标类型由 messageType 决定。</p><p>(6) optionType：选项按钮的类型。</p><p>(7) options、initialValue：自定义的选项按钮（如果传 null，则选项按钮由 optionType 决定），以及默认选中的选项按钮。</p><p>(8) selectionValues、initialSelectionValue：提供的输入选项，以及默认选中的选项。</p><p>下面是 JOptionPane 类中各标准对话框的静态方法重载:</p><p>消息对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMessageDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                              String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Icon icon)</span></span></span><br></pre></td></tr></table></figure><p>确认对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">showConfirmDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                             Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                             String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> optionType, </span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                             Icon icon)</span></span></span><br></pre></td></tr></table></figure><p>输入对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">showInputDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                              String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Icon icon, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object[] selectionValues, </span></span></span><br><span class="line"><span class="params"><span class="function">                              Object initialSelectionValue)</span></span></span><br></pre></td></tr></table></figure><p>选项对话框：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">showOptionDialog</span><span class="params">(Component parentComponent, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Object message, </span></span></span><br><span class="line"><span class="params"><span class="function">                            String title, </span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">int</span> optionType, </span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">int</span> messageType, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Icon icon, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Object[] options, </span></span></span><br><span class="line"><span class="params"><span class="function">                            Object initialValue)</span></span></span><br></pre></td></tr></table></figure><p><strong>代码实例：标准对话框</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 消息对话框（信息消息）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn01 = <span class="keyword">new</span> JButton(<span class="string">&quot;showMessageDialog（信息消息）&quot;</span>);</span><br><span class="line">        btn01.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 消息对话框无返回, 仅做通知作用</span></span><br><span class="line">                JOptionPane.showMessageDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;Information Message&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;消息标题&quot;</span>,</span><br><span class="line">                        JOptionPane.INFORMATION_MESSAGE</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 2. 消息对话框（警告消息）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn02 = <span class="keyword">new</span> JButton(<span class="string">&quot;showMessageDialog（警告消息）&quot;</span>);</span><br><span class="line">        btn02.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 消息对话框无返回, 仅做通知作用</span></span><br><span class="line">                JOptionPane.showMessageDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;Warning Message&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;消息标题&quot;</span>,</span><br><span class="line">                        JOptionPane.WARNING_MESSAGE</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 3. 确认对话框</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn03 = <span class="keyword">new</span> JButton(<span class="string">&quot;showConfirmDialog（确认对话框）&quot;</span>);</span><br><span class="line">        btn03.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 返回用户点击的选项, 值为下面三者之一:</span></span><br><span class="line"><span class="comment">                 *     是:   JOptionPane.YES_OPTION</span></span><br><span class="line"><span class="comment">                 *     否:   JOptionPane.NO_OPTION</span></span><br><span class="line"><span class="comment">                 *     取消: JOptionPane.CANCEL_OPTION</span></span><br><span class="line"><span class="comment">                 *     关闭: JOptionPane.CLOSED_OPTION</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">int</span> result = JOptionPane.showConfirmDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;确认删除？&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;提示&quot;</span>,</span><br><span class="line">                        JOptionPane.YES_NO_CANCEL_OPTION</span><br><span class="line">                );</span><br><span class="line">                System.out.println(<span class="string">&quot;选择结果: &quot;</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 4. 输入对话框（文本框输入）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn04 = <span class="keyword">new</span> JButton(<span class="string">&quot;showInputDialog（输入对话框）&quot;</span>);</span><br><span class="line">        btn04.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 显示输入对话框, 返回输入的内容</span></span><br><span class="line">                String inputContent = JOptionPane.showInputDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;输入你的名字:&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;默认内容&quot;</span></span><br><span class="line">                );</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的内容: &quot;</span> + inputContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 5. 输入对话框（下拉框选择）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn05 = <span class="keyword">new</span> JButton(<span class="string">&quot;showInputDialog（下拉框选择）&quot;</span>);</span><br><span class="line">        btn05.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                Object[] selectionValues = <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;苹果&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 显示输入对话框, 返回选择的内容, 点击取消或关闭, 则返回null</span></span><br><span class="line">                Object inputContent = JOptionPane.showInputDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;选择一项: &quot;</span>,</span><br><span class="line">                        <span class="string">&quot;标题&quot;</span>,</span><br><span class="line">                        JOptionPane.PLAIN_MESSAGE,</span><br><span class="line">                        <span class="keyword">null</span>,</span><br><span class="line">                        selectionValues,</span><br><span class="line">                        selectionValues[<span class="number">0</span>]</span><br><span class="line">                );</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的内容: &quot;</span> + inputContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 6. 选项对话框</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JButton btn06 = <span class="keyword">new</span> JButton(<span class="string">&quot;showOptionDialog（选项对话框）&quot;</span>);</span><br><span class="line">        btn06.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 选项按钮</span></span><br><span class="line">                Object[] options = <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;雪梨&quot;</span>, <span class="string">&quot;苹果&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 显示选项对话框, 返回选择的选项索引, 点击关闭按钮返回-1</span></span><br><span class="line">                <span class="keyword">int</span> optionSelected = JOptionPane.showOptionDialog(</span><br><span class="line">                        jf,</span><br><span class="line">                        <span class="string">&quot;请点击一个按钮选择一项&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;对话框标题&quot;</span>,</span><br><span class="line">                        JOptionPane.YES_NO_CANCEL_OPTION,</span><br><span class="line">                        JOptionPane.ERROR_MESSAGE,</span><br><span class="line">                        <span class="keyword">null</span>,</span><br><span class="line">                        options,    <span class="comment">// 如果传null, 则按钮为 optionType 类型所表示的按钮（也就是确认对话框）</span></span><br><span class="line">                        options[<span class="number">0</span>]</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (optionSelected &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;点击的按钮: &quot;</span> + options[optionSelected]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 垂直排列按钮</span></span><br><span class="line">        Box vBox = Box.createVerticalBox();</span><br><span class="line">        vBox.add(btn01);</span><br><span class="line">        vBox.add(btn02);</span><br><span class="line">        vBox.add(btn03);</span><br><span class="line">        vBox.add(btn04);</span><br><span class="line">        vBox.add(btn05);</span><br><span class="line">        vBox.add(btn06);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.add(vBox);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\14.png" alt="14"></p><p><strong>代码实例：自定义对话框</strong></p><p>对话框 JDialog 和 JFrame 都是继承自 java.awt.Window，用法与 JFrame 类似。</p><p>对话框分为 模态 和 非模态:</p><ul><li>模态: 弹出对话框后，对话框的父级窗口不可操作。</li><li>非模态: 弹出对话框后，对话框的父级窗口可以正常操作。</li></ul><p>对话框不能最小化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JButton btn = <span class="keyword">new</span> JButton(<span class="string">&quot;显示自定义对话框&quot;</span>);</span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                showCustomDialog(jf, jf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.add(btn);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示一个自定义的对话框</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> owner 对话框的拥有者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentComponent 对话框的父级组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCustomDialog</span><span class="params">(Frame owner, Component parentComponent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个模态对话框</span></span><br><span class="line">        <span class="keyword">final</span> JDialog dialog = <span class="keyword">new</span> JDialog(owner, <span class="string">&quot;提示&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置对话框的宽高</span></span><br><span class="line">        dialog.setSize(<span class="number">250</span>, <span class="number">150</span>);</span><br><span class="line">        <span class="comment">// 设置对话框大小不可改变</span></span><br><span class="line">        dialog.setResizable(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置对话框相对显示的位置</span></span><br><span class="line">        dialog.setLocationRelativeTo(parentComponent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个标签显示消息内容</span></span><br><span class="line">        JLabel messageLabel = <span class="keyword">new</span> JLabel(<span class="string">&quot;对话框消息内容&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮用于关闭对话框</span></span><br><span class="line">        JButton okBtn = <span class="keyword">new</span> JButton(<span class="string">&quot;确定&quot;</span>);</span><br><span class="line">        okBtn.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 关闭对话框</span></span><br><span class="line">                dialog.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对话框的内容面板, 在面板内可以根据自己的需要添加任何组件并做任意是布局</span></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加组件到面板</span></span><br><span class="line">        panel.add(messageLabel);</span><br><span class="line">        panel.add(okBtn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置对话框的内容面板</span></span><br><span class="line">        dialog.setContentPane(panel);</span><br><span class="line">        <span class="comment">// 显示对话框</span></span><br><span class="line">        dialog.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\15.png" alt="15"></p><h2 id="JMenuBar（菜单栏）"><a href="#JMenuBar（菜单栏）" class="headerlink" title="JMenuBar（菜单栏）"></a>JMenuBar（菜单栏）</h2><p>官方 JavaDocsApi：</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuBar.html">javax.swing.JMenuBar</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html">javax.swing.JMenu</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html">javax.swing.JMenuItem</a>，<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html">javax.swing.JCheckBoxMenuItem</a>，<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html">javax.swing.JRadioButtonMenuItem</a></li></ul><p>JMenuBar 表示一个菜单栏；</p><p>JMenu 表示菜单栏上的一个一级菜单；</p><p>JMenuItem, JCheckBoxMenuItem, JRadioButtonMenuItem 分别表示普通的子菜单、带复选框的子菜单、带单选按钮的子菜单。</p><p>JMenu、JCheckBoxMenuItem、JRadioButtonMenuItem 均继承自 JMenuItem。</p><p>JMenuItem 常用构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明:</span></span><br><span class="line"><span class="comment"> * text: 菜单显示的文本</span></span><br><span class="line"><span class="comment"> * icon: 菜单显示的图标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">JMenuItem()</span><br><span class="line"></span><br><span class="line">JMenuItem(String text)</span><br><span class="line"></span><br><span class="line">JMenuItem(Icon icon)</span><br><span class="line"></span><br><span class="line">JMenuItem(String text, Icon icon)</span><br></pre></td></tr></table></figure><p>JMenuItem 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置菜单显示的文本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置菜单显示的图标</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(Icon defaultIcon)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 设置菜单的键盘助记符</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setMnemonic</span><span class="params">(<span class="keyword">int</span> mnemonic)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置修改键，使用键盘快捷键直接触发菜单项的动作</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAccelerator</span><span class="params">(KeyStroke keyStroke)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function"> * 例如按下 ALT+N 键触发菜单项动作:</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     menuItem.setMnemonic(KeyEvent.VK_N);</span></span></span><br><span class="line"><span class="comment"><span class="function"> *     menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.ALT_MASK));</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加菜单被点击的监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addActionListener</span><span class="params">(ActionListener l)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 绑定菜单项的动作命令名称，如果所有菜单项使用同一个监听器，</span></span></span><br><span class="line"><span class="function"><span class="comment">// 可以再监听器回调时通过命令名称区别是哪个菜单项触发的动作。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setActionCommand</span><span class="params">(String actionCommand)</span></span></span><br></pre></td></tr></table></figure><p>JCheckBoxMenuItem、JRadioButtonMenuItem 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 复选框/单选按钮 是否选中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 判断 复选框/单选按钮 是否选中</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSelected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加 复选框/单选按钮 状态被改变的监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addChangeListener</span><span class="params">(ChangeListener l)</span></span></span><br></pre></td></tr></table></figure><p>JMenu 常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 子菜单 到 JMenu 中</span></span><br><span class="line"><span class="function">JMenuItem <span class="title">add</span><span class="params">(JMenuItem menuItem)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 添加一个子菜单分割线</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addSeparator</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.swing.event.ChangeListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一个菜单栏</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenuBar menuBar = <span class="keyword">new</span> JMenuBar();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建一级菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenu fileMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">        JMenu editMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">        JMenu viewMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;视图&quot;</span>);</span><br><span class="line">        JMenu aboutMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;关于&quot;</span>);</span><br><span class="line">        <span class="comment">// 一级菜单添加到菜单栏</span></span><br><span class="line">        menuBar.add(fileMenu);</span><br><span class="line">        menuBar.add(editMenu);</span><br><span class="line">        menuBar.add(viewMenu);</span><br><span class="line">        menuBar.add(aboutMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建 &quot;文件&quot; 一级菜单的子菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenuItem newMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">        JMenuItem openMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">        JMenuItem exitMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;退出&quot;</span>);</span><br><span class="line">        <span class="comment">// 子菜单添加到一级菜单</span></span><br><span class="line">        fileMenu.add(newMenuItem);</span><br><span class="line">        fileMenu.add(openMenuItem);</span><br><span class="line">        fileMenu.addSeparator();       <span class="comment">// 添加一条分割线</span></span><br><span class="line">        fileMenu.add(exitMenuItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建 &quot;编辑&quot; 一级菜单的子菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JMenuItem copyMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">        JMenuItem pasteMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">        <span class="comment">// 子菜单添加到一级菜单</span></span><br><span class="line">        editMenu.add(copyMenuItem);</span><br><span class="line">        editMenu.add(pasteMenuItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建 &quot;视图&quot; 一级菜单的子菜单</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> JCheckBoxMenuItem checkBoxMenuItem = <span class="keyword">new</span> JCheckBoxMenuItem(<span class="string">&quot;复选框子菜单&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> JRadioButtonMenuItem radioButtonMenuItem01 = <span class="keyword">new</span> JRadioButtonMenuItem(<span class="string">&quot;单选按钮子菜单01&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> JRadioButtonMenuItem radioButtonMenuItem02 = <span class="keyword">new</span> JRadioButtonMenuItem(<span class="string">&quot;单选按钮子菜单02&quot;</span>);</span><br><span class="line">        <span class="comment">// 子菜单添加到一级菜单</span></span><br><span class="line">        viewMenu.add(checkBoxMenuItem);</span><br><span class="line">        viewMenu.addSeparator();                <span class="comment">// 添加一个分割线</span></span><br><span class="line">        viewMenu.add(radioButtonMenuItem01);</span><br><span class="line">        viewMenu.add(radioButtonMenuItem02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其中两个 单选按钮子菜单，要实现单选按钮的效果，需要将它们放到一个按钮组中</span></span><br><span class="line">        ButtonGroup btnGroup = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        btnGroup.add(radioButtonMenuItem01);</span><br><span class="line">        btnGroup.add(radioButtonMenuItem02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认第一个单选按钮子菜单选中</span></span><br><span class="line">        radioButtonMenuItem01.setSelected(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 菜单项的点击/状态改变事件监听，事件监听可以直接设置在具体的子菜单上</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 设置 &quot;新建&quot; 子菜单被点击的监听器</span></span><br><span class="line">        newMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;新建  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置 &quot;打开&quot; 子菜单被点击的监听器</span></span><br><span class="line">        openMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;打开  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置 &quot;退出&quot; 子菜单被点击的监听器</span></span><br><span class="line">        exitMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;退出  被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 复选框子菜单 状态改变 监听器</span></span><br><span class="line">        checkBoxMenuItem.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;复选框是否被选中: &quot;</span> + checkBoxMenuItem.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 单选按钮子菜单 状态改变 监听器</span></span><br><span class="line">        radioButtonMenuItem01.addChangeListener(<span class="keyword">new</span> ChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(ChangeEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;单选按钮01 是否被选中: &quot;</span> + radioButtonMenuItem01.isSelected());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最后 把菜单栏设置到窗口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jf.setJMenuBar(menuBar);</span><br><span class="line"></span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\16.png" alt="16"></p><h2 id="JPopupMenu（弹出菜单）"><a href="#JPopupMenu（弹出菜单）" class="headerlink" title="JPopupMenu（弹出菜单）"></a>JPopupMenu（弹出菜单）</h2><p>官方JavaDocsApi：<a href="https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html">javax.swing.JPopupMenu</a></p><p>弹出菜单是一个可弹出并显示一系列选项的悬浮小窗口。通常通过单击鼠标右键触发弹出显示。</p><p>JPopupMenu 的使用和 JMenuBar 类似。</p><p>代码实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JFrame jf = <span class="keyword">new</span> JFrame(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        jf.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        jf.setLocationRelativeTo(<span class="keyword">null</span>);</span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接在内容面板上添加鼠标监听器</span></span><br><span class="line">        panel.addMouseListener(<span class="keyword">new</span> MouseListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标点击（按下并抬起）</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标按下</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标释放</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是鼠标右键，则显示弹出菜单</span></span><br><span class="line">                <span class="keyword">if</span> (e.isMetaDown()) &#123;</span><br><span class="line">                    showPopupMenu(e.getComponent(), e.getX(), e.getY());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标进入组件区域</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 鼠标离开组件区域</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        jf.setContentPane(panel);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showPopupMenu</span><span class="params">(Component invoker, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 弹出菜单 对象</span></span><br><span class="line">        JPopupMenu popupMenu = <span class="keyword">new</span> JPopupMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 一级菜单</span></span><br><span class="line">        JMenuItem copyMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">        JMenuItem pasteMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">        JMenu editMenu = <span class="keyword">new</span> JMenu(<span class="string">&quot;编辑&quot;</span>);   <span class="comment">// 需要 添加 二级子菜单 的 菜单，使用 JMenu</span></span><br><span class="line">        JMenuItem fileMenu = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 二级菜单</span></span><br><span class="line">        JMenuItem findMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;查找&quot;</span>);</span><br><span class="line">        JMenuItem replaceMenuItem = <span class="keyword">new</span> JMenuItem(<span class="string">&quot;替换&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加 二级菜单 到 &quot;编辑&quot;一级菜单</span></span><br><span class="line">        editMenu.add(findMenuItem);</span><br><span class="line">        editMenu.add(replaceMenuItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 一级菜单 到 弹出菜单</span></span><br><span class="line">        popupMenu.add(copyMenuItem);</span><br><span class="line">        popupMenu.add(pasteMenuItem);</span><br><span class="line">        popupMenu.addSeparator();       <span class="comment">// 添加一条分隔符</span></span><br><span class="line">        popupMenu.add(editMenu);</span><br><span class="line">        popupMenu.add(fileMenu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加菜单项的点击监听器</span></span><br><span class="line">        copyMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;复制 被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        findMenuItem.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;查找 被点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在指定位置显示弹出菜单</span></span><br><span class="line">        popupMenu.show(invoker, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\blog\source\_posts\Java swing\17.png" alt="17"></p><p><strong>参考资料：</strong></p><ul><li><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html">Java swing 官方文档</a></p></li><li><p><a href="http://php-note.com/article/1719.html">Java Swing 图形界面开发 系列教程</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://10185102110.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://10185102110.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>系统测试</title>
    <link href="http://10185102110.github.io/2021/09/28/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2021/09/28/%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-28T08:15:36.000Z</published>
    <updated>2021-11-01T12:47:23.284Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>系统测试是对已经集成好的软件进行彻底的测试，此外还需要检测它与系统中的其他部分能否协调工作，以验证软件系统的正确性和性能等是否满足需求规格说明所指定的要求。</p><p>系统测试通常是消耗测试资源最多的地方。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p><img src="0.png" alt=""></p><h1 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h1><p>系统测试很困难，并且没有一套通用的方法，因此系统测试需要创造性。</p><p>下面是几类常用的系统测试。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>性能测试就是对软件的运行性能指标进行测试，判断系统集成之后在实际的使用环境下能否稳定、可靠地运行。为记录软件的运行性能，经常需要在系统中安装必须的测量仪表或者软件。</p><p>在性能测试中，主要考虑以下两个方面：</p><ul><li><p>时间性能</p><p>时间主要指软件的一个具体事务的响应时间。响应时间的长短并无一个绝对统一的标准。</p></li><li><p>空间性能</p><p>指软件运行时消耗的系统资源，它直接决定了系统的最低配置、推荐配置。</p></li></ul><p>性能测试最终要达到的目标：</p><p>（1）判断被测系统是否满足预期的性能需求；</p><p>（2）判断系统的性能表现。</p><h2 id="强度测试"><a href="#强度测试" class="headerlink" title="强度测试"></a>强度测试</h2><p>也称压力测试、负载测试。强度测试模拟实际情况下软/硬件环境和用户使用过程的系统负荷，长时间或超负荷地运行测试软件来测试系统，以检验系统能力的最高限度，从而了解系统的可靠性、稳定性等。</p><p>例如，将输入的数据值提高一个或几个数量级来测试输入功能的响应等。</p><h2 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h2><p>目的在于检查系统对非法侵入的防范能力，验证安装在系统内的保护机构是否确实能够对系统进行保护。安全性测试设法设计出一些测试用例试图突破系统的安全保密措施。</p><p>理论上只要有足够的时间和资源，没有不可进入的系统，因此系统安全的设计准则是使非法侵入的代价超过被保护信息的价值。</p><p>典型的安全性测试考虑的问题如下：</p><p>（1）系统能否检测到无效参数，并予以合适的处理；</p><p>（2）系统能否检测到无效指令，并进行适当的处理；</p><p>（3）系统能否正确保存系统配置数据，系统发生故障时能否恢复；</p><p>（4）系统能否将配置数据导出，并在其他计算机上进行备份；</p><p>（5）系统能否导入配置数据，并正常使用导入的数据；</p><p>（6）能否不输入密码就登录系统；</p><p>（7）系统对多次无效密码的输入能否进行适当的处理；</p><p>（8）执行严格的安全性功能能否比系统的其他部分具有更高的有效性；</p><p>（9）是否具备防止主要错误或自然意外方面的能力；</p><p>（10）是否具有较高的安全性控制精度，包括错误的数量、频率和严重性。</p><p>（11）系统对各种指令或操作的反应时间如何；</p><p>（12）是否具有较高的吞吐量，吞吐量包括用户和服务请求的峰值与均值。</p><h2 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><p>要对新软件进行兼容性测试，需要知道以下信息：</p><ul><li>软件要求与哪种操作系统、Web 浏览器、应用软件保持兼容，如果要测试的软件是一个平台，那么设计要求哪些应用软件能在它上面运行；</li><li>软件使用哪种数据与其他平台和软件进行交互和共享信息。</li></ul><ol><li><p>向前兼容和向后兼容</p><p>向前兼容指可以使用软件的未来版本；</p><p>向后兼容指可以使用软件的以前版本。</p></li><li><p>不同版本之间的兼容性</p><p>不可能在一个操作系统上测试所有的软件程序，因此决定哪些是必须测试的，决定的原则如下：</p><p>（1）流行程度</p><p>（2）年头：应该选择 3 年以内的程序和版本。</p><p>（3）类型：把软件分为画图、字处理、数据库、通信等类型，每一种类型选择一个软件进行测试。</p><p>（4）生产厂商：根据开发软件的公司来选择软件。</p></li><li><p>标准和规范</p><p>适用于软件平台的表追和规范分为高级标准和低级标准。</p><p>高级标准是产品普遍应遵守的，例如 Microsoft Windows 认证徽标。</p><p>低级标准是对产品开发细节的描述。</p></li><li><p>数据共享兼容性</p><p>针对数据共享进行测试需要考虑以下几个方面：</p><p>（1）文件能够正常地在各种介质中进行保存和读取；</p><p>（2）文件能够正确导入和导出；</p><p>（3）能够支持剪切、复制及粘贴等基本操作；</p><p>（4）支持软件在不同版本间的数据转换。</p></li></ol><h2 id="恢复测试"><a href="#恢复测试" class="headerlink" title="恢复测试"></a>恢复测试</h2><p>目的是检查系统的容错能力，在恢复性测试过程中采用多种人工干预的方式使系统失效，从而检验系统的恢复能力。若系统能够自动从失效中恢复，测试的重点在于对重新初始化、数据恢复、重启等功能的正确性验证；若系统必须经人工干预后才能从失效中恢复，测试重点还包括评估平均恢复时间（Mean Time Between Failures，MTTR）是否在规定的范围内。</p><p>在恢复性测试中主要考虑以下问题：</p><p>（1）是否存在潜在的灾难和已确认的系统失效导致的结果会怎样；</p><p>（2）系统保护和恢复过程是否为错误提供了足够的反应；</p><p>（3）恢复过程是否能够正确工作。</p><h2 id="用户图形界面测试"><a href="#用户图形界面测试" class="headerlink" title="用户图形界面测试"></a>用户图形界面测试</h2><p>优秀用户界面的基本构成标准：</p><p>（1）规范化：典型规范化要求包含第一次打开应用程序时应显示有关系统基本信息的屏幕，各种窗口应该有最小化、恢复和关闭按钮，有约定成俗的正确图标，有正确标题，数据的规范显示等。</p><p>（2）灵活性：主要针对熟练的用户而言，多样化的选择，例如界面皮肤、更换字体等。</p><p>（3）正确性：根据产品说明书对照即可发现问题。</p><p>（4）直观性</p><p>（5）舒适性</p><p>（6）实用性</p><p>（7）一致性：遵循公开的标准和规范。</p><p>（8）帮助：系统应提供详尽、可靠的帮助文档。</p><p>（9）独特性</p><p>（10）多窗口应用与系统资源：尽可能占用最低限度的资源，多窗口要保证用户操作方便。</p><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><p>目标如下：</p><p>（1）安装程序能够正确运行；</p><p>（2）程序安装正确；</p><p>（3）程序安装后能够正确运行；</p><p>（4）完善性安装后程序仍能正确运行。</p><p>安装前测试重点：</p><p>（1）是否需要专业人员安装；</p><p>（2）确认打包程序的特性。</p><p>安装过程中的测试重点：</p><p>（1）安装过程应与安装手册中描述的步骤完全一致；</p><p>（2）安装过程应符合一般的安装流程；</p><p>（3）检验安装过程中的所有默认选项；</p><p>（4）检验安装过程中的所有典型选项；</p><p>（5）应对安装环境进行限制；</p><p>（6）应测试不同的安装组合（包括参数组合、控件执行顺序的组合、产品组件安装顺序的组合等）；</p><p>（7）在安装过程中应有明显、合理的操作提示；</p><p>（8）应验证软件使用许可证号或注册码；</p><p>（9）应能识别大部分硬件。</p><p>对于安装过程中的异常情况，应考虑以下方面：</p><p>（1）应测试安装空间不足的情况；</p><p>（2）测试异常配置或状态（如断电、断网、数据库终止等）；</p><p>（3）安装过程中应允许终止，终止安装后能确保系统恢复原状。</p><p>安装之后的测试重点：</p><p>（1）能否产生正确的目录结构和文件；</p><p>（2）动态库是否正确；</p><p>（3）软件能否正确运行；</p><p>（4）在所有运行环境上验证安装过程；</p><p>（5）安装后系统是否对其他应用程序造成不正常影响；</p><p>（6）Web 服务是否有冲突；</p><p>（7）系统升级后原有应用程序能否正常运行。</p><p>此外还有软件卸载的测试。</p><h2 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h2><p>如果系统需求规格说明书中有可靠性要求，就需要进行可靠性测试。</p><p>通常使用以下指标来度量系统的可靠性：平均无故障时间是否超过规定的时限、因故障停机的时间一年内不应超过多少时间等。</p><h2 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h2><p>配置测试是用各种硬件和软件平台以及不同设置检查软件操作的过程，以保证测试的软件可以使用尽可能多的硬件组合。</p><p>如果没有时间和计划测试所有的配置，就需要把成千上万种可能的配置缩减到可以接受的范围，即测试的目标。在计划配置测试时一般采用的过程如下：</p><p>（1）确定所需的硬件类型；</p><p>（2）确定哪些硬件型号和驱动程序可以使用；</p><p>（3）确定可能的硬件特性、模式和选项；</p><p>（4）将硬件配置缩减到可以控制的范围内；</p><p>（5）明确使用硬件配置的软件特性；</p><p>（6）设计在每种配置中要执行的测试用例；</p><p>（7）反复测试直到满意为止。</p><h2 id="可用性测试"><a href="#可用性测试" class="headerlink" title="可用性测试"></a>可用性测试</h2><ul><li>符合标准和规范</li><li>直观性</li><li>一致性</li><li>灵活性</li><li>舒适性</li><li>正确性</li><li>实用性</li></ul><h2 id="文档资料测试"><a href="#文档资料测试" class="headerlink" title="文档资料测试"></a>文档资料测试</h2><h2 id="网站测试"><a href="#网站测试" class="headerlink" title="网站测试"></a>网站测试</h2><p>一般网络测试包括以下内容：</p><ul><li><p>文字测试</p><p>可以用测试文档的方法进行测试，检查用户等级、术语、内容、准确度，特别是可能过期的内容。</p></li><li><p>链接测试</p><p>（1）测试所有链接是否按指示的那样链接到了正确的页面；</p><p>（2）测试所链接的页面是否存在；</p><p>（3）保证网站上没有孤立的页面，即没有链接指向的页面；</p><p>（4）链接测试必须在集成测试阶段完成。</p></li><li><p>图形测试</p><p>一个 Web 页的图形可以包括图片、动画、边框、颜色、字体、背景、按钮等，内容如下：</p><p>（1）确保图形有明确用途，避免浪费带宽；</p><p>（2）图片的大小和质量很重要；</p><p>（3）检测是否所有图形都正确载入和显示了；</p><p>（4）验证所有页面字体的风格是否一致；</p><p>（5）背景颜色是否与字体颜色和前景颜色搭配；</p><p>（6）验证文字回绕是否正确。</p></li><li><p>表单测试</p><p>表单是指网页上用于输入和选择信息的文本框、列表框、其他域。</p><p>检测域的大小是否正确，数据接收是否正确，可选域是否真正可选等内容。</p></li><li><p>动态内容测试</p><p>动态内容指根据当前条件发生变化的文字和图形，例如日期、时间、用户喜好或者具体的用户操作等。</p></li><li><p>数据库测试</p><p>在使用了数据库的 Web 应用系统中一般可能出现两种故障：一是数据一致性故障，二是输出故障。前者主要是用户提交的表单信息不正确引起，后者主要是网络速度或程序设计问题引起的。</p></li><li><p>服务器性能和加载测试</p><p>模拟数百万个链接和下载。</p></li><li><p>安全性测试</p><p>（1）测试有效的和无效的用户名和密码，是否可以不登录而直接浏览某个页面；</p><p>（2）检测网页是否有超时的限制，即用户登录后在一定时间内没有操作是否需要重新登录；</p><p>（3）当使用安全套接字时检测加密是否正确、信息是否完整；</p><p>（4）服务器端的脚本是否构成安全漏洞。</p></li></ul><h2 id="常见的测试工具"><a href="#常见的测试工具" class="headerlink" title="常见的测试工具"></a>常见的测试工具</h2><ul><li><p>负载压力测试</p><p>LoadRunner(商用)、JMeter(开源)</p></li><li><p>功能测试</p><p>WinRunner</p></li><li><p>白盒测试</p><p>JUnit5</p></li><li><p>测试管理</p><p>TestDirector、TestManager</p></li></ul><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;系统测试是对已经集成好的软件进行彻底的测试，此外还需要检测它与系统中的其他部分能否协调工作，以验证软件系统的正确性</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>集成测试</title>
    <link href="http://10185102110.github.io/2021/09/27/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/"/>
    <id>http://10185102110.github.io/2021/09/27/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-27T12:06:36.000Z</published>
    <updated>2021-09-27T13:18:30.029Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>集成测试是在单元测试的基础上将多个模块组合在一起进行测试的过程，主要检查各个软件单元之间的相互接口是否正确，是介于单元测试与系统测试之间的过渡阶段，是单元测试的扩展和延伸。</p><p>不经过单元测试的模块不应进行集成测试。</p><p>通过单元测试和集成测试仅能保证软件开发的功能得以实现，不能确认在实际运行时能否满足用户的需求。</p><h2 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h2><p>集成测试使用黑盒测试方法测试集成的功能，并对以前的集成进行回归测试。</p><ul><li>将各模块连接起来时检查各个模块相互调用时、数据穿越模块接口时是否会丢失；</li><li>各子功能组合起来能否达到预期要求的各项功能；</li><li>一个模块的功能是否会对其他模块的功能产生不利影响；</li><li>全局数据结构是否有问题，是否会被异常修改；</li><li>单个模块的误差累积起来是否会放大，从而达到不可接受的程度。</li></ul><h2 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h2><p>对于传统软件，集成测试划分为 $3$ 个层次，即模块内集成测试、子系统内集成测试和子系统间集成测试。</p><p>对于面向对象的应用系统，可以分为两个阶段，即类内集成测试和类间集成测试。</p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul><li>所有公共接口都要被测试到；</li><li>关键模块必须进行充分的测试；</li><li>集成测试应当按一定的层次进行；</li><li>集成测试应当尽早开始，并以总体设计为基础；</li><li>当接口发生修改时，涉及的相关接口必须进行再测试。</li></ul><h1 id="集成测试策略"><a href="#集成测试策略" class="headerlink" title="集成测试策略"></a>集成测试策略</h1><p>在对两个以上的模块进行集成时需要考虑和周围模块的关系，因此需要设计若干辅助测试模块。</p><p>辅助测试模块分为以下两种：</p><ul><li><strong>驱动模块</strong>（Driver）：用来模拟被测模块的上级调用模块，功能比真正的上级模块简单得多，仅仅是接受测试数据，并向被测模块传送测试数据，启动被测模块，回收并输出测试结果。</li><li><strong>桩模块</strong>（Stub）：用来模拟被测模块在执行过程中所要调用的模块，接受被测模块输出的数据并完成它所指派的任务。</li></ul><p>假设被测程序的结构如图 $1$ 所示，由 $6$ 个模块组成：</p><p><img src="1.png" alt=""></p><h2 id="非渐增式集成"><a href="#非渐增式集成" class="headerlink" title="非渐增式集成"></a>非渐增式集成</h2><p>非渐增式集成测试采用一步到位的方法进行测试，即对所有模块进行个别的单元测试后按程序结构图将各模块连接起来，把连接后的程序当作一个整体进行测试。</p><p>在进行单元测试时，根据在结构图中的地位对模块 B 和 D 配备了驱动模块和桩模块，对模块 C、E、F 只配备了驱动模块，如图 $2$；对主模块 A 只配备了 $3$ 个桩模块来模拟被它调用的 B、C 和 D，如图 $3$。</p><p><img src="2.png" alt=""></p><p><img src="3.png" alt=""></p><p>对它们分别进行单元测试以后，再按照图 $1$ 所示的结构图连接起来进行集成测试。</p><h2 id="渐增式集成"><a href="#渐增式集成" class="headerlink" title="渐增式集成"></a>渐增式集成</h2><p>基本思路是首先将各模块独立地进行单元测试，然后将这些模块逐步组装成较大的系统，边组装边测试，以发现在组装时产生的错误，最终组装成一个符合要求的软件系统。</p><p>按照不同的次序实施，有下面两种测试策略：</p><ol><li><p>自顶向下增量式集成测试</p><p>该测试方法是按照程序结构图，首先利用桩模块测试主模块，通过测试后用实际的模块替代桩模块进行测试，重复以上步骤，直至替代了所有的桩模块。</p><p>在测试过程中，决定模块测试次序的基本原则如下：</p><p>（1）尽早测试关键的模块，即比较重要、比较复杂的可能出错或含有新算法的模块；</p><p>（2）尽早测试包含输入、输出功能的模块。</p><p>又可以分为：</p><ul><li>深度优先策略</li><li>广度优先策略</li></ul></li><li><p>自底向上增量式集成测试</p><p>该测试方法是按照程序结构图，首先利用驱动模块测试最底层模块，通过测试后用实际的模块替代驱动模块进行测试，重复以上步骤，直至替代了所有的驱动模块。</p><p>在测试过程中，决定测试次序的基本原则是该模块的所有下级模块都被测试过了。</p></li></ol><p>两种测试方法的比较：</p><p><img src="0.png" alt=""></p><h2 id="其他集成测试策略"><a href="#其他集成测试策略" class="headerlink" title="其他集成测试策略"></a>其他集成测试策略</h2><ol><li><p>三明治集成测试</p><p>三明治集成测试是将自顶向下测试和自底向上测试有机结合起来，采用并行的自顶向下、自底向上集成方式形成改进的三明治方法。采用持续集成的策略。</p></li><li><p>核心系统先行集成测试</p><p>先对核心软件部件进行集成测试，在测试通过的基础上再按各外围软件部件的重要程度逐个集成到核心系统中。</p></li><li><p>高频集成测试</p><p>指同步于软件开发过程每隔一段时间对开发团队的现有代码进行一次集成测试。</p></li></ol><h1 id="面向对象的集成策略"><a href="#面向对象的集成策略" class="headerlink" title="面向对象的集成策略"></a>面向对象的集成策略</h1><p>传统的集成测试通过集成完成的功能模块进行测试，而对于面向对象程序，相互调用的功能分布在程序的不同类中，根本无法在编译不完成的程序上对类进行测试；此外面向对象程序具有动态性，程序的控制流往往无法确定，因此只能对整个编译后的程序做基于<strong>黑盒技术</strong>的集成测试。</p><h2 id="对象交互"><a href="#对象交互" class="headerlink" title="对象交互"></a>对象交互</h2><p>对象交互是一个对象向另一个对象发出请求，接收者执行一些操作来完成这个请求。</p><p>类与类交互的方式（类接口）主要有：</p><ul><li>公共操作将一个或多个类命名为正式参数的类型；</li><li>公共操作将一个或多个命名作为返回值的类型；</li><li>类的方法创建另一个类的实例；</li><li>类的方法引用某个类的全部实例。</li></ul><p>对象交互的测试根据类的类型可以分为原始类测试、汇集类测试和协作类测试。</p><p>原始类测试使用类的单元测试技术。</p><ol><li><p>汇集类测试</p><p>汇集类：这些类在说明中使用对象，但是实际上从不和这些对象中的任何一个进行协作，即从不请求这些对象的服务。汇集类会表现出以下一个或多个行为：</p><ul><li>存放这些对象的引用，通常表现程序中对象之间的一对多的关系；</li><li>创建这些对象的实例；</li><li>删除这些对象的实例。</li></ul><p>可以使用测试原始类的方式来测试汇集类，测试驱动程序要创建一些实例，作为消息中心的参数被传送给一个正在测试的集合。测试用例主要目的是保证那些实例被正确加入集合并被正确地从集合中移出，测试用例说明的集合会对其容量有所限制。假如在实际应用中可能要加入 30-50 条信息，那么生成的测试用例至少要增加 50 条信息。</p></li><li><p>协作类测试</p><p>这种类在它们的一个或多个操作中使用其他对象，并将其作为实现中不可缺少的一部分。</p></li></ol><h2 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h2><p>面向对象的集成测试分两步进行，先静态测试，再动态测试。</p><p>设计测试用例可参考下列步骤：</p><p>（1）先选定检测的类，仔细给出类的状态和相应的行为、类或成员函数间传递的消息、输入或输出的界定等；</p><p>（2）确定覆盖标准；</p><p>（3）利用结构关系图，确定待测类的所有关联；</p><p>（4）根据程序中类的对象构造测试用例，确认使用什么输入激发类的状态、使用类的服务和期望结果。</p><h2 id="常用测试技术"><a href="#常用测试技术" class="headerlink" title="常用测试技术"></a>常用测试技术</h2><ol><li><p>抽样测试</p><p>首先定义测试总体，然后定义一种方法，从测试用例总体中选择哪些被构建、哪些被执行。</p></li><li><p>正交阵列测试</p><p>正交阵列测试提供了一种特殊的抽样方法。正交阵列矩阵中的每一列代表一个因素，即一个变量代表程序中的一个特定的类状态，特定的状态数构成了级别。在正交阵列中，将各个因素可能组合成配对方式。</p><p>例如有 $3$ 个因素 A、B、C，每个因素有 $3$ 个级别 1、2、3，共有 27 种可能组合情况，即 A 的 $3$ 种情况 $\times$ </p><p>B 的 $3$ 种情况 $\times$​ C 的 $3$ 种情况，假定一个给定级别仅出现 $2$ 次，那么就只有下表所示的配对组合方式。</p><p>|      |  A   |  B   |  C   |<br>| :—: | :—: | :—: | :—: |<br>|  1   |  1   |  1   |  3   |<br>|  2   |  1   |  2   |  2   |<br>|  3   |  1   |  3   |  1   |<br>|  4   |  2   |  1   |  2   |<br>|  5   |  2   |  2   |  1   |<br>|  6   |  2   |  3   |  3   |<br>|  7   |  3   |  1   |  1   |<br>|  8   |  3   |  2   |  3   |<br>|  9   |  3   |  3   |  2   |</p><p>正交阵列测试使用平衡设计，每个配对级别仅出现一次。</p></li></ol><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件缺陷</title>
    <link href="http://10185102110.github.io/2021/09/26/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/"/>
    <id>http://10185102110.github.io/2021/09/26/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7/</id>
    <published>2021-09-26T13:19:36.000Z</published>
    <updated>2021-09-27T13:19:22.780Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>术语：</p><ul><li><p>软件错误</p><p>指在软件生存期内的不希望或不可接受的人为错误，其结果是导致软件缺陷的产生。软件错误是一种人为过程，相对于软件本身是一种外部行为。</p></li><li><p>软件缺陷</p><p>存在于软件之中的那些不希望或不可接受的偏差，结果是软件运行于某一特定条件时出现软件故障，这时称软件缺陷被激活。</p></li><li><p>软件故障</p><p>指软件运行过程中出现的一种不希望或不可接受的内部状态。若没有适当的措施加以处理，便产生软件失效，软件故障是一种动态行为。</p></li><li><p>软件失效</p><p>指软件运行时产生的一种不希望或不可接受的外部行为结果。</p></li></ul><p>软件失效的机理：</p><p>软件错误是一种人为错误，一个软件错误必定产生一个或多个软件缺陷，当一个软件缺陷被激活时便产生一个软件故障；同一个软件缺陷在不同条件下被激活可能产生不同的软件故障。软件故障如果没有及时用容错措施加以处理便不可避免地导致软件失效。</p><h1 id="软件缺陷的属性"><a href="#软件缺陷的属性" class="headerlink" title="软件缺陷的属性"></a>软件缺陷的属性</h1><ul><li><p>缺陷标识（Identifier）：标记某个缺陷的一组符号，每个缺陷必须有一个唯一的标识。</p></li><li><p><strong>缺陷类型</strong>（Type）：一般包括功能缺陷、用户界面缺陷、文档缺陷、软件配置缺陷、性能缺陷、系统/模块接口缺陷等。</p><p>| 缺陷类型编号 |       缺陷类型        |                             描述                             |<br>| :—————: | :—————————-: | :—————————————————————————————: |<br>|      10      |      F-Function       | 影响重要的特性、用户界面、产品接口、硬件结构接口和全局数据结构，并且设计文档需要正式的变更等缺陷 |<br>|      20      |     A-Assignment      | 需要修改少量代码，如初始化或控制块，声明、重复命名，范围、限定等缺陷 |<br>|      30      |      I-Interface      | 与其他组件、模块或设备驱动程序、调用参数、控制块或参数列表相互影响的缺陷 |<br>|      40      |      C-Checking       |            提示的错误信息，不适当的数据验证等缺陷            |<br>|      50      | B Build/package/merge |           由于配置库、变更管理或版本控制引起的错误           |<br>|      60      |    D-Documentation    |                   影响发布和维护，包括注释                   |<br>|      70      |      G-Algorithm      |                           算法错误                           |<br>|      80      |   U-User Interface    | 人机交互特性：屏幕格式、确认用户输入、功能有效性、页面排版等缺陷 |<br>|      90      |     P-Performance     |     不满足系统可测量的属性值，如执行时间、事务处理速率等     |<br>|     100      |        N-Norms        |         不符合各种标准的要求，如编码标准、设计符号等         |</p></li><li><p>缺陷严重程度（Severity）：指因缺陷引起的故障对软件产品的影响程度。</p><p>|  #   | 缺陷严重等级 |                             描述                             |<br>| :—: | :—————: | :—————————————————————————————: |<br>|  1   |   Critical   |       不能执行正常工作功能或重要功能，或者危及人身安全       |<br>|  2   |    Major     |         严重影响系统要求或基本功能的实现，且无法更正         |<br>|  3   |    Minor     | 严重影响系统要求或基本功能的实现，但存在合理的更正方法（重新安装或重新启动该软件不属于更正方法） |<br>|  4   |   Cosmetic   |  使操作者不方便或遇到麻烦，但它不影响执行工作功能或重要功能  |<br>|  5   |    Other     |                           其他错误                           |</p></li><li><p>缺陷优先级（Priority）：指缺陷必须被修复的紧急程度。</p><p>|  #   |     缺陷优先级      |        描述        |<br>| :—: | :————————-: | :————————: |<br>|  1   | Resolve Immediately |    必须立即解决    |<br>|  2   |    Normal Queue     |  需要排队等待修复  |<br>|  3   |     Not Urgent      | 可以在方便时被纠正 |</p></li><li><p>缺陷状态（Status）：指缺陷通过一个跟踪修复过程的进展情况。</p><p>| 缺陷状态  |             描述             |<br>| :———-: | :—————————————: |<br>| Submitted |         已提交的缺陷         |<br>|   Open    |  确认“提交的缺陷”，等待处理  |<br>| Rejected  | 拒绝“提交的缺陷”，不需要修复 |<br>| Resolved  |          缺陷被修复          |<br>|  Closed   |  确认被修复的缺陷，将其关闭  |</p></li><li><p>缺陷起源（Origin）：指缺陷引起的故障第一次被检测到的阶段。</p><p>|   缺陷起源   |         描述         |<br>| :—————: | :—————————: |<br>| Requirement  | 在需求阶段发现的缺陷 |<br>| Architecture | 在构架阶段发现的缺陷 |<br>|    Design    | 在设计阶段发现的缺陷 |<br>|     Code     | 在编码阶段发现的缺陷 |<br>|     Test     | 在测试阶段发现的缺陷 |</p></li><li><p>缺陷来源（Source）：指引起缺陷的起因。</p><p>|   缺陷来源   |          描述          |<br>| :—————: | :——————————: |<br>| Requirement  | 由于需求问题引起的缺陷 |<br>| Architecture | 由于构架问题引起的缺陷 |<br>|    Design    | 由于设计问题引起的缺陷 |<br>|     Code     | 由于编码问题引起的缺陷 |<br>|     Test     | 由于测试问题引起的缺陷 |<br>| Integration  | 由于集成问题引起的缺陷 |</p></li><li><p>缺陷根源（Root Cause）：指发生错误的根本因素。</p></li></ul><h1 id="缺陷六要素"><a href="#缺陷六要素" class="headerlink" title="缺陷六要素"></a>缺陷六要素</h1><ul><li>缺陷标识</li><li>缺陷名称</li><li>缺陷优先级</li><li>缺陷严重程度</li><li>缺陷的复现步骤：用例的步骤、预期结果、实际结果。</li><li>附件：截图/日志/视频，目的是为缺陷佐证。</li></ul><h1 id="缺陷生命周期"><a href="#缺陷生命周期" class="headerlink" title="缺陷生命周期"></a>缺陷生命周期</h1><p>基本的软件缺陷生命周期：</p><p>发现缺陷$\rightarrow$分配缺陷$\rightarrow$修复缺陷$\rightarrow$验证缺陷$\rightarrow$解决缺陷</p><p>软件的状态在其生命周期中的变化如下：</p><p>（1）创建（Open）：缺陷从隐藏在产品中被发现。</p><p>（2）已分配（Assigned）：得到缺陷修复请求后，将修复任务分配给相应的开发人员进行修复。</p><p>（3）已修复（Fixed）：开发人员根据缺陷的描述重现缺陷的症状、修复缺陷，然后提交给测试人员验证修改。</p><p>（4）验证（Validate）：测试人员验证修改的有效性，若修正得到确认，缺陷状态变为“已确认”。</p><p>（5）关闭（Close）：测试人员关闭这个缺陷，结束其生命周期。</p><p>实践中的软件缺陷生命周期：</p><p><img src="0.png" alt=""></p><h1 id="IEEE-软件缺陷报告模板"><a href="#IEEE-软件缺陷报告模板" class="headerlink" title="IEEE 软件缺陷报告模板"></a>IEEE 软件缺陷报告模板</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">        IEEE 829-1998 软件测试文档编制标准软件缺陷报告模板</span></span><br><span class="line"><span class="code">                           目录</span></span><br><span class="line"><span class="code">1.软件缺陷报告标识符</span></span><br><span class="line"><span class="code">2.软件缺陷总结</span></span><br><span class="line"><span class="code">3.软件缺陷描述</span></span><br><span class="line"><span class="code">  3.1  输入</span></span><br><span class="line"><span class="code">  3.2  期望结果</span></span><br><span class="line"><span class="code">  3.3  实际结果</span></span><br><span class="line"><span class="code">  3.4  异常情况</span></span><br><span class="line"><span class="code">  3.5  日期和时间</span></span><br><span class="line"><span class="code">  3.6  软件缺陷发生的步骤</span></span><br><span class="line"><span class="code">  3.7  测试环境</span></span><br><span class="line"><span class="code">  3.8  再现测试</span></span><br><span class="line"><span class="code">  3.9  测试人员</span></span><br><span class="line"><span class="code">  3.10 见证人</span></span><br><span class="line"><span class="code">4.影响</span></span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;软件错误&lt;/p&gt;
&lt;p&gt;指在软件生存期内的不希望或不可接受的人为错误，其结</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>高质量代码</title>
    <link href="http://10185102110.github.io/2021/09/23/%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81/"/>
    <id>http://10185102110.github.io/2021/09/23/%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BB%A3%E7%A0%81/</id>
    <published>2021-09-23T07:58:03.000Z</published>
    <updated>2021-09-27T13:20:25.045Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><h2 id="程序的书写格式"><a href="#程序的书写格式" class="headerlink" title="程序的书写格式"></a>程序的书写格式</h2><h3 id="版本的声明格式"><a href="#版本的声明格式" class="headerlink" title="版本的声明格式"></a>版本的声明格式</h3><p>每个 C++/C 的通常分为两个文件，一个文件用于保存程序的声明，称为头文件；另一个用于保存程序的实现，称为定义文件。</p><p>在头文件和 C 程序文件中都必须包含版权和版本的声明。</p><p>版权和版本的声明位于头文件和定义文件的开头，主要内容如下：</p><ul><li>版权信息；</li><li>文件名称、标识符、摘要；</li><li>当前版本号、作者/修改者、完成日期；</li><li>版本历史信息。</li></ul><blockquote><p>【范例 1】</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Copyright @2016，北京侏罗纪公司XX部</span></span><br><span class="line"><span class="comment">//All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//文件名称：filename.h</span></span><br><span class="line"><span class="comment">//文件标识：见配置管理计划书</span></span><br><span class="line"><span class="comment">//摘   要：简要描述本文件的内容</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//当前版本：2.1</span></span><br><span class="line"><span class="comment">//作   者：输入作者名字</span></span><br><span class="line"><span class="comment">//完成日期：2016年3月20日</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//取代版本：2.0</span></span><br><span class="line"><span class="comment">//原作者 ：输入作者名字</span></span><br><span class="line"><span class="comment">//完成日期：2016年2月10日</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="头文件的书写格式"><a href="#头文件的书写格式" class="headerlink" title="头文件的书写格式"></a>头文件的书写格式</h3><p>用户可以通过头文件来调用库功能。</p><p>在很多场合源代码不便向用户公布，向用户提供头文件和二进制的库即可，用户只需要按照头文件中的接口声明来调用库功能，而不必关系接口是怎么实现的，编译器会从库中提取相应的代码。</p><p>头文件能加强类型安全检查，如果某个接口被实现或被使用时其方式与头文件中的声明不一致，编译器就会指出错误。</p><p>头文件必须包含下列内容：</p><ul><li>版权和版本声明；</li><li>预处理块；</li><li>函数和类结构声明等。</li></ul><p>正确使用预处理块：为了防止头文件被重复引用，应当用 <code>ifndef-define-endif</code> 结构产生预处理块。</p><p>正确引用头文件的格式：</p><p>（1）用 #include<filename.h> 格式引用标准库的头文件（编译器从标准库目录搜索）；</p><p>（2）用 #include “filename.h” 格式引用非标准库的头文件（编译器从用户的工作目录搜索）。</p><p>在头文件中只存放“声明“，而不存放”定义“。为了代码风格一致，建议将成员函数的定义与声明分开。</p><blockquote><p>【范例 2】</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版权和版本声明见范例1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> GRAPHICS_H</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> GRAPHICS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line">   ...</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;myheader.h&quot;</span></span></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">(...)</span></span>;</span><br><span class="line">   ...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="定义文件的书写格式"><a href="#定义文件的书写格式" class="headerlink" title="定义文件的书写格式"></a>定义文件的书写格式</h3><p>定义文件必须包含以下内容：</p><ul><li><p>版权和版本声明；</p></li><li><p>对一些头文件的引用；</p></li><li>程序的实现体（数据和代码）。</li></ul><blockquote><p>【范例 3】</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//版权和版本声明见范例1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;graphics.h&quot;</span></span></span><br><span class="line">   ...</span><br><span class="line">       </span><br><span class="line"><span class="comment">//全局函数的实现体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类成员函数的实现体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Draw</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空行的使用"><a href="#空行的使用" class="headerlink" title="空行的使用"></a>空行的使用</h3><p>空行起着分隔程序段落的作用，而且不会浪费内存。</p><p>在一个函数体内，逻辑上密切相关的语句之间不加空行，其他地方应加空行分割。</p><ul><li>关键字之后要留空格。例如 <code>const、virtual、inline、case</code> 等关键字之后至少留一个空格，否则无法辨析关键字。<code>if、for、while</code> 等关键字之后应留一个空格再跟 ‘<code>(</code>‘，以突出关键字。</li><li>函数名之后不要留空格，紧跟 ‘<code>(</code>‘ 以区别于关键字。</li><li>‘<code>,</code>’ 之后要留空格，如果 ‘<code>;</code>‘ 不是一行的结束符号，其后也要留空格。</li><li>赋值操作符、比较操作符、算术操作符、逻辑操作符等二元操作符的前后要加空格。</li><li>一元操作符如 ’<code>!</code>’，’<code>++</code>‘，‘<code>&amp;</code>’（地址运算符） 等前后不加空格。</li><li>‘<code>[]</code>’，’<code>.</code>‘，’<code>-&gt;</code>‘ 这类操作符前后不加空格。</li></ul><h2 id="Windows-程序命名规则"><a href="#Windows-程序命名规则" class="headerlink" title="Windows 程序命名规则"></a>Windows 程序命名规则</h2><p>匈牙利命名法是一种编程时的命名规范，基本原则是变量名=属性+类型+对象描述，其中每个对象名都要求有明确的含义，可以取对象全称的一部分。</p><p>在 Windows 下开发程序应该尽量使用匈牙利命名法，用小写字母的前缀表示变量的类型，前缀的下一个字母用大写。</p><p>常见的数据类型前缀：</p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">类型</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">b</td><td style="text-align:center">bool</td><td style="text-align:center">bIsParent</td></tr><tr><td style="text-align:center">by/byte</td><td style="text-align:center">byte</td><td style="text-align:center">byFlag</td></tr><tr><td style="text-align:center">ch</td><td style="text-align:center">char</td><td style="text-align:center">chText</td></tr><tr><td style="text-align:center">fn</td><td style="text-align:center">函数变量</td><td style="text-align:center">fnCallback</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">句柄</td><td style="text-align:center">hWnd</td></tr><tr><td style="text-align:center">i/n</td><td style="text-align:center">int</td><td style="text-align:center">iValue/nValue</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">unsigned int</td><td style="text-align:center">uFlag</td></tr><tr><td style="text-align:center">dw</td><td style="text-align:center">dword</td><td style="text-align:center">dwData</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">指针</td><td style="text-align:center">pBuffer</td></tr><tr><td style="text-align:center">sz/str</td><td style="text-align:center">字符串</td><td style="text-align:center">szBuffer</td></tr><tr><td style="text-align:center">lpstr/lpsz</td><td style="text-align:center">lpstr</td><td style="text-align:center">lpstrMessage</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">word</td><td style="text-align:center">wData</td></tr><tr><td style="text-align:center">x,y</td><td style="text-align:center">坐标</td><td style="text-align:center">xPos，yPos</td></tr><tr><td style="text-align:center">m_</td><td style="text-align:center">类成员变量</td><td style="text-align:center">m_bFlag</td></tr><tr><td style="text-align:center">g_</td><td style="text-align:center">全局变量</td><td style="text-align:center">g_bFlag</td></tr></tbody></table></div><p>常见的控件名前缀：</p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">控件类型</th></tr></thead><tbody><tr><td style="text-align:center">frm/wnd</td><td style="text-align:center">窗口</td></tr><tr><td style="text-align:center">cmd/btn</td><td style="text-align:center">按钮</td></tr><tr><td style="text-align:center">cmb/combo</td><td style="text-align:center">下拉式列表框</td></tr><tr><td style="text-align:center">txt</td><td style="text-align:center">文本输入框</td></tr><tr><td style="text-align:center">lbl</td><td style="text-align:center">标签</td></tr><tr><td style="text-align:center">grd</td><td style="text-align:center">Grid、网络</td></tr><tr><td style="text-align:center">scr</td><td style="text-align:center">滚动条</td></tr><tr><td style="text-align:center">lst</td><td style="text-align:center">列表框</td></tr><tr><td style="text-align:center">frame</td><td style="text-align:center">框架</td></tr></tbody></table></div><p>对于多个单词组成的变量名，每个单词的首字母应该大写。</p><p>类名和数据结构定义用大写字母开头的单词组合而成，类名前加前缀‘<code>C</code>’，数据结构不加前缀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNode</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLeafNode</span>&#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>&#125;;</span><br></pre></td></tr></table></figure><p>变量和参数用小写字母开头的单词组合而成，即第一个单词全部小写，后续单词首字母大写。</p><p>函数名用大写字母开头的单词组合而成。</p><h2 id="共性规则"><a href="#共性规则" class="headerlink" title="共性规则"></a>共性规则</h2><ul><li><p>较短的单词可以去掉元音形成缩写，较长的单词可取单词的头几个字形成缩写。</p><p>一些单词有公认的缩写，例如：</p><p>|   单词    | 缩写 |<br>| :———-: | :—: |<br>|   temp    | tmp  |<br>|   flag    | flg  |<br>| statistic | stat |<br>| increment | inc  |<br>|  message  | msg  |</p></li><li><p>应该在源文件的开始处对所使用的缩写或约定进行必要的注释说明。</p></li><li><p>Windows 下的源代码通常采用“大小写混排”的方式，如 AddChild；而 UNIX/Linux 应用程序的标识符通常采用“小写+下划线”的方式，如 add_child。</p></li><li><p>在程序中不要出现仅靠大小写区分的相似标识符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容易混淆</span></span><br><span class="line"><span class="keyword">int</span> x,X;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FOO</span><span class="params">(<span class="keyword">float</span> x)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在程序中不要出现标识符完全相同的局部变量和全局变量。</p></li><li><p>变量的名字应使用“形容词+名词”或“名词”的形式，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> value;</span><br><span class="line"><span class="keyword">float</span> oldValue;</span><br><span class="line"><span class="keyword">float</span> newValue;</span><br></pre></td></tr></table></figure></li><li><p>全局函数的名字应使用“动词“或”动词+名词“的形式。类的成员函数应只使用”动词“，被省略掉的名词就是对象本身。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DrawBox</span>(); <span class="comment">//全局函数</span></span><br><span class="line">box-&gt;<span class="built_in">Draw</span>(); <span class="comment">//类的成员函数</span></span><br></pre></td></tr></table></figure></li><li><p>用正确的反义词组命名具有互斥意义的变量或相反动作的函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> minValue;</span><br><span class="line"><span class="keyword">int</span> maxValue;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SetValue</span><span class="params">(...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetValue</span><span class="params">(...)</span></span>;</span><br></pre></td></tr></table></figure><p>常见的反义词组：</p><p>|    正     |    反     |<br>| :———-: | :———-: |<br>|    add    |  remove   |<br>|  insert   |  delete   |<br>| increment | decrement |<br>|    min    |    max    |<br>|   next    | previous  |<br>|   send    |  receive  |<br>|    cut    |   paste   |<br>|   begin   |    end    |<br>|   first   |   last    |<br>|    put    |    get    |<br>|   lock    |  unlock   |<br>|    old    |    new    |<br>|  source   |  target   |<br>|    up     |   down    |<br>|  create   |  destroy  |<br>|   open    |   close   |<br>|   start   |   stop    |<br>|   show    |   hide    |</p></li><li><p>应该避免名字中出现数字编号，如 Value1，Value2 等，除非逻辑上需要编号。</p></li></ul><h2 id="表达式和表达语句"><a href="#表达式和表达语句" class="headerlink" title="表达式和表达语句"></a>表达式和表达语句</h2><ul><li><p>复合表达式</p><p>如 ”<code>a = b = c = 0</code>“ 这样的表达式称为复合表达式，它书写简洁，可以提高编译效率，但要防止滥用复合表达式。</p><ul><li><p>不要编写太复杂的复合表达式，如：</p><p><code>i = a &gt;= b &amp;&amp; c&lt;d &amp;&amp; c + f &lt;= g + b;</code></p><p><code>* stat_poi ++ +=1;</code></p><p>应改为 <code>* stat_poi +=1; stat_poi++;</code></p></li><li><p>不要有多用途的复合表达式，如：</p><p><code>d = (a = b + c) + r;</code></p><p>该表达式既求 a 值又求 d 值，应该拆分为两个独立语句。</p></li><li><p>已删除的对象指针要赋予空指针值。</p></li></ul></li><li><p>if 语句</p><ul><li><p>不可将布尔变量直接与 TRUE、FALSE 或者 1、0 进行比较。</p><p>因为 TRUE 的值是什么并没有统一的标准。</p><p>flag 与零值比较的标准 if 语句如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag)   <span class="comment">//表示flag为真</span></span><br><span class="line"><span class="keyword">if</span>(!flag)  <span class="comment">//表示flag为假</span></span><br></pre></td></tr></table></figure></li><li><p>整型变量不可模仿布尔风格。</p><p>整型变量 value 与零值比较的标准 if 语句如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(value == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(value != <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>不可将浮点变量用 “==” 或 “!=” 与任何数字比较。</p><p>因为 float 和 double 变量都有精度限制，应该设法转化成“&gt;=”或“&lt;=”形式。</p><p>例如浮点变量 x，E 是允许的误差（即精度）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x == <span class="number">0.0</span>)</span><br><span class="line"><span class="comment">//转化为</span></span><br><span class="line"><span class="keyword">if</span>((x&gt;=-E) &amp;&amp; (x&lt;=E))</span><br></pre></td></tr></table></figure></li><li><p>指针变量应该用“==”或“!=”与 NULL 比较。</p></li></ul></li><li><p>循环语句的效率</p><p>提高循环体效率的基本方法是降低循环体的复杂性。</p><ul><li><p>在多重循环中，应当将最长的循环放在最内层，将最短的循环放在最外层，以减少 CPU 跨切循环层的次数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//低效率</span></span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">0</span>;row &lt; <span class="number">100</span>;row++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (col = <span class="number">0</span>;col &lt; <span class="number">5</span>;col++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + a[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高效率</span></span><br><span class="line"><span class="keyword">for</span> (col = <span class="number">0</span>;col &lt; <span class="number">5</span>;col++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (raw = <span class="number">0</span>;raw &lt; <span class="number">100</span>;raw++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + a[row][col];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果循环体内存在逻辑判断，并且循环次数很大，宜将逻辑判断移到循环体外面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//效率低但程序简介</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition)</span><br><span class="line">        <span class="built_in">DoSomething</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">DoOtherthing</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//效率高但程序不简洁</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">        <span class="built_in">DoSomething</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">        <span class="built_in">DoOtherthing</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>C++ 类中的常量</p><p>const 修饰的数据成员只在某个对象生命周期内是常量，对于整个类而言却是可变的，因为类可以创建多个对象，不同对象的 const 成员的值可以不同。</p><p>若要建立在整个类中都恒定的常量，应该用枚举类型来实现，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">enum</span>&#123;</span>SIZE1 = <span class="number">100</span>,SIZE2 = <span class="number">200</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> array[SIZE1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>枚举常量不会占用对象的存储空间，它们在编译时被全部求值。缺点是它隐含的数据类型是整数，最大值有限且不能表示浮点数。</p></li></ul><h1 id="函数设计规则"><a href="#函数设计规则" class="headerlink" title="函数设计规则"></a>函数设计规则</h1><p>函数接口的两个要素是参数和返回值。在 C++ 中，函数参数和返回值的传递方式有 $3$ 种，即<strong>值传递、指针传递和引用传递</strong>。</p><h2 id="函数外部特性的注释规则"><a href="#函数外部特性的注释规则" class="headerlink" title="函数外部特性的注释规则"></a>函数外部特性的注释规则</h2><p>函数外部特性的注释必须在函数体上部采用中文说明，标准格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//输入参数：</span><br><span class="line">//参数1：（指出物理意义、量纲和取值范围）</span><br><span class="line">//...</span><br><span class="line">//参数N：</span><br><span class="line">//函数返回：（指出物理意义、量纲和取值范围）</span><br><span class="line">//功能描述：</span><br><span class="line">//注意事项：</span><br><span class="line">//...</span><br></pre></td></tr></table></figure><p>公用代码库中的函数必须说明对公用代码库的影响和要求，例如可重用性等。</p><p>使用的全局变量，特别是修改全局变量时，必须进行说明。</p><h2 id="参数规则"><a href="#参数规则" class="headerlink" title="参数规则"></a>参数规则</h2><ul><li><p>参数命名要恰当，顺序要遵循程序员的习惯，一般将目的参数放前面，源参数放后面。</p></li><li><p>如果参数是指针，且仅作输入用，应在类型前加 const，防止该指针在函数体内被修改。</p></li><li><p>对仅作输入的参数尽量使用 const 修饰符。</p><p>如果输入参数以值传递的方式传递对象，宜改用 ”const &amp;“ 方式来传递，这样可以省去临时对象的构造和析构过程。</p></li><li><p>参数默认值只能出现在函数声明中，不能出现在定义体内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>,<span class="keyword">int</span> y = <span class="number">0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>,<span class="keyword">int</span> y = <span class="number">0</span>)</span>  <span class="comment">//错误</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个参数，参数只能从后往前依次默认。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y = <span class="number">0</span>，<span class="keyword">int</span> z = <span class="number">0</span>)</span></span>; <span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x = <span class="number">0</span>,<span class="keyword">int</span> y,<span class="keyword">int</span> z = <span class="number">0</span>)</span></span>;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li><li><p>避免函数有太多参数，尽量控制在 $5$ 个以内。</p></li><li><p>尽量不使用类型和数目不确定的参数，否则在编译时会丧失严格的类型安全检查。</p></li><li><p>非调度函数应减少控制参数，尽量使用数据参数，降低代码的控制耦合。</p></li></ul><h2 id="函数内部的实现规则"><a href="#函数内部的实现规则" class="headerlink" title="函数内部的实现规则"></a>函数内部的实现规则</h2><p>函数体内的局部变量的声明与应用应遵循标准 C 的语法，即需要用到的所有局部变量在函数定义的开始部分统一声明，而不能在首次引用的代码行同时进行声明和定义。</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,i;</span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p>[1] 秦航，杨强 . 软件质量保证与测试(第 2 版)[M] . 北京：清华大学出版社，2017</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;代码风格&quot;&gt;&lt;a href=&quot;#代码风格&quot; class=&quot;headerlink&quot; title=&quot;代码风格&quot;&gt;&lt;/a&gt;代码风格&lt;/h1&gt;&lt;h2 id=&quot;程序的书写格式&quot;&gt;&lt;a href=&quot;#程序的书写格式&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="软件测试" scheme="http://10185102110.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
