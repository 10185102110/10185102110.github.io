<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浮生孰来</title>
  
  
  <link href="http://10185102110.github.io/atom.xml" rel="self"/>
  
  <link href="http://10185102110.github.io/"/>
  <updated>2021-07-15T14:02:57.599Z</updated>
  <id>http://10185102110.github.io/</id>
  
  <author>
    <name>Ave Bai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于分布式HBase的数据分析</title>
    <link href="http://10185102110.github.io/2021/07/15/%E5%9F%BA%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8FHBase%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://10185102110.github.io/2021/07/15/%E5%9F%BA%E4%BA%8E%E5%88%86%E5%B8%83%E5%BC%8FHBase%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2021-07-15T13:05:50.000Z</published>
    <updated>2021-07-15T14:02:57.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>Ubuntu 14.04</p><h2 id="实验设备"><a href="#实验设备" class="headerlink" title="实验设备"></a>实验设备</h2><ul><li>三台阿里云 CentOS 轻量级服务器</li><li>Xshell 终端模拟软件</li><li>WinSCP 文件操作软件</li></ul><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ul><li>Ubuntu下Java, Hadoop与HBase的安装及伪分布式的部署；</li><li>使用Java API对HBase进行基本操作 ；</li><li>基于Hadoop实现MapReduce；</li><li>使用 TensorFlow 框架，对摩拜单车数据集的经纬度进行分析，并可视化。</li></ul><h2 id="HBase-简介"><a href="#HBase-简介" class="headerlink" title="HBase 简介"></a>HBase 简介</h2><p>HBase是一个构建在HDFS上的分布式列存储系统； </p><p>HBase是基于Google BigTable模型开发的，典型 的key/value系统；</p><p>HBase是Apache Hadoop生态系统中的重要一员，主要用于海量结构化数据存储； </p><p>HBase是一个分布式的、面向列的开源数据库，该技术来源于 Fay Chang 所撰写的Google论文 “Bigtable：一个结构化数据的分布式存储系统”。就像Bigtable利用了Google文件系统（File System） 所提供的分布式数据存储一样，HBase在Hadoop之上提供了类似于Bigtable的能力。</p><p>HBase是Apache 的Hadoop项目的子项目。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据 库。另一个不同的是HBase基于列的而不是基于行的模式。</p><h3 id="分布式Hbase协调工作说明"><a href="#分布式Hbase协调工作说明" class="headerlink" title="分布式Hbase协调工作说明"></a>分布式Hbase协调工作说明</h3><h4 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h4><p>1.保证任何时候，集群中只有一个master </p><p>2.存贮所有Region的寻址入口 </p><p>3.实时监控Region Server的状态，将Region server的上线和下线信息实时通知给Master </p><p>4.存储Hbase的schema，包括有哪些table，每个table有哪些column family</p><h4 id="master"><a href="#master" class="headerlink" title="master"></a>master</h4><p>1.为Region server分配region </p><p>2.负责region server的负载均衡 </p><p>3.发现失效的region server并重新分配其上的region </p><p>4.GFS上的垃圾回收 </p><p>5.处理schema更新请求</p><h4 id="Region-server"><a href="#Region-server" class="headerlink" title="Region server"></a>Region server</h4><p>1.Region server 维护Master分配给它的region，处理对这些region的IO请求。 </p><p>2.Region server 负责切分在运行过程中变得过大的region。 可以看到，client访问hbase上数据的过程并不需要master参与（寻址访问zookeeper和region server，数据读写访问region server）, master仅仅维护着table和region的元数据信息，负载很低。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li><p>安装 Java</p><p>安装 JRE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install default-jre</span><br></pre></td></tr></table></figure><p>安装 OpenJDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install default-jdk</span><br></pre></td></tr></table></figure><p>安装 OracleJDK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br><span class="line">sudo apt-get install oracle-java8-set-default</span><br></pre></td></tr></table></figure></li><li><p>安装 SSH</p><p>在 Hadoop 运行过程中，主从机之间是通过SSH进行通信的，所以需要对所有主机进行SSH的安装和配置 工作。</p><p>安装ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install openssh-server</span><br></pre></td></tr></table></figure><p>使用下面的命令来查看SSH是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure><p><strong>配置免密登录 SSH</strong></p><p>在master主机上进行如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -keygen -t rsa</span><br></pre></td></tr></table></figure><p>将公钥（<code>~/.ssh/id_rsa.pub</code>中的内容）复制到文件 <code>authorized_keys</code> 中去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>将 master 上的 <code>~/.ssh/authorized_keys</code> 通过 scp 命令复制到从机 slave1,slave2 中去。</p><p>但发现通过ssh命令仍不能实现三台主机之间的免密登录，查阅资料我们知道：ssh对目录权限有要求， 代码中要设置新生成的config文件75，其中~目录权限值为750，~/.ssh的是700，~/.ssh/*是600，因此 我们需要给它赋值600，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>安装 Zookeeper</p><p>选择一个版本的 Zookeeper 进行下载安装，用 winSCP 将文件传到服务器根目录下，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp zookeeper-3.5.6-bin.tar.gz hadoop@47.101.139.207:~/</span><br></pre></td></tr></table></figure><p>进入服务器根目录下，将zookeeper-3.5.6-bin.tar.gz解压至 /usr/local/cluster中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ~/zookeeper-3.5.6-bin-tar.gz -C /usr/local/cluter/</span><br></pre></td></tr></table></figure><p>这里解压之后形成的文件夹名为zookeeper-3.5.6，为了方便后续操作，我们将之改名为zookeeper 设置环境变量，在 <code>~/.bashrc</code> 中添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#zookeeper</span><br><span class="line">export ZOOKEEPER=/usr/local/cluster/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER/bin</span><br></pre></td></tr></table></figure><p>使环境变量生效，并为 zookeeper 配置数据和日志文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>当三台主机全部配置完成之后，尝试启动zookeeper：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/cluster/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="1.png" alt="1"></p><p>查看 zookeeper 启动状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/cluster/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p><img src="2.png" alt="2"></p><p>发现 error contacting 经过研究发现，在zoo.cfg配置文件中加上如下一行代码，即可解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quorumListenOnALLIPS=true</span><br></pre></td></tr></table></figure><p><img src="3.png" alt="3"></p><p>完成配置</p></li><li><p>安装 Hadoop 和 HBase</p><p>基本过程与安装 zookeeper 相似，在此省略。</p><p>在hadoop的配置过程中由于java的问题，要注意我们JAVA_HOME的环境变量路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#java</span><br><span class="line"> export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk</span><br><span class="line"> export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"> export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p>接下来进行伪分布式的配置。Hadoop可以在单节点上以伪分布式的方式运行。Hadoop进程以分离的Java进程来运行。需要对hadoop/etc/hadoop中的两个配置文件进行修改。</p><p><img src="5.png" alt="5"></p><p><img src="6.png" alt="6"></p><p>修改完成后对NameNode进行格式化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure><p>启动 hadoop：</p><p><img src="4.png" alt="4"></p><p>用 jps 判断是否启动成功</p><p><img src="7.png" alt="7"></p><p>可以看到，出现 NameNode, DataNode 和 SecondaryNameNode 三个进程，说明启动成功。</p><p>在 50069 端口可以查看节点信息</p><p><img src="8.png" alt="8"></p><p>通过16010端口查看 HBase 运行情况</p><p><img src="9.png" alt="9"></p></li></ol><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><p>使用Hbase Shell导入数据：</p><p><img src="10.png" alt="10"></p><p>在 HBase 内, 数据按照 <code>&lt;行键&gt;&lt;列族1: 列1-1, 列1-2&gt;&lt;列族2: 列2-1, 列2-2&gt;</code> 这样的类型进行存储的。且, 其一, 其中行键的排列顺序是按照字典顺序排序的, 这点对于搜索非常重要。其二, 同一行键的相同列族中列的值, 是可能变化的, 并且按照时间戳进行排序的(当然, 有些数据在合并的时候, 会被删除) 。其中, 相应的模块知识, 如下所示:</p><ul><li><p>Row Key </p><p><code>Row Key</code> , 行键. 是用来检索记录的主键. 访问 <code>HBase Table</code> 中的行, 主要有三种方式. 单个row key 进行访问 / 通过 row key 正则匹配 / 全表扫描 . Row Key 的值可以是任意字符串(最大长度为64KB, 实际使用经常为10-100byte) .其中, 行键的排列顺序是按照字典顺序排序的, 这点对于搜索非常重要. (PS: 字典顺序: <code>1 10 12 6 7 9</code> 中, <code>11</code> 排在 <code>9</code> 之前.) </p></li><li><p>Columns Family </p><p><code>Columns Famil</code>y 列族. HBase 内的每个列, 都属于一个列族. 列族是 Schema 一部分(即表设计), 而 列不是(列可以在插入数据时, 动态添加). 列族是需要在使用之前进行提前定义的. 列名都以列族为前缀, 如<code>course:namecourse:age</code>. </p></li><li><p>Cell </p><p><code>Cell</code> , 数据单元. 有唯一确定的单元. Cell 内的数据是没有类型的, 全部都是字节码进行存储的. </p></li><li><p>Time Stamp </p><p>每个 Cell 存储一个数据的多个版本. 版本号, 通过时间戳进行索引(时间精确到毫秒). 时间戳类型为 64位整数类型. 时间戳按照时间类型倒叙排序. </p><p>回收版本机制: <code>&lt;保存数据的最后n个版本&gt; / &lt;保存最近一段时间的版本(如最近七天)&gt;</code></p></li></ul><p>操作流程</p><ol><li><p>将服务器本地文件(.csv)上传到hdfs的根目录下,然后导入数据到hbase</p></li><li><p>进入hbase shell 创建表 bicycle,列族为info</p></li><li><p>执行文件导入（Hadoop用户中执行）</p><p>格式：hbase [类] [分隔符] [行键，列族] [表] [导入文件] （默认分隔符为空格）</p></li><li><p>导入完成后，可以使用 scan  来查看是否导入成功</p></li></ol><p><img src="11.png" alt="11"></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>对数据清洗之后得到若干组经纬度坐标，对坐标进行聚类，采用以下四种算法：</p><ol><li><p>K-Means (K均值) 聚类</p><p>步骤： </p><p>(1) 选择一些类/组，并随机初始化它们各自的中心点。中心点是与每个数据点向量长度相同的位置（需 要提前预知类的数量，即中心点的数量)。 </p><p>(2) 计算每个数据点到中心点的距离，数据点距离哪个中心点最近就划分到哪一类中。 </p><p>(3) 计算每一类中中心点作为新的中心点。 </p><p>(4) 重复以上步骤，直到每一类中心在每次迭代后变化不大为止。也可以多次随机初始化中心点，然后 选择运行结果最好的一个。</p><p>优点： </p><p>(1) 速度快 </p><p>(2) 计算简便</p><p>缺点： </p><p>(1) 需要提前知道数据有多少类 </p><p>(2) 摩拜单车数据量庞大，并不知道一共可以分成多少类，存在一定误差，但在中小规模数据下可以适 用。</p></li><li><p>均值漂移聚类</p><p>步骤： </p><p>(1) 确定滑动窗口半径r，以随机选取的中心点C半径为r的圆形滑动窗口开始滑动。均值漂移类似一种爬 山算法，在每一次迭代中向密度更高的区域移动，直到收敛。 </p><p>(2) 每一次滑动到新的区域，计算滑动窗口内的均值来作为中心点，滑动窗口内的点的数量为窗口内的 密度。在每一次移动中，窗口会想密度更高的区域移动。 </p><p>(3) 移动窗口，计算窗口内的中心点以及窗口内的密度，知道没有方向在窗口内可以容纳更多的点，即 一直移动到圆内密度不再增加为止。 </p><p>(4) 步骤一到三会产生很多个滑动窗口，当多个滑动窗口重叠时，保留包含最多点的窗口，然后根据数 据点所在的滑动窗口进行聚类。</p><p>优点： </p><p>(1) 不需要设定一共有多少组 </p><p>(3) 受均值影响小 </p><p>缺点： </p><p>r 的选择可能并不重要，在本次实验中并没有好的预期效果。</p></li><li><p>基于密度的聚类方法 (DBSCAN)</p><p>步骤： </p><p>(1) 首先确定半径 r 和 minPoints。从一个没有被访问过的任意数据点开始，以这个点为中心，r 为半径 的圆内包含的点的数量是否大于或等于 minPoints，如果大于或等于 minPoints 则改点被标记为 central point ,反之则会被标记为 noise point。 </p><p>(2) 重复 (1) 的步骤，如果一个 noise point 存在于某个 central point 为半径的圆内，则这个点被标记为 边缘点，反之仍为 noise point。重复步骤 ，直到所有的点都被访问过。</p><p>优点： </p><p>不需要设定一共有多少组。</p><p>缺点： </p><p>需要频繁改动距离 r 和 minPoints，来获得较好的预期效果。</p></li><li><p>用高斯混合模型（GMM）的最大期望（EM）聚类</p><p>步骤： </p><p>(1) 选择簇的数量 (与K-Means类似) 并随机初始化每个簇的高斯分布参数 (均值和方差) 。也可以先观察 数据给出一个相对精确的均值和方差。 </p><p>(2) 给定每个簇的高斯分布，计算每个数据点属于每个簇的概率。一个点越靠近高斯分布的中心就越可 能属于该簇。 </p><p>(3) 基于这些概率我们计算高斯分布参数使得数据点的概率最大化，可以使用数据点概率的加权来计算 这些新的参数，权重就是数据点属于该簇的概率。 重复迭代 (2) 和 (3) 直到在迭代中的变化不大。</p><p>优点：</p><p>(1) 使用均值和标准差，簇可以呈现出椭圆形而不是仅仅限制于圆形 </p><p>(2) 使用概率，所有一个数据点可以属于多个簇 </p><p>缺点： </p><p>目的为确认单车的密度分布，并不太适用此算法。</p></li></ol><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> cholesky</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow.compat.v1 <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle  <span class="comment"># 用于打乱数据</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line">tf.disable_v2_behavior()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zc_read_csv</span>():</span></span><br><span class="line">    zc_dataframe = pd.read_csv(<span class="string">&quot;C:/Users/HP/Desktop/mobike/mobike/1/123.csv&quot;</span>, sep=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    x = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> zc_index <span class="keyword">in</span> zc_dataframe.index:</span><br><span class="line">        zc_row = zc_dataframe.loc[zc_index]</span><br><span class="line">        x.append([zc_row[<span class="number">6</span>],zc_row[<span class="number">7</span>]])</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">x = zc_read_csv()</span><br><span class="line">y = tf.convert_to_tensor(x,name=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">z = tf.to_double(y, name=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    srcdata = sess.run(z)</span><br><span class="line"><span class="built_in">print</span>(srcdata)</span><br><span class="line"><span class="comment"># 画出当前的所有点</span></span><br><span class="line">plt.plot(srcdata[:, <span class="number">0</span>], srcdata[:, <span class="number">1</span>], <span class="string">&#x27;bo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义K-means算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义K-means算法函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmeans</span>(<span class="params">vectors, k_num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 TensorFlow 实现K-Means 算法</span></span><br><span class="line"><span class="string">    :param vectors: 是一个 n * k 的Numpy数组，n代表k维向量的数量，也就是模拟产生的数据点的Tensor</span></span><br><span class="line"><span class="string">    :param k_num: 表示需要分类的个数,是一个整数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 将 k 转换为整数</span></span><br><span class="line">    k_num = <span class="built_in">int</span>(k_num)</span><br><span class="line">    <span class="comment"># 异常处理，防止后续数组下标越界,防止出现分类个数大于实际的点的个数</span></span><br><span class="line">    <span class="keyword">assert</span> k_num &lt; <span class="built_in">len</span>(vectors)</span><br><span class="line">    <span class="comment"># 找出每个向量的维度,平面点的维度为2(x,y)，空间点维度为3(x,y,z)</span></span><br><span class="line">    dim = <span class="built_in">len</span>(vectors[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 获取 vectors 长度大小的随机数据(本例中为1000)</span></span><br><span class="line">    vector_indices = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(vectors)))</span><br><span class="line">    <span class="comment"># 打乱 vector_indices 中的所有数据，能够更好的泛化</span></span><br><span class="line">    shuffle(vector_indices)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算图</span></span><br><span class="line">    <span class="comment"># 我们创建了一个默认的计算流的图用于整个算法中，这样就保证了当函数被多次调用时，始终使用的     # 是默认的图</span></span><br><span class="line">    graph = tf.Graph()</span><br><span class="line">    <span class="keyword">with</span> graph.as_default():</span><br><span class="line">        <span class="comment"># 创建会话</span></span><br><span class="line">        tf.compat.v1.disable_eager_execution()</span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">            <span class="comment"># 构建基本的计算的元素</span></span><br><span class="line">            <span class="comment"># 首先我们需要保证每个中心点都会存在一个Variable矩阵</span></span><br><span class="line">            <span class="comment"># 从现有的点集合中抽取出前 k_num 个数据作为默认的中心点,并且定义为 tf 的变量,</span></span><br><span class="line">            <span class="comment"># 用于后续的中心点的运算</span></span><br><span class="line">            centroids = [tf.Variable((vectors[vector_indices[i]]))<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k_num)]</span><br><span class="line">            <span class="comment"># 创建一个placeholder用于存放各个分类的中心点</span></span><br><span class="line">            centroid_value = tf.placeholder(dtype=tf.float64, shape=[dim])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 给 k_num 个中心点向量进行赋值,cent_assigns 用于保存中心点的位置信息</span></span><br><span class="line">            cent_assigns = []</span><br><span class="line">            <span class="keyword">for</span> centroid <span class="keyword">in</span> centroids:</span><br><span class="line">                cent_assigns.append(tf.assign(centroid, centroid_value))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># assignments 用于保存 sampleNo 个点的经过计算分类后位置</span></span><br><span class="line">            assignments = [tf.Variable(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vectors))]</span><br><span class="line">            <span class="comment"># 存储每个单独的点到 k_num 个分类的最短距离</span></span><br><span class="line">            assignment_value = tf.placeholder(dtype=tf.int32)</span><br><span class="line">            <span class="comment"># cluster_assigns 存储的是每个点到 k_num 个中心点中的最小的一个距离</span></span><br><span class="line">            cluster_assigns = []</span><br><span class="line">            <span class="comment"># 初始化 cluster_assigns</span></span><br><span class="line">            <span class="keyword">for</span> assignment <span class="keyword">in</span> assignments:</span><br><span class="line">                cluster_assigns.append(tf.assign(assignment, assignment_value))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 下面创建用于计算平均值的操作节点</span></span><br><span class="line">            <span class="comment"># 输入的placeholder</span></span><br><span class="line">            mean_input = tf.placeholder(dtype=tf.float64, shape=[<span class="literal">None</span>, dim])</span><br><span class="line">            <span class="comment"># 节点/OP接受输入，并且计算0维度的平均值，如输入的向量列表</span></span><br><span class="line">            mean_op = tf.reduce_mean(mean_input, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 用于计算欧几里得距离的节点 distance = ((x1 - x2)^2 + (y1 - y2)^2)^(1/2)</span></span><br><span class="line">            v1 = tf.placeholder(dtype=tf.float64, shape=[dim])</span><br><span class="line">            v2 = tf.placeholder(dtype=tf.float64, shape=[dim])</span><br><span class="line">            </span><br><span class="line">            euclid_dist = tf.sqrt(tf.reduce_sum(tf.<span class="built_in">pow</span>(tf.subtract(v1, v2), <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 这个OP会决定应该将向量归属到哪个节点</span></span><br><span class="line">            <span class="comment"># 基于向量到中心点的欧几里得距离</span></span><br><span class="line">            <span class="comment"># Placeholder for input</span></span><br><span class="line">            centroid_distances = tf.placeholder(dtype=tf.float64, shape=[k_num])</span><br><span class="line">            <span class="comment"># cluster_assignment 计算 k_num 个中心点的最短欧几里得距离</span></span><br><span class="line">            cluster_assignment = tf.argmin(centroid_distances, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 初始化所有的状态值</span></span><br><span class="line">            init_op = tf.global_variables_initializer()</span><br><span class="line">            <span class="comment"># 初始化所有的变量</span></span><br><span class="line">            sess.run(init_op)</span><br><span class="line">            <span class="comment"># 创建tensor图,并保存在当前的log目录下</span></span><br><span class="line">            tf.summary.FileWriter(<span class="string">&quot;./log&quot;</span>, sess.graph)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 集群遍历</span></span><br><span class="line">            <span class="comment"># 接下来在K-Means聚类迭代中使用最大期望算法。为了简单起见，只让它执行固</span></span><br><span class="line">            <span class="comment"># 定的训练的次数为20次，而不设置一个终止条件</span></span><br><span class="line">            noofiterations = <span class="number">20</span></span><br><span class="line">            <span class="keyword">for</span> iteration_n <span class="keyword">in</span> <span class="built_in">range</span>(noofiterations):</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 期望步骤</span></span><br><span class="line">                <span class="comment"># 基于上次迭代后算出的中心点的位置</span></span><br><span class="line">                <span class="comment"># 1.首先遍历所有的向量,len(vectors)在此案例中值为 sampleNo = 1000</span></span><br><span class="line">                <span class="comment"># 计算每个点到 k_num 个分类中心点的最短距离,并存储在 cluster_assigns 中</span></span><br><span class="line">                <span class="keyword">for</span> vector_n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vectors)):</span><br><span class="line">                    <span class="comment"># 获取第 vector_n 个向量,取值范围在[0,999]</span></span><br><span class="line">                    vect = vectors[vector_n]</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 当前点与 k_num 个分类的中心点欧几里得距离</span></span><br><span class="line">                    distances = [sess.run(euclid_dist, feed_dict=&#123;</span><br><span class="line">                        v1: vect, v2: sess.run(centroid)&#125;) <span class="keyword">for</span> centroid <span class="keyword">in</span> centroids]</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 获取当前点到 k_num 个分类中心点的最短距离,目的是为了后续选择最近距离的中心点</span></span><br><span class="line">                    assignment = sess.run(cluster_assignment, feed_dict=&#123;</span><br><span class="line">                        centroid_distances: distances&#125;)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 接下来为每个向量分配合适的值</span></span><br><span class="line">                    sess.run(cluster_assigns[vector_n], feed_dict=&#123;</span><br><span class="line">                        assignment_value: assignment&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 2.将所有点进行分类</span></span><br><span class="line">                <span class="comment"># 基于上述的期望步骤，计算每个新的中心点的距离从而使集群内的平方和最小</span></span><br><span class="line">                <span class="keyword">for</span> cluster_n <span class="keyword">in</span> <span class="built_in">range</span>(k_num):</span><br><span class="line">                    <span class="comment"># 收集 k_num 个分类中,对应每个分类的数据</span></span><br><span class="line">                    assigned_vects = [vectors[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vectors))</span><br><span class="line">                                      <span class="keyword">if</span> sess.run(assignments[i]) == cluster_n]</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 采用平均值的计算方式重新计算每个分类集群新的中心点</span></span><br><span class="line">                    new_location = sess.run(mean_op, feed_dict=&#123;</span><br><span class="line">                        mean_input: array(assigned_vects)&#125;)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 为 k_num 个分类分配新的中心点</span></span><br><span class="line">                    sess.run(cent_assigns[cluster_n], feed_dict=&#123;</span><br><span class="line">                        centroid_value: new_location&#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回 k_num 个中心节点</span></span><br><span class="line">            centroids = sess.run(centroids)</span><br><span class="line">            <span class="comment"># 返回 k_num 个分组</span></span><br><span class="line">            assignments = sess.run(assignments)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> centroids, assignments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义聚类的个数,并使用kmeans算法去计算</span></span><br><span class="line">k = <span class="number">4</span></span><br><span class="line">center, result = kmeans(srcdata, k)</span><br><span class="line"><span class="built_in">print</span>(np.shape(result))</span><br><span class="line"><span class="comment"># 打印 k 个中心点</span></span><br><span class="line"><span class="built_in">print</span>(center)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理结果,并使用 seaborn 画图</span></span><br><span class="line">res = &#123;<span class="string">&quot;x&quot;</span>: [], <span class="string">&quot;y&quot;</span>: [], <span class="string">&quot;kmeans_res&quot;</span>: []&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">    res[<span class="string">&quot;x&quot;</span>].append(srcdata[i][<span class="number">0</span>])</span><br><span class="line">    res[<span class="string">&quot;y&quot;</span>].append(srcdata[i][<span class="number">1</span>])</span><br><span class="line">    res[<span class="string">&quot;kmeans_res&quot;</span>].append(result[i])</span><br><span class="line"></span><br><span class="line">pd_res = pd.DataFrame(res)</span><br><span class="line">sns.lmplot(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, data=pd_res, fit_reg=<span class="literal">False</span>, height=<span class="number">5</span>, hue=<span class="string">&quot;kmeans_res&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>对聚类出的经纬度数据聚类后，为了方便检测聚类结果，我们直接采用 python 的 matplotlib 库以经 纬度为坐标画出聚类结果，但发现这种方式对于聚类结果的显示并不是很直观，无法发现聚类结果和实 际地形的关联。于是想到使用高德地图的 API，希望可以将聚类结果直接在实际的地图上投影，在参阅 了高德地图官方 API 实例之后，发现其提供的海量点，点聚合可以实现我们的需求。申请成为高德地图 开放平台的个人开发者，得到 key，然后利用其中的 API 进行可视化。如下图所示：</p><p><img src="12.png" alt="12"></p><p><img src="13.png" alt="13"></p><p><img src="14.png" alt="14"></p><p><img src="15.png" alt="15"></p><p><img src="16.png" alt="16"></p><p>可视化后可以发现上海区域地图上呈现若干密集点，通过调整地图的大小，可以调整密集点的大小， 根据需求可以知道不同区域摩拜单车的密集度。这些密集度说明哪些区域会使用更多的摩拜单车，为了 符合人们用车需求应当调整不同区域摩拜单车的数量，才能更好地满足人们的需求。</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0, user-scalable=no, width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>点聚合<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://a.amap.com/jsapi_demos/static/demo-center/css/demo-center.css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.input-card</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">25rem</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.input-card</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">7rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: .<span class="number">7rem</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.input-card</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;map&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>聚合点效果切换<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认样式&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add0&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;addCluster(0)&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;自定义图标&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add1&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;addCluster(1)&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;完全自定义&quot;</span> <span class="attr">id</span>=<span class="string">&quot;add2&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;addCluster(2)&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./china.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://webapi.amap.com/maps?v=1.4.15&amp;key=2b373ec81fe728db4bf6b57baea1138d&amp;plugin=AMap.MarkerClusterer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> cluster, markers = [];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">&quot;container&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">resizeEnable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">center</span>: [<span class="number">105</span>, <span class="number">34</span>],</span></span><br><span class="line"><span class="javascript">        <span class="attr">zoom</span>: <span class="number">4</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        markers.push(<span class="keyword">new</span> AMap.Marker(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">position</span>: points[i][<span class="string">&#x27;lnglat&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span>: <span class="string">&#x27;&lt;div style=&quot;background-color: hsla(180, 100%, 50%, 0.7); height: 24px; width: 24px; border: 1px solid hsl(180, 100%, 40%); border-radius: 12px; box-shadow: hsl(180, 100%, 50%) 0px 0px 1px;&quot;&gt;&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">offset</span>: <span class="keyword">new</span> AMap.Pixel(-<span class="number">15</span>, -<span class="number">15</span>)</span></span><br><span class="line"><span class="javascript">        &#125;))</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> count = markers.length;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _renderClusterMarker = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> factor = <span class="built_in">Math</span>.pow(context.count / count, <span class="number">1</span> / <span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Hue = <span class="number">180</span> - factor * <span class="number">180</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bgColor = <span class="string">&#x27;hsla(&#x27;</span> + Hue + <span class="string">&#x27;,100%,50%,0.7)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fontColor = <span class="string">&#x27;hsla(&#x27;</span> + Hue + <span class="string">&#x27;,100%,20%,1)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> borderColor = <span class="string">&#x27;hsla(&#x27;</span> + Hue + <span class="string">&#x27;,100%,40%,1)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> shadowColor = <span class="string">&#x27;hsla(&#x27;</span> + Hue + <span class="string">&#x27;,100%,50%,1)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.backgroundColor = bgColor;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> size = <span class="built_in">Math</span>.round(<span class="number">30</span> + <span class="built_in">Math</span>.pow(context.count / count, <span class="number">1</span> / <span class="number">5</span>) * <span class="number">20</span>);</span></span><br><span class="line"><span class="javascript">        div.style.width = div.style.height = size + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.border = <span class="string">&#x27;solid 1px &#x27;</span> + borderColor;</span></span><br><span class="line"><span class="javascript">        div.style.borderRadius = size / <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.boxShadow = <span class="string">&#x27;0 0 1px &#x27;</span> + shadowColor;</span></span><br><span class="line"><span class="javascript">        div.innerHTML = context.count;</span></span><br><span class="line"><span class="javascript">        div.style.lineHeight = size + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.color = fontColor;</span></span><br><span class="line"><span class="javascript">        div.style.fontSize = <span class="string">&#x27;14px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.textAlign = <span class="string">&#x27;center&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        context.marker.setOffset(<span class="keyword">new</span> AMap.Pixel(-size / <span class="number">2</span>, -size / <span class="number">2</span>));</span></span><br><span class="line"><span class="javascript">        context.marker.setContent(div)</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    addCluster(<span class="number">2</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">addCluster</span>(<span class="params">tag</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (cluster) &#123;</span></span><br><span class="line"><span class="javascript">            cluster.setMap(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (tag == <span class="number">2</span>) &#123;<span class="comment">//完全自定义</span></span></span><br><span class="line"><span class="javascript">            cluster = <span class="keyword">new</span> AMap.MarkerClusterer(map, markers, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">gridSize</span>: <span class="number">80</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">renderClusterMarker</span>: _renderClusterMarker</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="number">1</span>) &#123;<span class="comment">//自定义图标</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sts = [&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;https://a.amap.com/jsapi_demos/static/images/blue.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">size</span>: <span class="keyword">new</span> AMap.Size(<span class="number">32</span>, <span class="number">32</span>),</span></span><br><span class="line"><span class="javascript">                <span class="attr">offset</span>: <span class="keyword">new</span> AMap.Pixel(-<span class="number">16</span>, -<span class="number">16</span>)</span></span><br><span class="line"><span class="javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;https://a.amap.com/jsapi_demos/static/images/green.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">size</span>: <span class="keyword">new</span> AMap.Size(<span class="number">32</span>, <span class="number">32</span>),</span></span><br><span class="line"><span class="javascript">                <span class="attr">offset</span>: <span class="keyword">new</span> AMap.Pixel(-<span class="number">16</span>, -<span class="number">16</span>)</span></span><br><span class="line"><span class="javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;https://a.amap.com/jsapi_demos/static/images/orange.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">size</span>: <span class="keyword">new</span> AMap.Size(<span class="number">36</span>, <span class="number">36</span>),</span></span><br><span class="line"><span class="javascript">                <span class="attr">offset</span>: <span class="keyword">new</span> AMap.Pixel(-<span class="number">18</span>, -<span class="number">18</span>)</span></span><br><span class="line"><span class="javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;https://a.amap.com/jsapi_demos/static/images/red.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">size</span>: <span class="keyword">new</span> AMap.Size(<span class="number">48</span>, <span class="number">48</span>),</span></span><br><span class="line"><span class="javascript">                <span class="attr">offset</span>: <span class="keyword">new</span> AMap.Pixel(-<span class="number">24</span>, -<span class="number">24</span>)</span></span><br><span class="line"><span class="javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>: <span class="string">&quot;https://a.amap.com/jsapi_demos/static/images/darkRed.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">size</span>: <span class="keyword">new</span> AMap.Size(<span class="number">48</span>, <span class="number">48</span>),</span></span><br><span class="line"><span class="javascript">                <span class="attr">offset</span>: <span class="keyword">new</span> AMap.Pixel(-<span class="number">24</span>, -<span class="number">24</span>)</span></span><br><span class="line"><span class="javascript">            &#125;];</span></span><br><span class="line"><span class="javascript">            cluster = <span class="keyword">new</span> AMap.MarkerClusterer(map, markers, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">styles</span>: sts,</span></span><br><span class="line"><span class="javascript">                <span class="attr">gridSize</span>: <span class="number">80</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//默认样式</span></span></span><br><span class="line"><span class="javascript">            cluster = <span class="keyword">new</span> AMap.MarkerClusterer(map, markers, &#123;<span class="attr">gridSize</span>: <span class="number">80</span>&#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码地址：</p><p><a href="https://github.com/10185102110/HBase">https://github.com/10185102110/HBase</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h2&gt;&lt;p&gt;Ubuntu 14.04&lt;/p&gt;
&lt;h2 id=&quot;实验设备&quot;&gt;&lt;a href=&quot;#实验设备&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Server" scheme="http://10185102110.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>KDD竞赛基准系统</title>
    <link href="http://10185102110.github.io/2021/07/15/KDD%E7%AB%9E%E8%B5%9B%E5%9F%BA%E5%87%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://10185102110.github.io/2021/07/15/KDD%E7%AB%9E%E8%B5%9B%E5%9F%BA%E5%87%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-07-15T11:39:25.000Z</published>
    <updated>2021-07-15T12:55:06.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h2><p>给定作者 ID 和论文 ID，判断该作者是否写了这篇论文。</p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><p><img src="1.png" alt="1"></p><p><img src="2.png" alt="2"></p><p><img src="3.png" alt="3"></p><h2 id="数据集描述"><a href="#数据集描述" class="headerlink" title="数据集描述"></a>数据集描述</h2><ul><li><u>作者数据集</u> : <code>Author.csv</code>。包含作者的编号（Id），名字（Name），单位（affiliation） 信息。相同 的作者可能在 <code>Author.csv</code> 数据集中出现多次，因为作者在不同会议／期刊上发表论文的名字可 能有多个版本。例如：J. Doe, Jane Doe, 和 J. A. Doe 指的均是同一个人。此外，Affiliation 信息可能为空。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">数据类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">Id</td><td style="text-align:left">int</td><td style="text-align:left">作者编号</td></tr><tr><td style="text-align:left">Name</td><td style="text-align:left">string</td><td style="text-align:left">作者名称</td></tr><tr><td style="text-align:left">Affiliation</td><td style="text-align:left">string</td><td style="text-align:left">隶属单位</td></tr></tbody></table></div><ul><li><u>论文数据集</u> : <code>Paper.csv</code>。包含论文的标题(title)，会议／期刊信息, 关键字(keywords)。 同一论文可 能会通过不同的数据来源获取，因此在 <code>Paper.csv</code> 中会存在多个副本。此外， Keyword 信息可能为空。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">数据类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">Id</td><td style="text-align:left">int</td><td style="text-align:left">论文编号</td></tr><tr><td style="text-align:left">Title</td><td style="text-align:left">string</td><td style="text-align:left">论文标题</td></tr><tr><td style="text-align:left">Year</td><td style="text-align:left">int</td><td style="text-align:left">论文年份</td></tr><tr><td style="text-align:left">ConferenceId</td><td style="text-align:left">int</td><td style="text-align:left">论文发表的会议Id</td></tr><tr><td style="text-align:left">JournalId</td><td style="text-align:left">int</td><td style="text-align:left">论文发表的期刊Id</td></tr><tr><td style="text-align:left">Keywords</td><td style="text-align:left">string</td><td style="text-align:left">论文关键字</td></tr></tbody></table></div><ul><li><u>(论文-作者)数据集</u> : <code>PaperAuthor.csv</code>。包含 (论文 Id-作者 Id)对 的信息。该数据集包含 噪声 (noisy)，即存在不正确的(论文 Id-作者 Id)对，意味着 <code>PaperAuthor.csv</code> 包含的(论 文 Id-作者 Id) 对 中的作者 Id 并不一定写了该论文 Id。这是因为，作者名字存在歧义， 可能存在同名的不 同人或作者名字有多个版本（如上面的例子：J. Doe, Jane Doe 和 J. A. Doe 指的均是同一个人）。 此外，Affiliation 信息可能为空。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">数据类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">PaperId</td><td style="text-align:left">int</td><td style="text-align:left">论文编号</td></tr><tr><td style="text-align:left">AuthorId</td><td style="text-align:left">int</td><td style="text-align:left">作者编号</td></tr><tr><td style="text-align:left">Name</td><td style="text-align:left">string</td><td style="text-align:left">作者名称</td></tr><tr><td style="text-align:left">Affiliation</td><td style="text-align:left">string</td><td style="text-align:left">隶属单位</td></tr></tbody></table></div><ul><li><u>会议和期刊数据集</u> ：<code>Conference.csv, Journal.csv</code>。每篇论文发表在会议或者期刊上。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">数据类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">Id</td><td style="text-align:left">int</td><td style="text-align:left">会议/期刊编号</td></tr><tr><td style="text-align:left">ShortName</td><td style="text-align:left">string</td><td style="text-align:left">简称</td></tr><tr><td style="text-align:left">Fullname</td><td style="text-align:left">string</td><td style="text-align:left">全称</td></tr><tr><td style="text-align:left">Homepage</td><td style="text-align:left">string</td><td style="text-align:left">主页</td></tr></tbody></table></div><ul><li><p>共同作者的信息：<code>coauthor.json</code>。该文件内容是从 <code>PaperAuthor.csv</code> 中抽取出来共同作者的信息， 该文件的生成可以通过运行 <code>model_trainer</code> 下的 <code>coauthor.py</code> 。</p><p><code>coauthor.json</code> 文件的内容格式形如： {“A 作者 ID”: {“B1 作者 ID”: 合作次数, “B2 作者 ID”: 合作次数}} 第一层的 key 为作者的 ID，对应的 value 为共同作者信息（同样为 key-value 形式，key 为 共 同作者的 ID，value 为合作次数）。 </p><p>目前，<code>coauthor.json</code> 文件给出每个作者合作频率最高的 10 个共同作者，该文件的格式为 json。 可以通过修改 <code>coauthor.py</code> 中 <code>get_top_k_coauthors (paper_author_path, k, to_file)</code>方法中 的 k 值 来获取最高的 k 个共同作者，即 top k： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="number">10</span>  </span><br><span class="line">get_top_k_coauthors(os.path.join(config.DATASET_PATH,<span class="string">&quot;PaperAuthor.csv&quot;</span>),  k, os.path.join(config.DATA_PATH, <span class="string">&quot;coauthor.json&quot;</span>)) </span><br></pre></td></tr></table></figure><p>例 如 ， 获 取 作 者 ID 为 ‘742736’ 的 共 同 作 者 信 息 ， 可 以 通 过 以 下 代 码 获 取 ， coauthor[“742736”] 值对应的是 ID 为 ‘742736’ 作者的共同作者信息。u’823230’: 3 表 示 ID 为 ‘742736’ 的作者 与 ID 为 ‘823230’ 的作者共合作过 3 次： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> json  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coauthor = json.load(<span class="built_in">open</span>(<span class="string">&quot;coauthour.json&quot;</span>))  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coauthor[<span class="string">&quot;742736&quot;</span>] &#123;<span class="string">u&#x27;823230&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;647433&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;1691202&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;891164&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;1910552&#x27;</span>:  <span class="number">3</span>, <span class="string">u&#x27;607259&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;2182818&#x27;</span>: <span class="number">7</span>, <span class="string">u&#x27;1355775&#x27;</span>: <span class="number">4</span>, <span class="string">u&#x27;2097154&#x27;</span>: <span class="number">3</span>, <span class="string">u&#x27;1108518&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><u>论文&amp;作者 pair 字符串信息</u> ：<code>paperIdAuthorId_to_name_and_affiliation.json</code>。该文件内容是从 <code>Paper-Author.csv</code> 提取的，该文件可以通过运行 <code>model_trainer</code> 文件夹下的<code>stringDistance.py</code> 来获取。</p><p>将 <code>Paper-Author.csv</code> 中相同的论文 ID 和作者 ID 对的 name 和 affiliation 合并，文件内容为 key-value 形式， key 为 论 文 ID 和作者 ID 对 ： ‘paperid|authorid’, value 为 {“name”:  “name1##name2##name3”, “affiliation”: “aff1##aff2##aff3”}。 {“A 作者 ID”: {“B1 作者 ID”: 合作次 数, “B2 作者 ID”: 合作次数}} </p><p>例如，获取 ID 为 ‘1156615’ 的论文和 ID 为 ‘2085584’ 的作者 name 和 affiliation 信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa_name_aff = json.load(<span class="built_in">open</span>(<span class="string">&quot;paperIdAuthorId_to_name_and_affiliation.json&quot;</span>)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pa_name_aff[<span class="string">&#x27;1156615|2085584&#x27;</span>] </span><br><span class="line">&#123;<span class="string">u&#x27;affiliation&#x27;</span>: <span class="string">u&#x27;Huawei##Microsoft Research Asia&#x27;</span>, <span class="string">u&#x27;name&#x27;</span>: <span class="string">u&#x27;Hang Li##Hang Li&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p><u>训 练 集</u>  ：<code>Train.csv</code> 。 ComfirmedPaperIds 列 对 应 的 表 示 该 作 者 写 了 这 些 论 文 的 列 表 ， DeletedPaperIds 列对应的表示该作者没有写这些论文论文。</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">数据类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">AuthorId</td><td style="text-align:left">int</td><td style="text-align:left">作者ID</td></tr><tr><td style="text-align:left">ComfirmedPaperIds</td><td style="text-align:left">string</td><td style="text-align:left">以空格分割的论文列表</td></tr><tr><td style="text-align:left">DeletedPaperIds</td><td style="text-align:left">string</td><td style="text-align:left">以空格分割的论文列表</td></tr></tbody></table></div><ul><li><u>验证集</u> ： <code>Valid.csv</code>文件的格式如下：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">数据类型</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">AuthorId</td><td style="text-align:left">int</td><td style="text-align:left">作者ID</td></tr><tr><td style="text-align:left">PaperIds</td><td style="text-align:left">string</td><td style="text-align:left">以空格分割的论文列表，待测的论文列表</td></tr></tbody></table></div><ul><li><p><u>测试集</u> ：<code>Test.csv</code>。测试集 <code>Test.csv</code>文件的格式与验证集 <code>Valid.csv</code> 格式相同。</p></li><li><p>数据集的统计：</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">数据集</th><th style="text-align:left">（作者-论文）对个数</th></tr></thead><tbody><tr><td style="text-align:left">训练集</td><td style="text-align:left">11263</td></tr><tr><td style="text-align:left">验证集</td><td style="text-align:left">2347</td></tr><tr><td style="text-align:left">测试集</td><td style="text-align:left">1300</td></tr></tbody></table></div><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>根据任务的目标，从给定的数据集合中构造出训练正负样本/测试样本；</li><li>从给定的数据集合中，对构造出的训练样本/测试样本进行特征的设计和抽取，并针对每个训练样本/测试样本生成相应的特征集合；</li><li>选择分类算法，在训练样本生成的特征集合上构造分类器；</li><li>使用分类器对测试样本的特征集合进行预测，并将分类器的预测结果转换为任务要求的提交格式。</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ol><li><p>构造训练/测试的正负样本</p><ul><li>构建训练样本。 系统从 <code>data/dataset/train_set/Train.csv</code> 中构建训练集的正负样本。 <ul><li>将 authorId 与 ConfirmedPaperIds 中的每个 paperId 组合，作为正样本（label 为 1）； </li><li>将 authorId 与 DeletedPaperIds 中的每个 paperId 组合，作为负样本（label 为 0）。</li></ul></li><li>构建测试样本。系统从 <code>data/dataset/valid_set/Valid.csv</code> 或 <code>data/dataset/test_set/Test.csv</code>  中构建测试样本。 由于测试集的类标是待预测的，这里直接将其赋值为 -1。</li></ul></li><li><p>构造特征</p><p>分 别 为 每 一 个 训 练 ／ 测 试 样 本 设 计 并 抽 取 特 征 。 特 征 抽 取 函 数 位 于 <code>model_trainer/feature_functions.py</code> 中。</p><p>目前基准系统实现的特征有：</p><ul><li><p>共作者特征（共作者的相似度特征） </p><p>一篇论文会存在多个作者，根据 <code>PaperAuthor.csv</code> 统计每一个作者的 top 10（也可以是 top 20 或者其他 top K）的共作者 coauthor（本系统从 <code>PaperAuthor.csv</code> 获取了每个作 者 top 10 的 共作者，保存在 <code>coauthor.json</code> 文件中。）。对于一个作者论文对（aid，pid）， 计算 PaperId 为 pid 的论文作者是否出现在 AuthorId 为 aid 的作者的 top 10 coauthor  中。有两种计算方式：</p><ul><li>计算 PaperId 为 pid 的论文的作者在 AuthorId 为 aid 的作者的 top 10 coauthor 中出现的 人（个）数，作为一个特征。</li><li>计算 PaperId 为 pid 的论文的作者，与在 AuthorId 为 aid 的作者的 top 10 coauthor  中的 作者的合作次数进行累加，将累加后的次数作为一个特征。</li></ul></li><li><p>字符串距离特征（计算作者名字和单位相似度特征）</p><p>假设当前的作者论文对是(aid,pid), 从 <code>paperIdAuthorId_to_name_and_affiliation.json</code>  里得到 的 name 串和 affiliation 串分别为 name1##name2##name3, aff1##aff2##aff3,  根据 aid 从 <code>Author.csv</code> 表找到的 name 和 affliction 分别为 name-a，affliction-a，这样 我们可以计算字符串的距离。</p><p>特征计算方式有两种：</p><ul><li>计算 name-a 与,name1##name2##name3 的距离；类似地，计算 affliction-a  和,aff1##aff2##aff3 的距离。</li><li>分别计算 name-a 与 name1，name2 和 name3 的各自距离，然后对这三个距 离取平 均；类似地，计算 affliction-a 和,aff1，aff2，aff3 的平均距离。</li></ul><p>距离（相似度）的度量实现以下四种：</p><ul><li>编辑距离</li><li>最长公共子序列（LCS）</li><li>最长公共子串（LSS）</li><li>余弦相似度</li></ul></li><li><p>作者 aid 之前发表的论文的 journal 和 conference，与当前的论文 pid 的 journal 和 conference 之间的相似度。</p></li><li><p>论文的 keyword 相似度</p><p>作者 A 写过的论文的 keyword 构成一个集合 X，一篇论文 B 的 keyword 构成一个集合 Y， 这里 的 keyword 指的是论文的 title 和 keyword 分词后得到的单词，对于一个作者论文对（A， B） 计算他们的 keyword 的交集或者相似度：X∩Y。 每个单词可以计算类似于 tf-idf 的分数， 最后 把属于 X∩Y 的单词的分数累加起来作为一维特征。</p></li></ul></li><li><p>分类器选择</p><p>每一种分类器，对应于一个类（class），目前系统实现的分类器有：</p><ul><li>Decision Tree</li><li>Naive Bayes</li><li>KNN</li><li>SVM</li><li>Logister Regreation</li><li>Random Forest</li><li>AdaBoost</li><li>VotingClassifier</li></ul></li><li><p>数据预处理</p><p>主要是数据清洗和集成。</p></li></ol><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>经过多次实验，发现用了 boost 思想的 adaboost，和 bagging 思想的 vote 准确率是最高的。</p><p><img src="4.png" alt="4"></p><p>代码地址：</p><p><a href="https://github.com/10185102110/KDD/tree/main/KDD_Benchmark">https://github.com/10185102110/KDD/tree/main/KDD_Benchmark</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验任务&quot;&gt;&lt;a href=&quot;#实验任务&quot; class=&quot;headerlink&quot; title=&quot;实验任务&quot;&gt;&lt;/a&gt;实验任务&lt;/h2&gt;&lt;p&gt;给定作者 ID 和论文 ID，判断该作者是否写了这篇论文。&lt;/p&gt;
&lt;h2 id=&quot;目录介绍&quot;&gt;&lt;a href=&quot;#目录介绍</summary>
      
    
    
    
    
    <category term="数据挖掘" scheme="http://10185102110.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>基于GaussDB的招聘与就业信息管理系统</title>
    <link href="http://10185102110.github.io/2021/07/12/%E5%9F%BA%E4%BA%8EGaussDB%E7%9A%84%E6%8B%9B%E8%81%98%E4%B8%8E%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://10185102110.github.io/2021/07/12/%E5%9F%BA%E4%BA%8EGaussDB%E7%9A%84%E6%8B%9B%E8%81%98%E4%B8%8E%E5%B0%B1%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-07-12T08:24:40.000Z</published>
    <updated>2021-07-12T09:03:04.015Z</updated>
    
    <content type="html"><![CDATA[<p>基于云数据库 GaussDB(for MySQL)实现，使用华为云账号进行操作。</p><h2 id="系统描述"><a href="#系统描述" class="headerlink" title="系统描述"></a>系统描述</h2><p>大学毕业生要就业，企业要吸收新鲜血液，学校作为两者之间的桥梁，需要进行信息的集成和管理，便于对毕业生就业与企业招聘信息进行管理和调研。 </p><p>本系统主要面对三种用户，学校管理机构、毕业生、企业。 </p><ul><li><p>管理机构人员可以对本校毕业生、面向本校的招聘会和参会企业的基本信息进行查询和修改，同时对毕业生参会、面试、聘用情况进行查询， 最后获得企业用人倾向和毕业生择业倾向的统计分析结果。 </p></li><li><p>毕业生可以对个人信息修改，对企业和招聘会的信息进行查询。 </p></li><li><p>企业可以对本企业信息和招聘会投递岗位信息进行修改和查询。 </p></li></ul><p>本系统集成了学校、毕业生、企业三方信息，便于学生了解和参与本校与企业合作提供的招聘会，同时方便学校做信息调研。</p><h2 id="应用程序功能"><a href="#应用程序功能" class="headerlink" title="应用程序功能"></a>应用程序功能</h2><p>(1) 对所有用户开放：</p><p> 招聘会基本信息的查询 </p><p>招聘会参会企业的查询</p><p> (2) 对学生开放： </p><p>自己基本信息的编辑 </p><p>自己学业信息的编辑 </p><p>报名招聘会 </p><p>(3) 对企业开放： </p><p>本企业信息的编辑 </p><p>毕业生的面试和聘用情况的录入</p><p> (4) 对学校开放： </p><p>招聘与就业信息的查询、统计和分析</p><h2 id="系统-rm-E-R-图"><a href="#系统-rm-E-R-图" class="headerlink" title="系统 $\rm{E-R}$ 图"></a>系统 $\rm{E-R}$ 图</h2><p><img src="1.png" alt="1"></p><h2 id="关系模式设计"><a href="#关系模式设计" class="headerlink" title="关系模式设计"></a>关系模式设计</h2><p>根据概念结构设计得到的 E-R 图和转换规则，得到如下关系模式（主键用下 划线标出，外键予以说明）：</p><ul><li>基本信息：学号、姓名、籍贯、出生日期、性别、身份证号、政治面貌、 民族、婚姻状况、户口所在地、联系电话、电子邮箱。 </li><li>学业信息：学号、学院、专业、最高学历、均绩、英语水平、计算机水平、普通话水平、实习经历、竞赛经历、项目经历。学号外键参考基本信息。 </li><li>招聘会：编号、名称、日期、地址。 </li><li>企业：编号、名称、类型、社会信用代码、城市、邮政代码、联系地址。 </li><li>参会：学号、招聘会编号。学号外键参考基本信息，招聘会编号外键参考招聘会。 </li><li>招聘信息包括：招聘会编号、企业编号、岗位、人数、薪资。 招聘会编号外键参考招聘会，企业编号外键参考企业。 </li><li>面试： 学号、企业编号、岗位、聘用、薪资。学号外键参考基本信息， 企业编号外键参考企业。 </li><li>账户：账号、密码、权限。</li></ul><h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><video src="http://qw4inwd8e.hd-bkt.clouddn.com/video/%E7%89%9F%E8%83%9C%E6%9D%B0_%E7%99%BD%E5%A3%AB%E5%86%9B_%E9%99%88%E5%89%91%E9%9D%92%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E5%B1%95%E7%A4%BA.mp4" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"> your browser does not support the video tag </video><p>代码地址：</p><p><a href="https://github.com/10185102110/Recruitment-and-employment-information-management-system">10185102110/Recruitment-and-employment-information-management-system (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于云数据库 GaussDB(for MySQL)实现，使用华为云账号进行操作。&lt;/p&gt;
&lt;h2 id=&quot;系统描述&quot;&gt;&lt;a href=&quot;#系统描述&quot; class=&quot;headerlink&quot; title=&quot;系统描述&quot;&gt;&lt;/a&gt;系统描述&lt;/h2&gt;&lt;p&gt;大学毕业生要就业，企业要吸收</summary>
      
    
    
    
    <category term="MySQL" scheme="http://10185102110.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://10185102110.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>基于openpose的手势识别</title>
    <link href="http://10185102110.github.io/2021/06/13/%E5%9F%BA%E4%BA%8Eopenpose%E7%9A%84%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB/"/>
    <id>http://10185102110.github.io/2021/06/13/%E5%9F%BA%E4%BA%8Eopenpose%E7%9A%84%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB/</id>
    <published>2021-06-13T07:31:03.000Z</published>
    <updated>2021-06-13T09:07:37.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多视图引导的手部关键点检测"><a href="#多视图引导的手部关键点检测" class="headerlink" title="多视图引导的手部关键点检测"></a>多视图引导的手部关键点检测</h3><p>作者提出了一种称为 Multiview Bootstrapping 的手部关键点检测迭代改进算法。</p><h4 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h4><p>首先，采用少量标注的人手部关键点图像数据集训练网络，用31个高清摄像头从不同的视角对人手部进行拍摄，</p><p>将拍摄图像送入手部关键点检测器，初步得到粗略的关键点检测结果，再将这些关键点根据摄像机位姿构建三角，</p><p>得到关键点的3D位置，然后将计算得到的3D点位置重投影到每一幅不同视角的2D图像，最后用这些2D图像和关</p><p>键点进一步训练网络，经过几次迭代就能得到较为精确的手部关键点检测模型。</p><h4 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h4><p>(1) 定义一个检测器d，I表示图像，$X_p$表示预测关键点坐标，$C_p$表示置信度，P表示点的个数；</p><p>(2) 对于初始化训练集$T_0$：f表示图像帧，每帧$N_0$个视图，y表示真实标签；</p><p>(3) 初始化检测器d；</p><p>(4) 对于未标定数据集$T_1$，用$d_0$进行预测标记，得到检测器$d_1$。用$d_0$标记$T_1$时需要基于多视图几何进行监督，至</p><p>少存在2个视图检测成功，才能保证$T_1$中不包含$T_0$已经存在的信息；</p><p>(5) 预测每一个视图；</p><p>(6) 最小化重投影误差，三角化3D关键点；</p><p>(7) 根据置信度的和对视图排序，只选择成功的视图进行三维重建；</p><p>(8) 重投影到失败视图，生成N帧视图，用于迭代训练检测器。</p><script type="math/tex; mode=display">\begin{align*}  & d(\rm{I})\rightarrow \{(X_p,C_p)\ \rm{for}\ \ p \in [1\dots\it{P}\rm{]}\}\tag{1}\\  & T_0:=\{(I^f,\{y_p^f\})\ \rm{for}\ f\in[1\dots \it{N_0}\rm{]}\}\tag{2}\\  & d_0\leftarrow \rm{train}(T_0)\tag{3}\\  & d_1\leftarrow \rm{train}(T_0\cup T_1)\tag{4}\\  & D\leftarrow\{d_i(\rm{I}_v^f)\ \rm{for}\ \it{v}\in\rm{[}1\dots V]\}\tag{5}\\  & \rm{X}_p^f=arg\ \underset{X}min\sum\limits_{v\in I_p^f}||\it{P}_v\rm{(X)}-X_p^v||_2^2\tag{6}\\  & \rm{score}(\{X_p^f\})=\sum\limits_{p\in[1\dots P]}\sum\limits_{v\in I_p^f}c_p^v\tag{7}\\  & T_{i+1}=\{\rm{(I_v^{Sn}},\{P_v(X_p^{Sn}):v\in [1\dots V],p\in [1\dots P]\})\ for\ n\in[1\dots N\}\tag{8}\end{align*}</script><p><img src="2.png" alt=""></p><p><img src="0.png" alt=""></p><h4 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h4><p>采用CPM (Convolutional Pose Machines) 网络：</p><p>CPM是由全卷积网络组成的序列化结构，卷积网络直接在前一阶段的置信图操作，输出越来越精细化的关节点位</p><p>置估计结果。</p><p><img src="1.png" alt=""></p><p>流程：</p><ul><li>基于每个尺度，计算网络预测的各关节点的热力图</li><li>累加各个关节点对应的所有尺度的热力图，取最大值所在位置为关节点位置</li></ul><p><img src="3.png" alt=""></p><p>文中提出的模型可生成22个关键点，其中21个点是人手部的，第22个点代表背景。</p><p><img src="line.png" alt=""></p><p><img src="dot.png" alt=""></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protoFile = <span class="string">r&quot;C:\Users\AveBai\Desktop\model\pose_deploy.prototxt&quot;</span></span><br><span class="line">weightsFile = <span class="string">r&quot;C:\Users\AveBai\Desktop\model\pose_iter_102000.caffemodel&quot;</span></span><br><span class="line">nPoints = <span class="number">22</span></span><br><span class="line">POSE_PAIRS = [ [<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">0</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">6</span>,<span class="number">7</span>],[<span class="number">7</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">9</span>],[<span class="number">9</span>,<span class="number">10</span>],[<span class="number">10</span>,<span class="number">11</span>],[<span class="number">11</span>,<span class="number">12</span>],[<span class="number">0</span>,<span class="number">13</span>],[<span class="number">13</span>,<span class="number">14</span>],[<span class="number">14</span>,<span class="number">15</span>],[<span class="number">15</span>,<span class="number">16</span>],[<span class="number">0</span>,<span class="number">17</span>],[<span class="number">17</span>,<span class="number">18</span>],[<span class="number">18</span>,<span class="number">19</span>],[<span class="number">19</span>,<span class="number">20</span>] ]</span><br><span class="line"></span><br><span class="line">threshold = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">input_source = <span class="string">r&quot;C:\Users\AveBai\Desktop\img\1.mp4&quot;</span></span><br><span class="line">cap = cv2.VideoCapture(input_source)</span><br><span class="line">hasFrame, frame = cap.read()</span><br><span class="line"></span><br><span class="line">frameWidth = frame.shape[<span class="number">1</span>]</span><br><span class="line">frameHeight = frame.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">aspect_ratio = frameWidth/frameHeight</span><br><span class="line"></span><br><span class="line">inHeight = <span class="number">368</span></span><br><span class="line">inWidth = <span class="built_in">int</span>(((aspect_ratio*inHeight)*<span class="number">8</span>)//<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">vid_writer = cv2.VideoWriter(<span class="string">r&#x27;C:\Users\AveBai\Desktop\res\output.avi&#x27;</span>,cv2.VideoWriter_fourcc(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;G&#x27;</span>), <span class="number">15</span>, (frame.shape[<span class="number">1</span>],frame.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">net = cv2.dnn.readNetFromCaffe(protoFile, weightsFile)</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line">    t = time.time()</span><br><span class="line">    hasFrame, frame = cap.read()</span><br><span class="line">    frameCopy = np.copy(frame)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasFrame:</span><br><span class="line">        cv2.waitKey()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    inpBlob = cv2.dnn.blobFromImage(frame, <span class="number">1.0</span> / <span class="number">255</span>, (inWidth, inHeight),    <span class="comment"># 图像归一化</span></span><br><span class="line">                              (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), swapRB=<span class="literal">False</span>, crop=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    net.setInput(inpBlob)  <span class="comment"># 将图片输入到caffe网络中</span></span><br><span class="line"></span><br><span class="line">    output = net.forward()   <span class="comment"># 前向传播</span></span><br><span class="line"></span><br><span class="line">    points = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nPoints):</span><br><span class="line">        <span class="comment"># 置信度</span></span><br><span class="line">        probMap = output[<span class="number">0</span>, i, :, :]</span><br><span class="line">        probMap = cv2.resize(probMap, (frameWidth, frameHeight))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 精确定位</span></span><br><span class="line">        minVal, prob, minLoc, point = cv2.minMaxLoc(probMap)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> prob &gt; threshold :</span><br><span class="line">            cv2.circle(frameCopy, (<span class="built_in">int</span>(point[<span class="number">0</span>]), <span class="built_in">int</span>(point[<span class="number">1</span>])), <span class="number">6</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), thickness=-<span class="number">1</span>, lineType=cv2.FILLED)</span><br><span class="line">            cv2.putText(frameCopy, <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i), (<span class="built_in">int</span>(point[<span class="number">0</span>]), <span class="built_in">int</span>(point[<span class="number">1</span>])), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">.8</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, lineType=cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">            points.append((<span class="built_in">int</span>(point[<span class="number">0</span>]), <span class="built_in">int</span>(point[<span class="number">1</span>])))</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            points.append(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> POSE_PAIRS:</span><br><span class="line">        partA = pair[<span class="number">0</span>]</span><br><span class="line">        partB = pair[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> points[partA] <span class="keyword">and</span> points[partB]:</span><br><span class="line">            cv2.line(frame, points[partA], points[partB], (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>, lineType=cv2.LINE_AA)</span><br><span class="line">            cv2.circle(frame, points[partA], <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=-<span class="number">1</span>, lineType=cv2.FILLED)</span><br><span class="line">            cv2.circle(frame, points[partB], <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=-<span class="number">1</span>, lineType=cv2.FILLED)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;time a frame = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - t))</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Output&#x27;</span>, frame)</span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> key == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;total time= &#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - t))</span><br><span class="line"></span><br><span class="line">    vid_writer.write(frame)</span><br><span class="line"></span><br><span class="line">vid_writer.release()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h4><div class="bilibili"><iframe src="//player.bilibili.com/player.html?aid=546123557&bvid=BV1uq4y1L7X9&cid=353519444&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><p>Hand Keypoint Detection in Single Images using Multiview Bootstrapping</p><p><a href="https://arxiv.org/pdf/1704.07809.pdf">https://arxiv.org/pdf/1704.07809.pdf</a></p></li><li><p>Convolutional Pose Machines</p><p><a href="https://arxiv.org/pdf/1602.00134.pdf">https://arxiv.org/pdf/1602.00134.pdf</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多视图引导的手部关键点检测&quot;&gt;&lt;a href=&quot;#多视图引导的手部关键点检测&quot; class=&quot;headerlink&quot; title=&quot;多视图引导的手部关键点检测&quot;&gt;&lt;/a&gt;多视图引导的手部关键点检测&lt;/h3&gt;&lt;p&gt;作者提出了一种称为 Multiview Bootst</summary>
      
    
    
    
    <category term="openpose" scheme="http://10185102110.github.io/categories/openpose/"/>
    
    
    <category term="openpose" scheme="http://10185102110.github.io/tags/openpose/"/>
    
  </entry>
  
  <entry>
    <title>C指针</title>
    <link href="http://10185102110.github.io/2021/05/16/C%E6%8C%87%E9%92%88/"/>
    <id>http://10185102110.github.io/2021/05/16/C%E6%8C%87%E9%92%88/</id>
    <published>2021-05-16T13:34:37.000Z</published>
    <updated>2021-06-13T07:53:36.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复杂类型的分析示例"><a href="#复杂类型的分析示例" class="headerlink" title="复杂类型的分析示例"></a>复杂类型的分析示例</h2><p>从变量名处起，根据运算符优先级结合，一步一步分析。</p><p>下面从简单的类型开始慢慢分析。</p><ul><li><p>int p</p><p>这是一个普通的整型变量。</p></li><li><p>int *p</p><p>首先从 P 处开始，先与*结合，说明 P 是一个指针，然后再与 int 结合，说明指针所指向内容的类型为 int 型。所以 P 是一个返回整型数据的指针。</p></li><li><p>int p[3]</p><p>首先从 P 处开始，先与[]结合，说明 P 是一个数组，然后与 int 结合，说明数组里的元素是整型的，所以 P 是一个由整型数据组成的数组。</p></li><li><p>int *p[3]</p><p>首先从 P 处开始，先与[]结合,因为其优先级比*高，所以 P 是一个数组，然后再与*结合，说明数组里的元素是指针类型，然后再与 int 结合，说明指针所指向的内容的类型是整型的，所以 P 是一个由返回整型数据的指针所组成的数组。</p></li><li><p>int (*p)[3]</p><p>首先从 P 处开始，先与*结合，说明 P 是一个指针，然后与[]结合(与”()”这步可以忽略，只是为了改变优先级)，说明指针所指向的内容是一个数组，然后再与 int 结合，说明数组里的元素是整型的。所以 P 是一个指向由整型数据组成的数组的指针。</p></li><li><p>int **p</p><p>首先从 P 开始，先与*结合，说是 P 是一个指针，然后再与*结合，说明指针所指向的元素是指针，然后再与 int 结合，说明该指针所指向的元素是整型数据。</p></li><li><p>int p(int)</p><p>从 P 处起，先与()结合，说明 P 是一个函数，然后进入()分析，说明该函数有一个整型变量的参数，然后再与外面的 int 结合，说明函数的返回值是一个整型数据。</p></li><li><p>int (*p)(int)</p><p>从 P 处开始，先与指针结合，说明 P 是一个指针，然后与()结合,说明指针指向的是一个函数，然后再与()里的 int 结合，说明函数有一个 int 型的参数，再与最外层的 int 结合，说明函数的返回类型是整型，所以 P 是一个指向有一个整型参数且返回类型为整型的函数的指针。</p></li><li><p>int *(*p(int))[3]</p><p>从 P 开始，先与()结合，说明 P 是一个函数，然后进入()里面,与 int 结合,说明函数有一个整型变量参数,然后再与外面的*结合,说明函数返回的是一个指针，然后到最外面一层，先与[]结合，说明返回的指针指向的是一个数组，然后再与*结合，说明数组里的元素是指针，然后再与 int 结合，说明指针指向的内容是整型数据。所以 P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数。</p></li></ul><h2 id="细说指针"><a href="#细说指针" class="headerlink" title="细说指针"></a>细说指针</h2><p>指针是一个特殊的变量，存储的数值被解释为内存里的一个地址。 </p><p>搞清楚指针的四方面的内容</p><ul><li>指针的类型</li><li>指针所指向的类型</li><li>指针的值或者叫指针所指向的内存区</li><li>指针本身所占据的内存区。</li></ul><p>声明几个指针做例子：</p><p>(1) int*ptr;</p><p>(2) char*ptr;</p><p>(3) int**ptr;</p><p>(4) int(*ptr)[3];</p><p>(5) int*(*ptr)[4];</p><h4 id="指针的类型"><a href="#指针的类型" class="headerlink" title="指针的类型"></a>指针的类型</h4><p>只要把指针声明语句里的指针名字去掉，剩下的部分就是这个指针的类型。</p><p>(1) int<em>ptr;     //指针的类型是 int\</em></p><p>(2) char*ptr;     //指针的类型是 char*</p><p>(3) int**ptr;     //指针的类型是 int**</p><p>(4) int(*ptr)[3];   //指针的类型是 int(*)[3]</p><p>(5) int*(*ptr)[4];   //指针的类型是 int*(*)[4]</p><h4 id="指针所指向的类型"><a href="#指针所指向的类型" class="headerlink" title="指针所指向的类型"></a>指针所指向的类型</h4><p>把指针声明语句中的指针名字和名字左边的指针声明符*去掉，剩下的就是指针所指向的类型。</p><p>(1) int*ptr;       //指针所指向的类型是 int</p><p>(2) char*ptr;     //指针所指向的的类型是 char</p><p>(3) int**ptr;     //指针所指向的的类型是 int*</p><p>(4) int(*ptr)[3];    //指针所指向的的类型是 int()[3]</p><p>(5) int*(*ptr)[4];   //指针所指向的的类型是 int*()[4]</p><h4 id="指针的值"><a href="#指针的值" class="headerlink" title="指针的值"></a>指针的值</h4><p>或者叫指针所指向的内存区或地址，在 32 位程序里，所有类型的指针的值都是一个 32 位整数。指针所指向的内存区就是从指针的值所代表的那个内存地址开始，长度为 sizeof(指针所指向的类型)的一片内存区。所以说一个指针的值是 XX，相当于说该指针指向了以 XX 为首地址的一片内存区域；说一个指针指向了某块内存区域，相当于说该指针的值是这块内存区域的首地址。</p><h4 id="指针本身所占据的内存区"><a href="#指针本身所占据的内存区" class="headerlink" title="指针本身所占据的内存区"></a>指针本身所占据的内存区</h4><p>只要用函数 sizeof(指针的类型)测一下就知道。在 32 位平台里，指针本身占据了 4 个字节的长度。</p><h4 id="指针的算术运算"><a href="#指针的算术运算" class="headerlink" title="指针的算术运算"></a>指针的算术运算</h4><p>指针可以加上或减去一个整数。指针这种运算的意义和通常的数值的加减运算的意义是不一样的，以单元为单位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> *ptr=(<span class="keyword">int</span> *)a; <span class="comment">//强制类型转换并不会改变 a 的类型</span></span><br><span class="line">ptr++;</span><br></pre></td></tr></table></figure><p>在例一中，指针 ptr 的类型是 int*，它指向的类型是 int，它被初始化为指向整型变量 a。第 3 句中，指针 ptr 加 1，编译器是这样处理的：它把指针 ptr 的值加上 sizeof(int)，在 32 位程序中，是被加上 4，因为在 32 位程序中，int 占 4 个字节。原来 ptr 是指向数组 a 的第 0 号 单元开始的四个字节，此时指向了数组 a 中从第 4 号单元开始的四个字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *ptr=<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    (*ptr)++;</span><br><span class="line">    ptr++；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例二将整型数组中各个单元的值加 1。由于每次循环都将指针 ptr 加 1 个单元，所以每次循环都能访问数组的下一个单元。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>]=<span class="string">&quot;You_are_a_girl&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> *ptr=(<span class="keyword">int</span> *)a;</span><br><span class="line">ptr+=<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>例三中ptr 被加上了 5，编译器是这样处理的：将指针 ptr 的 值加上 5 乘 sizeof(int)，在 32 位程序中就是加上了 5 $\times$ 4=20，超出范围。虽然这种情况在应用上会出问题，但在语法上却是可以的，体现出指针的灵活性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例四</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">20</span>]=<span class="string">&quot; You_are_a_man&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *p=a;</span><br><span class="line"><span class="keyword">char</span> **ptr=&amp;p;</span><br><span class="line">ptr++;</span><br></pre></td></tr></table></figure><p>ptr 的类型是 char **，指向的类型是一个 char *类型，该指向的地址就是p的地址(&amp;p)，当执行 ptr++​时，会使指针加一个 sizeof(char *)，即&amp;p+4。</p><p>两个指针不能进行加法运算，可以进行减法操作，但类型须相同，一般用在数组。</p><h2 id="运算符-amp-和"><a href="#运算符-amp-和" class="headerlink" title="运算符&amp;和*"></a>运算符&amp;和*</h2><p>&amp;a 的运算结果是一个指针，指针的类型是 a 的类型加个<em>，指针所指向的类型是 a 的类型，指针所指向的地址是 a 的地址。 </em></p><p>*p 的结果是 p 所指向的东西，它的类型是 p 指向的类型，占用的地址是 p 所指向的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">12</span>; <span class="keyword">int</span> b; <span class="keyword">int</span> *p; <span class="keyword">int</span> **ptr;</span><br><span class="line">p=&amp;a; <span class="comment">//&amp;a的结果是一个指针，类型是int*，指向的类型是int，指向的地址是a的地址。</span></span><br><span class="line">*p=<span class="number">24</span>; <span class="comment">//*p 的类型是 int，占用的地址是 p 所指向的地址，显然，*p 就是变量 a。</span></span><br><span class="line">ptr=&amp;p; <span class="comment">//&amp;p 的结果是个指针，该指针的类型是 p 的类型加个*，</span></span><br><span class="line">        <span class="comment">//在这里是 int **。该指针所指向的类型是 p 的类型，这</span></span><br><span class="line">        <span class="comment">//里是 int*。该指针所指向的地址就是指针 p 自己的地址。</span></span><br><span class="line">*ptr=&amp;b;<span class="comment">//*ptr 是个指针，&amp;b 的结果也是个指针，且这两个指针</span></span><br><span class="line">        <span class="comment">//的类型和所指向的类型是一样的，所以用 &amp;b 来给 *ptr 赋值。</span></span><br><span class="line">**ptr=<span class="number">34</span>; <span class="comment">//*ptr 的结果是 ptr 所指向的东西，在这里是一个指针，</span></span><br><span class="line">          <span class="comment">//对这个指针再做一次*运算，结果是一个int类型的变量。</span></span><br></pre></td></tr></table></figure><h2 id="指针表达式"><a href="#指针表达式" class="headerlink" title="指针表达式"></a>指针表达式</h2><p>一个表达式的结果如果是一个指针，那么这个表达式就叫指针表式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> *pa;</span><br><span class="line">pa=&amp;a; <span class="comment">//&amp;a 是一个指针表达式。</span></span><br><span class="line">Int **ptr=&amp;pa; <span class="comment">//&amp;pa 也是一个指针表达式。</span></span><br><span class="line">*ptr=&amp;b; <span class="comment">//*ptr 和&amp;b 都是指针表达式。</span></span><br><span class="line">pa=<span class="built_in">array</span>;</span><br><span class="line">pa++; <span class="comment">//这也是指针表达式。</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *arr[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> **parr=arr; <span class="comment">//如果把 arr 看作指针的话，arr 也是指针表达式</span></span><br><span class="line"><span class="keyword">char</span> *str;</span><br><span class="line">str=*parr; <span class="comment">//*parr 是指针表达式</span></span><br><span class="line">str=*(parr+<span class="number">1</span>); <span class="comment">//*(parr+1)是指针表达式</span></span><br><span class="line">str=*(parr+<span class="number">2</span>); <span class="comment">//*(parr+2)是指针表达式</span></span><br></pre></td></tr></table></figure><h2 id="指针和数组的关系"><a href="#指针和数组的关系" class="headerlink" title="指针和数组的关系"></a>指针和数组的关系</h2><p>数组的数组名其实可以看作一个指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">intarray[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;,value;</span><br><span class="line">value=<span class="built_in">array</span>[<span class="number">0</span>]; <span class="comment">//也可写成：value=*array;</span></span><br><span class="line">value=<span class="built_in">array</span>[<span class="number">3</span>]; <span class="comment">//也可写成：value=*(array+3);</span></span><br><span class="line">value=<span class="built_in">array</span>[<span class="number">4</span>]; <span class="comment">//也可写成：value=*(array+4);</span></span><br></pre></td></tr></table></figure><p>数组名 array 代表数组本身，类型是 int[10]，但如果把 array 看做指针的话，它指向数组的第 0 个单元，该指针占有单独的内存区，类型是 int* ， 所指向的类型是数组单元的类型即 int。</p><p>字符串相当于是一个数组，在内存中以数组的形式储存，只不过字符串是一个数组常量，内容不可改变，且只能是右值。如果看成指针的话，它既是常量指针，也是指针常量。</p><p>在表达式 sizeof(array)中，数组名 array 代表数组本身，故这时 sizeof 函数测出的是整个数组的大小。在表达式*array 中，array 扮演的是指针，因此这个表达式的结果就是数组第 0 号单元的值，sizeof(*array)测出的是数组单元的大小。</p><h2 id="指针和结构类型的关系"><a href="#指针和结构类型的关系" class="headerlink" title="指针和结构类型的关系"></a>指针和结构类型的关系</h2><p>可以声明一个指向结构类型对象的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">ss</span>=</span>&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line"><span class="comment">//声明了结构对象 ss，并把 ss 的成员初始化为 20，30 和 40。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> *<span class="title">ptr</span>=</span>&amp;ss;</span><br><span class="line"><span class="comment">//声明了一个指向 ss 的指针。它的类型是 MyStruct *,指向的类型是MyStruct。</span></span><br><span class="line"><span class="keyword">int</span> *pstr=(<span class="keyword">int</span>*)&amp;ss;</span><br><span class="line"><span class="comment">//声明了一个指向 ss 的指针。但是 pstr 和它被指向的类型 ptr 是不同的。</span></span><br></pre></td></tr></table></figure><p>通过指针 ptr 来访问 ss 的三个成员变量：</p><p>ptr-&gt;a; //指向运算符，或者可以(*ptr).a</p><p>ptr-&gt;b;</p><p>ptr-&gt;c;</p><p>通过指针 pstr 来访问 ss 的三个成员变量：</p><p>*pstr； //访问 ss 的成员 a。</p><p>*(pstr+1); //访问 ss 的成员 b </p><p>*(pstr+2) //访问 ss 的成员 c</p><h2 id="指针和函数的关系"><a href="#指针和函数的关系" class="headerlink" title="指针和函数的关系"></a>指针和函数的关系</h2><p>可以把一个指针声明成为一个指向函数的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">char</span> *,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> (*pfun1)(<span class="keyword">char</span> *,<span class="keyword">int</span>);</span><br><span class="line">pfun1=fun1;</span><br><span class="line"><span class="keyword">int</span> a=(*pfun1)(<span class="string">&quot;abcdefg&quot;</span>,<span class="number">7</span>); <span class="comment">//通过函数指针调用函数。</span></span><br></pre></td></tr></table></figure><p>可以把指针作为函数的形参。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> str[]=<span class="string">&quot;abcdefghijklmn&quot;</span>;</span><br><span class="line">a=fun(str);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;)</span><br><span class="line">    &#123;</span><br><span class="line">        num+=*s;s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数调用中，当把 str 作为实参传递给形参 s 后，实际是把 str 的值传递给了 s，s 所指向的地址就和 str 所指向的地址一致，但是 str 和 s 各自占用各自的存储空间。在函数体内对 s 进行自加 1 运算，并不意味着同时对 str 进行了自加 1 运算。</p><h2 id="指针类型转换"><a href="#指针类型转换" class="headerlink" title="指针类型转换"></a>指针类型转换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f=<span class="number">12.3</span>;</span><br><span class="line"><span class="keyword">float</span> *fptr=&amp;f;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br></pre></td></tr></table></figure><p>让指针 p 指向实数 f ，指针 p 的类型是 int <em>，它指向的类型是 int。表达式 &amp;f 的结果是一个指针，指针的类型是 float </em>,它指向的类型是 float。 两者不一致，直接赋值的方法是不行的。需要进行”强制类型转换”：<code>p=(int*)&amp;f;</code></p><p>一个函数如果使用了指针作为形参，那么在函数调用语句的实参和形参的结合过程中，必须保证类型一致 ，否则需要强制转换。语法格式是： <code>(TYPE *)p；</code>这样强制类型转换的结果是一个新指针，该新指针的类型是TYPE *，它指向的类型是 TYPE，它指向的地址就是原指针指向的地址。 而原来的指针 p 的一切属性都没有被修改。</p><p>可以把指针的值当作整数取出来，也可以把整数值当作地址赋给一个指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">123</span>,b;</span><br><span class="line"><span class="keyword">int</span> *ptr=&amp;a;</span><br><span class="line"><span class="keyword">char</span> *str;</span><br><span class="line">b=(<span class="keyword">int</span>)ptr; <span class="comment">//把指针 ptr 的值当作一个整数取出来。</span></span><br><span class="line">str=(<span class="keyword">char</span>*)b; <span class="comment">//把这个整数的值当作一个地址赋给指针 str。</span></span><br></pre></td></tr></table></figure><h2 id="指针的安全性"><a href="#指针的安全性" class="headerlink" title="指针的安全性"></a>指针的安全性</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> *ptr;</span><br><span class="line">ptr=(<span class="keyword">int</span> *)&amp;s;</span><br><span class="line">*ptr=<span class="number">1298</span>；</span><br></pre></td></tr></table></figure><p>指针 ptr 是一个 int *类型的指针，它指向的类型是 int。它指向 的地址就是 s 的首地址。在 32 位程序中，s 占一个字节，int 类型占四 个字节。最后一条语句不但改变了 s 所占的一个字节，还把和 s 相临的高地址方向的三个字节改变了，也许这三个字节里存储了非常重要的数据！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> *ptr=&amp;a;</span><br><span class="line">ptr++;</span><br><span class="line">*ptr=<span class="number">115</span>;</span><br></pre></td></tr></table></figure><p>第 3 句对指针 ptr 进行自加 1 运算后，ptr 指向了和整形变量 a 相邻的高地址方向的一块存储区。这块存储区可能是非常重要的数据，甚至可能是一条代码。而第 4 句竟然往这片存储区里写入数据，这是严重的错误！</p><p>在指针的强制类型转换：<code>ptr1=(TYPE *)ptr2</code> 中，如果 sizeof(ptr2 的类型)大于 sizeof(ptr1 的类型)，那么在使用指针 ptr1 来访问 ptr2 所 指 向 的 存 储 区时是安全 的。 如果 sizeof(ptr2 的 类 型 ) 小于 sizeof(ptr1 的类型)，那么在使用指针 ptr1 来访问 ptr2 所指向的存储区时是不安全的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复杂类型的分析示例&quot;&gt;&lt;a href=&quot;#复杂类型的分析示例&quot; class=&quot;headerlink&quot; title=&quot;复杂类型的分析示例&quot;&gt;&lt;/a&gt;复杂类型的分析示例&lt;/h2&gt;&lt;p&gt;从变量名处起，根据运算符优先级结合，一步一步分析。&lt;/p&gt;
&lt;p&gt;下面从简单的类型开</summary>
      
    
    
    
    <category term="C++" scheme="http://10185102110.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="http://10185102110.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode笔记</title>
    <link href="http://10185102110.github.io/2021/05/16/Leetcode%E7%AC%94%E8%AE%B0/"/>
    <id>http://10185102110.github.io/2021/05/16/Leetcode%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-16T09:13:57.000Z</published>
    <updated>2021-07-12T09:50:58.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h3><p><a href="https://leetcode-cn.com/problems/jump-game/">https://leetcode-cn.com/problems/jump-game/</a></p><p>题目描述</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个非负整数数组，你最初位于数组的第一个位置。</span><br><span class="line">数组中的每个元素代表你在该位置可以跳跃的最大长度。</span><br><span class="line">判断你是否能够到达最后一个位置。</span><br></pre></td></tr></table></figure><p>示例1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2,3,1,1,4]</span><br><span class="line">输出：</span><br><span class="line">true</span><br><span class="line">解释：</span><br><span class="line">我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</span><br></pre></td></tr></table></figure><p>示例2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[3,2,1,0,4]</span><br><span class="line">输出：</span><br><span class="line">false</span><br><span class="line">解释：</span><br><span class="line">无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</span><br></pre></td></tr></table></figure><ul><li>动态规划</li></ul><p>用 $dp[i]$ 表示位置 $i$ 是否可达，初始的时候都是 $0$，只有 $dp[0]=1$，因为起点一定是可达的。</p><p>然后从位置 $0$ 开始遍历。对于位置 $i$，如果发现 $dp[i]=0$，那么从前面的位置无法到达它，那么就更无法到达后面的位置，所以直接返回 <code>false</code> 。</p><p>否则的话，它能到达的范围是 $i+1$ 到 $i+nums[i]$，所以把这部分的 $dp$ 值都标记为 $1$。</p><p>如果发现 $i+nums[i]\geq n-1$，就说明当前位置直接就能跳到终点了，直接返回 <code>true</code> 。</p><p>时间复杂度 $O(n^2)$，空间复杂度 $O(n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dp[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i+nums[i] &gt;= n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= i+nums[i]; ++j) &#123;</span><br><span class="line">                dp[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>贪心算法</li></ul><p>在上面的动态规划方法中，对于位置 ，我们需要把他能到达的位置全部做上标记。</p><p>但其实没有必要这么做，只需要记录一下能到的最远的那个位置 $maxx$ 就行了。如果遍历之后的位置 j 时，发现 $maxx&lt;j$，那就说明之前的所有位置最远都无法到达 j，那就直接返回 <code>false</code> 。否则的话，比较一下当前能到达的最远位置，更新一下 $maxx$ 的值。</p><p>时间复杂度 O(n)，空间复杂度 $O(1)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>(), maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; maxx) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, i+nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx &gt;= n<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编辑距离</p><p>题目描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</span><br><span class="line">你可以对一个单词进行如下三种操作：</span><br><span class="line">插入一个字符</span><br><span class="line">删除一个字符</span><br><span class="line">替换一个字符</span><br></pre></td></tr></table></figure><p>示例1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出:</span><br><span class="line">3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (删除 &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (删除 &#x27;e&#x27;)</span><br></pre></td></tr></table></figure><p>示例2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出:</span><br><span class="line">5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (将 &#x27;i&#x27; 替换为 &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (将 &#x27;n&#x27; 替换为 &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (将 &#x27;n&#x27; 替换为 &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (插入 &#x27;u&#x27;)</span><br></pre></td></tr></table></figure><ul><li>动态规划</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;跳跃游戏&quot;&gt;&lt;a href=&quot;#跳跃游戏&quot; class=&quot;headerlink&quot; title=&quot;跳跃游戏&quot;&gt;&lt;/a&gt;跳跃游戏&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/jump-game/&quot;&gt;https://</summary>
      
    
    
    
    <category term="Leetcode" scheme="http://10185102110.github.io/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="http://10185102110.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>C++笔记</title>
    <link href="http://10185102110.github.io/2021/05/16/CPP%E7%AC%94%E8%AE%B0/"/>
    <id>http://10185102110.github.io/2021/05/16/CPP%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-16T09:13:40.000Z</published>
    <updated>2021-05-16T10:02:30.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>vector 是向量类型，它可以容纳许多类型的数据，如若干个整数，所以称其为容器。vector 是C++ STL的一个重要成员，使用它时需要包含头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span>;</span></span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>有五种方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//定义了10个整型元素的向量，但没有给出初值。</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>; <span class="comment">//定义了10个整型元素的向量,且给出每个元素的初值为1</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(b)</span></span>; <span class="comment">//用b向量来创建a向量，整体复制性赋值</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(b.begin(),b.begin+<span class="number">3</span>)</span></span>; <span class="comment">//定义了a值为b中第0个到第2个（共3个）元素</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(b,b+<span class="number">7</span>)</span></span>; <span class="comment">//从数组中获得初值</span></span><br></pre></td></tr></table></figure><h4 id="重要操作"><a href="#重要操作" class="headerlink" title="重要操作"></a>重要操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">assign</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">begin</span>()+<span class="number">3</span>); <span class="comment">//b为向量，将b的0~2个元素构成的向量赋给a</span></span><br><span class="line">a.<span class="built_in">assign</span>(<span class="number">4</span>,<span class="number">2</span>); <span class="comment">//a只含4个元素，且每个元素为2</span></span><br><span class="line">a.<span class="built_in">back</span>(); <span class="comment">//返回a的最后一个元素</span></span><br><span class="line">a.<span class="built_in">front</span>(); <span class="comment">//返回a的第一个元素</span></span><br><span class="line">a[i]; <span class="comment">//返回a的第i个元素，当且仅当a[i]存在</span></span><br><span class="line">a.<span class="built_in">clear</span>(); <span class="comment">//清空a中的元素</span></span><br><span class="line">a.<span class="built_in">empty</span>(); <span class="comment">//判断a是否为空，空则返回ture,否则返回false</span></span><br><span class="line">a.<span class="built_in">pop_back</span>(); <span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line">a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,a.<span class="built_in">begin</span>()+<span class="number">3</span>); <span class="comment">//删除a中第1个（从第0个算起）到第2个元素</span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">5</span>); <span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">5</span>); <span class="comment">//在a的第1个元素（从第0个算起）的位置插入数值5</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>); <span class="comment">//在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5</span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>()+<span class="number">1</span>,b+<span class="number">3</span>,b+<span class="number">6</span>); <span class="comment">//b为数组，在a的第1个元素的位置插入b的第3个元素到第5个元素</span></span><br><span class="line">a.<span class="built_in">size</span>(); <span class="comment">//返回a中元素的个数；</span></span><br><span class="line">a.<span class="built_in">capacity</span>(); <span class="comment">//返回a在内存中总共可以容纳的元素个数</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值随机</span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>,<span class="number">2</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值为2</span></span><br><span class="line">a.<span class="built_in">reserve</span>(<span class="number">100</span>); <span class="comment">//将a的容量（capacity）扩充至100，避免内存自动进行容量扩充操作</span></span><br><span class="line">a.<span class="built_in">swap</span>(b); <span class="comment">//b为向量，将a中的元素和b中的元素进行整体性交换</span></span><br><span class="line">a==b; <span class="comment">//b为向量，向量的比较操作还有!=,&gt;=,&lt;=,&gt;,&lt;</span></span><br></pre></td></tr></table></figure><h4 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h4><ul><li><p>添加元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    a.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure></li><li><p>从数组中选择元素添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it&lt;a.<span class="built_in">end</span>();it++)</span><br><span class="line">    b.<span class="built_in">push_back</span>(*it);</span><br></pre></td></tr></table></figure></li><li><p>从文件读取元素并添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>)</span></span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i; in&gt;&gt;i)</span><br><span class="line">    a.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure></li><li><p>通过下标读取元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a,a+<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=b.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">    cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="重要算法"><a href="#重要算法" class="headerlink" title="重要算法"></a>重要算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); <span class="comment">//对a中的从a.begin()（包括）到a.end()（不包括）的元素进行从小到大排列</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()); <span class="comment">//对a中的从a.begin()（包括）到a.end()（不包括）的元素倒置</span></span><br><span class="line"><span class="built_in">copy</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),b.<span class="built_in">begin</span>()+<span class="number">1</span>); <span class="comment">//把a中的从a.begin()（包括）到a.end()（不包括）的元素复制到b中，从b.begin()+1的位置（包括）开始复制，覆盖原有元素</span></span><br><span class="line"><span class="built_in">find</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="number">10</span>); <span class="comment">//在a中的从a.begin()（包括）到a.end()（不包括）的元素中查找10，若存在返回其在向量中的位置</span></span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map是STL的一个关联容器，它提供一对一的hash。</p><p>map内部的实现是自建一颗红黑树，这颗树具有对数据自动排序的功能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="keyword">int</span>, string&gt; m;</span><br></pre></td></tr></table></figure><h4 id="重要操作-1"><a href="#重要操作-1" class="headerlink" title="重要操作"></a>重要操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">m.<span class="built_in">insert</span>(pair&lt;<span class="keyword">int</span>, string&gt;(<span class="number">0</span>, <span class="string">&quot;zero&quot;</span>));</span><br><span class="line">m[<span class="number">0</span>] = <span class="string">&quot;zero&quot;</span>;</span><br><span class="line"><span class="comment">// 查找元素</span></span><br><span class="line">iter = m.<span class="built_in">find</span>(<span class="string">&quot;123&quot;</span>);<span class="comment">//返回查找元素的位置否则返回map::end()位置</span></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">m.<span class="built_in">erase</span>(iter);</span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>());<span class="comment">//清空</span></span><br><span class="line">m.<span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line"><span class="keyword">int</span> n = m.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">empty</span>()<span class="comment">//如果map为空则返回true</span></span><br><span class="line"><span class="built_in">lower_bound</span>()<span class="comment">//返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line"><span class="built_in">max_size</span>()    <span class="comment">//返回可以容纳的最大元素个数</span></span><br><span class="line"><span class="built_in">swap</span>()   <span class="comment">//交换两个map</span></span><br><span class="line"><span class="built_in">count</span>(key)  <span class="comment">//查询关键字为key的元素的个数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vector&quot;&gt;&lt;a href=&quot;#vector&quot; class=&quot;headerlink&quot; title=&quot;vector&quot;&gt;&lt;/a&gt;vector&lt;/h2&gt;&lt;p&gt;vector 是向量类型，它可以容纳许多类型的数据，如若干个整数，所以称其为容器。vector 是C++ S</summary>
      
    
    
    
    <category term="C++" scheme="http://10185102110.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="http://10185102110.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>DNS的配置与管理</title>
    <link href="http://10185102110.github.io/2021/05/14/DNS%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <id>http://10185102110.github.io/2021/05/14/DNS%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86/</id>
    <published>2021-05-14T14:14:36.000Z</published>
    <updated>2021-05-14T15:40:52.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DNS的配置与管理"><a href="#DNS的配置与管理" class="headerlink" title="DNS的配置与管理"></a>DNS的配置与管理</h1><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><ol><li><h3 id="什么是DNS"><a href="#什么是DNS" class="headerlink" title="什么是DNS"></a>什么是DNS</h3></li></ol><ul><li>全称：Domain Name System /域名系统</li><li>使域名和 IP 地址相互映射</li><li>域名解析：通过主机名，最终得到该主机名对应的IP地址的过程</li></ul><ol><li><h3 id="什么是域名"><a href="#什么是域名" class="headerlink" title="什么是域名"></a>什么是域名</h3></li></ol><ul><li><p>概念：与网络上的数字型IP地址相对应的字符型地址</p></li><li><p>一般结构：主机名.三级域名.二级域名.顶级域名</p><p>– 顶级域名：cn、jp … edu、org …</p><p>– 二级域名：ibm、yahoo … com、edu、net、gov、top …</p><p>– 三级域名：A-Z, a-z, 0-9, 连接符 -</p></li></ul><ol><li><h3 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h3></li></ol><ul><li>第0步：检查本地缓存</li><li>第1步：向本地DNS服务器请求</li><li>第2步：向根域名服务器请求</li><li>第3步：向顶级域名服务器请求</li><li>第4步：向权威域名服务器请求</li><li>一旦成功：返回结果，缓存留作备用，解析过程中止</li></ul><ol><li><h3 id="DNS查询模式"><a href="#DNS查询模式" class="headerlink" title="DNS查询模式"></a>DNS查询模式</h3></li></ol><ul><li>递归查询：若自身不能，则以客户身份请求其他，客户机和服务器之间属于递归查询</li><li><p>循环查询：若自身不能，则指导客户请求其他，一般DNS服务器之间属于循环查询</p></li><li><p>正向解析：通过域名查 ip</p></li><li>反向解析：通过 ip 查域名</li></ul><ol><li><h3 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h3></li></ol><ul><li>主域名服务器 master </li><li>辅助域名服务器 slave </li><li>缓存服务器 Caching-only</li></ul><ol><li><h3 id="DNS资源记录"><a href="#DNS资源记录" class="headerlink" title="DNS资源记录"></a>DNS资源记录</h3></li></ol><ul><li>SOA记录（Start Of Authority record）起始授权记录</li><li>NS 记录(Name Server record)当前区域的DNS服务器</li><li>A 和 AAAA 记录（Adress record）</li><li>PTR 记录（PoinTer Record）全限定域名</li><li>CNAME（Canonical Name record）别名记录</li><li>MX 记录（Mail eXchange record）邮件交换器</li></ul><h2 id="二、项目实施"><a href="#二、项目实施" class="headerlink" title="二、项目实施"></a>二、项目实施</h2><ol><li><h3 id="安装-DNS-服务软件"><a href="#安装-DNS-服务软件" class="headerlink" title="安装 DNS 服务软件"></a>安装 DNS 服务软件</h3></li></ol><ul><li><p>bind：DNS服务主程序，仅服务器端需要</p></li><li><p>bind-utils：辅助工具，用于测试 DNS，服务器和客户端都需要</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bind bind-utils</span><br><span class="line">注：本实验基于上次的DHCP，先把网络连接方式改成NAT，再将ifcfg-enp0s3文件恢复原样，</span><br><span class="line">最后重启网卡：service network restart ，安装成功再改回DHCP的配置</span><br></pre></td></tr></table></figure></li></ul><ol><li><h3 id="修改主服务器主配置文件：-etc-named-conf"><a href="#修改主服务器主配置文件：-etc-named-conf" class="headerlink" title="修改主服务器主配置文件：/etc/named.conf"></a>修改主服务器主配置文件：/etc/named.conf</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">  listen-on port 53 &#123; any; &#125;; // 在本机所有网卡的#53端口监听</span><br><span class="line">  ……</span><br><span class="line">  directory &quot;/var/named&quot;;</span><br><span class="line">  ……</span><br><span class="line">  allow-query &#123; any; &#125;; // 允许所有客户端请求</span><br><span class="line">  ……</span><br><span class="line">&#125;;</span><br><span class="line">……</span><br></pre></td></tr></table></figure></li><li><h3 id="主服务器扩展配置文件：-etc-named-rfc1912-zones"><a href="#主服务器扩展配置文件：-etc-named-rfc1912-zones" class="headerlink" title="主服务器扩展配置文件：/etc/named.rfc1912.zones"></a>主服务器扩展配置文件：/etc/named.rfc1912.zones</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 在前面添加如下代码</span></span><br><span class="line">zone &quot;ecnu.edu&quot; IN &#123; // 正向解析信息</span><br><span class="line">type master; // 主服务器</span><br><span class="line">file &quot;ecnu.edu.zone&quot;; // 区域文件名</span><br><span class="line">allow-update &#123;192.168.100.2;&#125;; // 填写从服务器，若无，则填 none</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;100.168.192.in-addr.arpa&quot; IN &#123; // 反向解析信息</span><br><span class="line">type master; // 主服务器</span><br><span class="line">file &quot;192.168.100.arpa&quot;; // 区域文件名</span><br><span class="line">allow-update &#123;192.168.100.2;&#125;; // 从服务器</span><br><span class="line">&#125;;</span><br><span class="line">…</span><br></pre></td></tr></table></figure></li><li><h3 id="正向解析文件：-var-named-ecnu-edu-zone"><a href="#正向解析文件：-var-named-ecnu-edu-zone" class="headerlink" title="正向解析文件：/var/named/ecnu.edu.zone"></a>正向解析文件：/var/named/ecnu.edu.zone</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Srv named]#cp -a named.localhost ecnu.ed</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$TTL 1D</span><br><span class="line">@ IN SOA ns1.ecnu.edu. admin.ecnu.edu. ( // ns1:DNS服务器 // 联系 admin@ecnu.edu</span><br><span class="line">  0 ; serial</span><br><span class="line">  1D ; refresh</span><br><span class="line">  1H ; retry</span><br><span class="line">  1W ; expire</span><br><span class="line">  3H ); minimum</span><br><span class="line"><span class="code">      IN NS ns1.ecnu.edu. // DNS服务器</span></span><br><span class="line"><span class="code">dhcp  IN A 192.168.100.1 // 定义域名与IP地址的映射</span></span><br><span class="line"><span class="code">ns1   IN A 192.168.100.1</span></span><br><span class="line"><span class="code">ns2   IN A 192.168.100.2</span></span><br><span class="line"><span class="code">ftp   IN A 192.168.100.10</span></span><br><span class="line"><span class="code">www   IN A 192.168.100.20</span></span><br><span class="line"><span class="code">mail  IN A 192.168.100.30</span></span><br></pre></td></tr></table></figure></li><li><h3 id="反向解析文件：-var-named-192-168-100-arpa"><a href="#反向解析文件：-var-named-192-168-100-arpa" class="headerlink" title="反向解析文件：/var/named/192.168.100.arpa"></a>反向解析文件：/var/named/192.168.100.arpa</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Srv named]#cp -a named.loopback 192.168.100.arpa</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$TTL 1D</span><br><span class="line">@ IN SOA ns1.ecnu.edu. admin.ecnu.edu. ( // ns1:DNS服务器 // 联系 admin@ecnu.edu</span><br><span class="line">  0 ; serial</span><br><span class="line">  1D ; refresh</span><br><span class="line">  1H ; retry</span><br><span class="line">  1W ; expire</span><br><span class="line">  3H ); minimum</span><br><span class="line"><span class="code">      IN NS ns1.ecnu.edu. // DNS服务器</span></span><br><span class="line"><span class="code">ns1   IN A 192.168.100.1</span></span><br><span class="line"><span class="code">1     IN PTR dhcp.ecnu.edu. // 定义IP地址与域名的映射</span></span><br><span class="line"><span class="code">1     IN PTR ns1.ecnu.edu.</span></span><br><span class="line"><span class="code">2     IN PTR ns2.ecnu.edu.</span></span><br><span class="line"><span class="code">10    IN PTR ftp.ecnu.edu.</span></span><br><span class="line"><span class="code">20    IN PTR www.ecnu.edu.</span></span><br><span class="line"><span class="code">30    IN PTR mail.ecnu.edu.</span></span><br></pre></td></tr></table></figure></li><li><h3 id="本机测试"><a href="#本机测试" class="headerlink" title="本机测试"></a>本机测试</h3></li></ol><ul><li><p>启动服务器</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Srv ~]# systemctl start named</span><br></pre></td></tr></table></figure></li><li><p>确保服务器指向本机</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Srv ~]# cat /etc/resolv.conf</span><br><span class="line">nameserver 192.168.100.1</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p><img src="1.png" alt=""></p></li></ul><ol><li><h3 id="异机测试"><a href="#异机测试" class="headerlink" title="异机测试"></a>异机测试</h3><p>即开启DHCP服务后，结果同上</p></li><li><h3 id="配置辅助DNS服务器及测试"><a href="#配置辅助DNS服务器及测试" class="headerlink" title="配置辅助DNS服务器及测试"></a>配置辅助DNS服务器及测试</h3></li></ol><ul><li><p>复制虚拟机 Srv2</p></li><li><p>关闭 Srv 和 Srv2 的防火墙</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>修改 /etc/resolv.conf 将客户端 DNS 改为192.168.100.2</p></li><li><p>修改 /etc/named.rfc1912.zones</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;ecnu.edu&quot; IN &#123;</span><br><span class="line">  type slave;</span><br><span class="line">  file &quot;slaves/ecnu.edu.zone&quot;;</span><br><span class="line">  masters &#123;192.168.100.1;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">zone &quot;100.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class="line">  type slave;</span><br><span class="line">  file &quot;slaves/192.168.100.arpa&quot;;</span><br><span class="line">  masters &#123;192.168.100.1;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>重启服务器，/var/named/slaves 中已同步正/反向解析文件</p></li><li><p>测试</p><p><img src="2.png" alt=""></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DNS的配置与管理&quot;&gt;&lt;a href=&quot;#DNS的配置与管理&quot; class=&quot;headerlink&quot; title=&quot;DNS的配置与管理&quot;&gt;&lt;/a&gt;DNS的配置与管理&lt;/h1&gt;&lt;h2 id=&quot;一、基础知识&quot;&gt;&lt;a href=&quot;#一、基础知识&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Server" scheme="http://10185102110.github.io/categories/Server/"/>
    
    
    <category term="Server、DNS" scheme="http://10185102110.github.io/tags/Server%E3%80%81DNS/"/>
    
  </entry>
  
  <entry>
    <title>DHCP的配置与管理</title>
    <link href="http://10185102110.github.io/2021/05/14/DHCP%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <id>http://10185102110.github.io/2021/05/14/DHCP%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86/</id>
    <published>2021-05-14T13:46:49.000Z</published>
    <updated>2021-05-16T08:14:46.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DHCP的配置与管理"><a href="#DHCP的配置与管理" class="headerlink" title="DHCP的配置与管理"></a>DHCP的配置与管理</h1><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><ol><li><h3 id="什么是DHCP"><a href="#什么是DHCP" class="headerlink" title="什么是DHCP"></a>什么是DHCP</h3><p>– 全称：Dynamic Host Configuration Protocol ，动态主机配置协议 </p><p>– 是一个局域网的网络协议，使用UDP协议工作 </p><p>– 中、大型网络中手动分配IP地址的方法不合适 ，DHCP可高效分配IP地址 </p></li><li><h3 id="DHCP的主要功能"><a href="#DHCP的主要功能" class="headerlink" title="DHCP的主要功能"></a>DHCP的主要功能</h3><p>–为内部网络自动分配IP地址 </p><p>– 中央管理所有计算机的手段</p></li><li><h3 id="DHCP服务优点"><a href="#DHCP服务优点" class="headerlink" title="DHCP服务优点"></a>DHCP服务优点</h3><p>– 集中验证IP地址等参数，不必检查每个主机</p><p>– 不会分配相同IP给不同主机 </p><p>– 约束特定计算机使用特定IP </p><p>– 为DHCP作用域设置各种选项</p><p>– 子网间移动主机不需重设IP</p></li><li><h3 id="DHCP服务缺点"><a href="#DHCP服务缺点" class="headerlink" title="DHCP服务缺点"></a>DHCP服务缺点</h3><p>– 不能发现非DHCP客户机IP </p><p>– 多DHCP服务器难联动分配 </p><p>– DHCP服务器不能跨路由器与客户机通信，除非路由器允许BOOTP转发</p></li><li><h3 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h3><p>– DHCP服务器：提供DHCP服务的计算机 </p><p>– DHCP客户端：启用DHCP设置的计算机 </p><p>– 作用域：完整连续的可用IP地址范围 </p><p>– 排除范围：作用域内从DHCP服务中排除的有限IP地址序列 </p><p>– 地址池：定义作用域并应用排除范围后剩余的地址 </p><p>– 租约：客户机可使用动态分配IP地址的时间 </p><ul><li><p>客户机发出租约后：此租约被看作是活动的 </p></li><li><p>租约终止前：客户机可向DHCP服务器请求更新租约 </p></li><li><p>租约到期或被删后：此租约变为不活动的 </p></li></ul></li></ol><p>– 预约：客户机指定永久租约</p><ol><li><h3 id="DCHP的工作流程"><a href="#DCHP的工作流程" class="headerlink" title="DCHP的工作流程"></a>DCHP的工作流程</h3><p>– 发现阶段：客户机寻找服务器 </p><p>– 提供阶段：服务器提供IP地址 </p><p>– 选择阶段：客户机选择某台服务器提供的IP地址 </p><p>– 确认阶段：服务器确认所提供的IP地址 </p><p>– 重新登录</p><ul><li>客户机重新登录网络时，不需再发送DHCPdiscover发现信息</li><li>直接发送包含前一次所分配的IP地址的DHCPrequest请求信息 </li></ul><p>– 更新租约</p><ul><li>出租IP有租借期限，期满后便收回</li><li>如要延长租约，则须更新租约</li></ul></li><li><h3 id="DHCP分配地址的方法"><a href="#DHCP分配地址的方法" class="headerlink" title="DHCP分配地址的方法"></a>DHCP分配地址的方法</h3><p>– 自动分配</p><ul><li>服务器为客户机指定永久IP地址</li><li>第一次成功租到IP地址后就可永久使用 </li></ul><p>– 动态分配</p><ul><li>服务器为客户机指定具时间限制的IP地址</li><li>到期或明确放弃该地址时可被其他客户机使用</li></ul><p>– 手工分配：客户机IP地址由网管指定</p></li></ol><h2 id="二、项目实施"><a href="#二、项目实施" class="headerlink" title="二、项目实施"></a>二、项目实施</h2><ol><li><h3 id="准备-3-台机器"><a href="#准备-3-台机器" class="headerlink" title="准备 3 台机器"></a>准备 3 台机器</h3><p>– 安装好 1 台CentOS虚拟机 </p><p>– 使用链接复制的方式复制3台 </p><ul><li>命名分别为 Srv、CliCent1和CliCent2</li><li>分别用作DHCP服务器、测试用客户端1和测试用客户端2 </li></ul><p><img src="1.png" alt=""></p><p><img src="2.png" alt=""></p><p>– 修改3台虚拟机的主机名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname [MYHOSTNAME]</span><br></pre></td></tr></table></figure><p>– 修改 3 台虚拟机的唯一编号</p><ul><li><p>/etc/machine-id</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uuidgen &gt;/etc/machine-id</span><br></pre></td></tr></table></figure></li><li><p>/etc/sysconfig/network-scripts/ifcfg-enp0s3</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/^UUID=[0-9a-z\-]<span class="emphasis">*$/UUID=`uuidgen`/g&quot; /etc/sysconfig/network-scripts/ifcfg-enp0s3</span></span><br></pre></td></tr></table></figure></li><li><p>uuidgen命令可产生唯一标识UUID</p></li></ul><p><img src="3.png" alt=""></p></li><li><h3 id="安装DHCP"><a href="#安装DHCP" class="headerlink" title="安装DHCP"></a>安装DHCP</h3><p>– yum安装命令 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install dhcp</span><br></pre></td></tr></table></figure><p>– 安装完后会生成主配置文件：/etc/dhcp/dhcpd.conf</p><p>– 确保客户机上安装有DHCP客户端程序 dhcp-clien</p></li><li><h3 id="配置DHCP"><a href="#配置DHCP" class="headerlink" title="配置DHCP"></a>配置DHCP</h3><p>– Srv主配置文件</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ddns-update-style none;</span><br><span class="line">option domain-name-servers 192.168.100.1;</span><br><span class="line">subnet 192.168.100.0 netmask 255.255.255.0 &#123;</span><br><span class="line">range 192.168.100.101 192.168.100.200;</span><br><span class="line">option routers 192.168.100.1;</span><br><span class="line">option subnet-mask 255.255.255.0;</span><br><span class="line">&#125;</span><br><span class="line">DHCPDARGS=&quot;enp0s3&quot;;</span><br><span class="line"><span class="section">#服务器IP是192.168.100.1</span></span><br><span class="line"><span class="section">#分本的地址是该网段的 192.168.100.101~192.168.100.200</span></span><br><span class="line"><span class="section">#绑定在 enp0s3网卡上</span></span><br></pre></td></tr></table></figure><p><img src="4.png" alt=""></p><p>– 修改Srv的网络配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static   # 将IP地址设为静态</span><br><span class="line">IPADDR=192.168.100.1</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure><p><img src="5.png" alt=""></p><p>– 客户机CliCent1和CliCent2 维持原状</p><p>– 改虚拟机的网络为内部网络并刷新网卡物理地址</p><p><img src="6.png" alt=""></p></li><li><p>启动服务器</p><p>– 在Srv上启动DHCP服务器</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start dhcp</span><br></pre></td></tr></table></figure><p><img src="7.png" alt=""></p><p>– 重启客户机CliCent1和CliCent2</p><ul><li>查看其IP地址</li><li>相互Ping检查是否相通</li></ul><p><img src="8.png" alt=""></p><p><img src="9.png" alt=""></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DHCP的配置与管理&quot;&gt;&lt;a href=&quot;#DHCP的配置与管理&quot; class=&quot;headerlink&quot; title=&quot;DHCP的配置与管理&quot;&gt;&lt;/a&gt;DHCP的配置与管理&lt;/h1&gt;&lt;h2 id=&quot;一、基础知识&quot;&gt;&lt;a href=&quot;#一、基础知识&quot; class=&quot;</summary>
      
    
    
    
    <category term="Server" scheme="http://10185102110.github.io/categories/Server/"/>
    
    
    <category term="Server、DHCP" scheme="http://10185102110.github.io/tags/Server%E3%80%81DHCP/"/>
    
  </entry>
  
  <entry>
    <title>基于CF的单目标追踪</title>
    <link href="http://10185102110.github.io/2021/05/12/%E5%9F%BA%E4%BA%8ECF%E5%8D%95%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA/"/>
    <id>http://10185102110.github.io/2021/05/12/%E5%9F%BA%E4%BA%8ECF%E5%8D%95%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA/</id>
    <published>2021-05-12T04:46:49.000Z</published>
    <updated>2021-06-13T08:28:30.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Correlation-Filter-based-tracker（相关滤波器）"><a href="#Correlation-Filter-based-tracker（相关滤波器）" class="headerlink" title="Correlation Filter based tracker（相关滤波器）"></a>Correlation Filter based tracker（相关滤波器）</h2><h4 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h4><p>寻找一个滤波模版 H，与输入图像 F 求相关性，得到相关图 G。相关图 G 描述目标响应，越接近时值越大，使得当 H 作用在跟踪目标上时，得到的响应最大。</p><h4 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h4><script type="math/tex; mode=display">\begin{eqnarray*}&&g=f\bigodot h^{*} \tag{1} \\&&F(g)=F(f⨀h^{*})=F(f)\cdot F(h)^{*} \tag{2}\\&&G=F\cdot H^{*} \tag{3}\\&&H^{*}=\frac{G}{F} \tag{4}\\&&\underset{H^{*}}{min}\sum\limits_{i}|F_{i}⊙H^{∗} − G_{i}|^{2}\tag{5}\\&&0=\frac{∂}{∂H^{*}_{ων}}\sum\limits_{i}|F_{iων}H^{∗}_{ων} − G_{iων}|^{2}\tag{6}\\&& H=\frac{\sum_i G_{i}⊙F^{∗}_i}{\sum_i F_{i}⊙F^{∗}_i}\tag{7}\\&&H^{*}_i=η\frac{G_{i}⊙F^{∗}_i}{F_{i}⊙F^{∗}_i}+(1-η)H^∗_{i−1}=\frac{A_i}{B_i} \tag{8}\\&&A_i=ηG_i ⊙ F^∗_i + (1 − η)A_{i−1}\\&&B_i=ηF_i ⊙ F^∗_i + (1 − η)B_{i−1}\end{eqnarray*}</script><ol><li><p>g 表示响应输出，f 表示输入图像，h 表示滤波模板，$h^{*}$表示复共轭(实部不变，虚部取反)；</p></li><li><p>为加快计算速度，根据卷积定理可知，函数互相关的傅里叶变换等于函数傅里叶变换的乘积；</p></li><li><p>由(2)得到；</p></li><li>由(3)得到，$H^{*}$就是所求滤波器；</li><li>MOSSE 采用最小化平方和误差；</li><li>将图像展开到像素，最小化求偏导等于 0；</li><li>最终得到求解公式；</li><li>在线更新策略，根据当前帧不断进行调整。</li></ol><h4 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h4><ul><li>run.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> basetracker</span><br><span class="line"></span><br><span class="line">initTracking = <span class="literal">True</span></span><br><span class="line">ix, iy, cx, cy = -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">w, h = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">inteval = <span class="number">1</span></span><br><span class="line">duration = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&quot;CarScale.avi&quot;</span>)</span><br><span class="line"><span class="comment">#获取cap的视频帧</span></span><br><span class="line">fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line"><span class="comment"># 获取cap视频流的每帧大小</span></span><br><span class="line">size = (<span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),<span class="built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))</span><br><span class="line"><span class="comment"># 定义视频格式，参数搭配固定，不同的编码格式对应不同的参数</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义视频文件输入对象</span></span><br><span class="line">outVideo = cv2.VideoWriter(<span class="string">&quot;result.mp4&quot;</span>, fourcc, fps, size,isColor=<span class="literal">True</span>)</span><br><span class="line">inteval = <span class="number">30</span></span><br><span class="line">    </span><br><span class="line">tracker = basetracker.BaseTracker(<span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>)  <span class="comment"># hog, fixed_window, multiscale</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;tracking&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line">ret, frame = cap.read()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(initTracking):</span><br><span class="line">r = cv2.selectROI(<span class="string">&#x27;tracking&#x27;</span>,frame)   <span class="comment">#????</span></span><br><span class="line">ix, iy, w, h = r</span><br><span class="line">tracker.init([ix,iy,w,h], frame)</span><br><span class="line">initTracking = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">t0 = time()</span><br><span class="line">boundingbox = tracker.update(frame)</span><br><span class="line">t1 = time()</span><br><span class="line"></span><br><span class="line">boundingbox = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, boundingbox))</span><br><span class="line">cv2.rectangle(frame,(boundingbox[<span class="number">0</span>],boundingbox[<span class="number">1</span>]), (boundingbox[<span class="number">0</span>]+boundingbox[<span class="number">2</span>],boundingbox[<span class="number">1</span>]+boundingbox[<span class="number">3</span>]), (<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">duration = <span class="number">0.8</span>*duration + <span class="number">0.2</span>*(t1-t0)</span><br><span class="line"><span class="comment">#duration = t1-t0</span></span><br><span class="line">cv2.putText(frame, <span class="string">&#x27;FPS: &#x27;</span>+<span class="built_in">str</span>(<span class="number">1</span>/duration)[:<span class="number">4</span>].strip(<span class="string">&#x27;.&#x27;</span>), (<span class="number">8</span>,<span class="number">20</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用VideoWriter类中的write(frame)方法，将图像帧写入视频文件</span></span><br><span class="line">outVideo.write(frame)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;tracking&#x27;</span>, frame)</span><br><span class="line">c = cv2.waitKey(inteval) &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">outVideo.release()</span><br><span class="line"><span class="comment">#cv2.waitKey()</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><ul><li>basetracker.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># recttools</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x2</span>(<span class="params">rect</span>):</span></span><br><span class="line">    <span class="keyword">return</span> rect[<span class="number">0</span>] + rect[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">y2</span>(<span class="params">rect</span>):</span></span><br><span class="line">    <span class="keyword">return</span> rect[<span class="number">1</span>] + rect[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limit</span>(<span class="params">rect, limit</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (rect[<span class="number">0</span>] + rect[<span class="number">2</span>] &gt; limit[<span class="number">0</span>] + limit[<span class="number">2</span>]):</span><br><span class="line">        rect[<span class="number">2</span>] = limit[<span class="number">0</span>] + limit[<span class="number">2</span>] - rect[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (rect[<span class="number">1</span>] + rect[<span class="number">3</span>] &gt; limit[<span class="number">1</span>] + limit[<span class="number">3</span>]):</span><br><span class="line">        rect[<span class="number">3</span>] = limit[<span class="number">1</span>] + limit[<span class="number">3</span>] - rect[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (rect[<span class="number">0</span>] &lt; limit[<span class="number">0</span>]):</span><br><span class="line">        rect[<span class="number">2</span>] -= (limit[<span class="number">0</span>] - rect[<span class="number">0</span>])</span><br><span class="line">        rect[<span class="number">0</span>] = limit[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (rect[<span class="number">1</span>] &lt; limit[<span class="number">1</span>]):</span><br><span class="line">        rect[<span class="number">3</span>] -= (limit[<span class="number">1</span>] - rect[<span class="number">1</span>])</span><br><span class="line">        rect[<span class="number">1</span>] = limit[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (rect[<span class="number">2</span>] &lt; <span class="number">0</span>):</span><br><span class="line">        rect[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (rect[<span class="number">3</span>] &lt; <span class="number">0</span>):</span><br><span class="line">        rect[<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> rect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBorder</span>(<span class="params">original, limited</span>):</span></span><br><span class="line">    res = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    res[<span class="number">0</span>] = limited[<span class="number">0</span>] - original[<span class="number">0</span>]</span><br><span class="line">    res[<span class="number">1</span>] = limited[<span class="number">1</span>] - original[<span class="number">1</span>]</span><br><span class="line">    res[<span class="number">2</span>] = x2(original) - x2(limited)</span><br><span class="line">    res[<span class="number">3</span>] = y2(original) - y2(limited)</span><br><span class="line">    <span class="keyword">assert</span> (np.<span class="built_in">all</span>(np.array(res) &gt;= <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subwindow</span>(<span class="params">img, window, borderType=cv2.BORDER_CONSTANT</span>):</span></span><br><span class="line">    cutWindow = [x <span class="keyword">for</span> x <span class="keyword">in</span> window]</span><br><span class="line">    cutWindow = limit(cutWindow, [<span class="number">0</span>, <span class="number">0</span>, img.shape[<span class="number">1</span>], img.shape[<span class="number">0</span>]])  <span class="comment"># modify cutWindow</span></span><br><span class="line">    <span class="keyword">assert</span> (cutWindow[<span class="number">2</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> cutWindow[<span class="number">3</span>] &gt; <span class="number">0</span>)</span><br><span class="line">    border = getBorder(window, cutWindow)</span><br><span class="line">    res = img[cutWindow[<span class="number">1</span>]:cutWindow[<span class="number">1</span>] + cutWindow[<span class="number">3</span>], cutWindow[<span class="number">0</span>]:cutWindow[<span class="number">0</span>] + cutWindow[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (border != [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]):</span><br><span class="line">        res = cv2.copyMakeBorder(res, border[<span class="number">1</span>], border[<span class="number">3</span>], border[<span class="number">0</span>], border[<span class="number">2</span>], borderType)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># KCF tracker</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseTracker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, hog=<span class="literal">False</span>, fixed_window=<span class="literal">True</span>, multiscale=<span class="literal">False</span></span>):</span></span><br><span class="line">        self._interp_factor = <span class="number">0.0075</span>  <span class="comment"># model updating rate</span></span><br><span class="line">        self._tmpl_sz = np.array([<span class="number">50</span>, <span class="number">50</span>])  <span class="comment"># the fixed model size</span></span><br><span class="line">        self._roi = [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]  <span class="comment"># cv::Rect2f, [left_up_x,left_up_y,width,height]</span></span><br><span class="line">        self._tmpl = <span class="literal">None</span>  <span class="comment"># our model</span></span><br><span class="line">        self.G = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># self._scale_pool = [1]</span></span><br><span class="line">        self._scale_pool = [<span class="number">0.985</span>, <span class="number">0.99</span>, <span class="number">0.995</span>, <span class="number">1.0</span>, <span class="number">1.005</span>, <span class="number">1.01</span>, <span class="number">1.015</span>]</span><br><span class="line"></span><br><span class="line">        self.padding = <span class="number">2.5</span>  <span class="comment"># extra area surrounding the target</span></span><br><span class="line">        self.output_sigma_factor = <span class="number">0.125</span>  <span class="comment"># bandwidth of gaussian target</span></span><br><span class="line">        self.lambdar = <span class="number">0.0001</span>  <span class="comment"># regularization</span></span><br><span class="line"></span><br><span class="line">        self.ishog = <span class="literal">False</span></span><br><span class="line">        winSize = (<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">        blockSize = (<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        blockStride = (<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        cellSize = (<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        nbins = <span class="number">32</span></span><br><span class="line">        self.hog = cv2.HOGDescriptor(winSize, blockSize, blockStride, cellSize, nbins)</span><br><span class="line"></span><br><span class="line">        self._cos_win = np.hamming(self._tmpl_sz[<span class="number">0</span>]).reshape(self._tmpl_sz[<span class="number">0</span>], <span class="number">1</span>) @ \</span><br><span class="line">                        np.hamming(self._tmpl_sz[<span class="number">0</span>]).reshape(<span class="number">1</span>, self._tmpl_sz[<span class="number">0</span>])</span><br><span class="line">        self._cos_win = self._cos_win[..., np.newaxis]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linear_correlation</span>(<span class="params">self, x1, x2</span>):</span></span><br><span class="line">        res = x1 * x2.conjugate()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createGaussianPeak</span>(<span class="params">self, sizey, sizex</span>):</span></span><br><span class="line">        syh, sxh = sizey / <span class="number">2</span>, sizex / <span class="number">2</span></span><br><span class="line">        output_sigma = np.sqrt(sizex * sizey) / self.padding * self.output_sigma_factor</span><br><span class="line">        mult = -<span class="number">0.5</span> / (output_sigma * output_sigma)</span><br><span class="line">        y, x = np.ogrid[<span class="number">0</span>:sizey, <span class="number">0</span>:sizex]</span><br><span class="line">        y, x = (y - syh) ** <span class="number">2</span>, (x - sxh) ** <span class="number">2</span></span><br><span class="line">        gaussian_res = np.exp(mult * (y + x))</span><br><span class="line">        <span class="keyword">return</span> np.fft.fft2(gaussian_res)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subPixelPeak</span>(<span class="params">self, left, center, right</span>):</span></span><br><span class="line">        divisor = <span class="number">2</span> * center - right - left  <span class="comment"># float</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="number">0</span> <span class="keyword">if</span> <span class="built_in">abs</span>(divisor) &lt; <span class="number">1e-3</span> <span class="keyword">else</span> <span class="number">0.5</span> * (right - left) / divisor)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFeatures</span>(<span class="params">self, image, roi, needed_size</span>):</span></span><br><span class="line">        roi = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, roi))  <span class="comment"># ensure that everything is int</span></span><br><span class="line">        z = subwindow(image, roi, cv2.BORDER_REPLICATE)  <span class="comment"># sample a image patch</span></span><br><span class="line">        <span class="keyword">if</span> z.shape[<span class="number">1</span>] != needed_size[<span class="number">0</span>] <span class="keyword">or</span> z.shape[<span class="number">0</span>] != needed_size[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">if</span> self.ishog:</span><br><span class="line">                z = cv2.resize(z, <span class="built_in">tuple</span>(needed_size * <span class="number">4</span>))  <span class="comment"># resize to template size</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                z = cv2.resize(z, <span class="built_in">tuple</span>(needed_size)) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.ishog:</span><br><span class="line">            FeaturesMap = self.hog.compute(z).reshape(needed_size[<span class="number">0</span>], needed_size[<span class="number">1</span>], -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># if z.ndim == 3 and z.shape[2] == 3:</span></span><br><span class="line">            <span class="comment">#    FeaturesMap = cv2.cvtColor(z, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line">            <span class="comment"># elif z.ndim == 2:</span></span><br><span class="line">            FeaturesMap = z  <span class="comment"># (size_patch[0],size_patch[1]) #np.int8 #0~255</span></span><br><span class="line">            FeaturesMap = FeaturesMap.astype(np.float32) / <span class="number">255.0</span> - <span class="number">0.5</span></span><br><span class="line">        FeaturesMap = FeaturesMap * self._cos_win</span><br><span class="line">        <span class="keyword">return</span> FeaturesMap</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">track</span>(<span class="params">self, search_region, img</span>):</span> </span><br><span class="line">        global_max = <span class="number">0</span></span><br><span class="line">        global_loc = []</span><br><span class="line">        ind_s = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> it_s <span class="keyword">in</span> self._scale_pool:</span><br><span class="line">            search_region_s = <span class="built_in">list</span>(search_region)</span><br><span class="line">            search_region_s[<span class="number">2</span>] = search_region[<span class="number">2</span>] * it_s</span><br><span class="line">            search_region_s[<span class="number">3</span>] = search_region[<span class="number">3</span>] * it_s</span><br><span class="line">            search_region_s = <span class="built_in">map</span>(<span class="built_in">float</span>, search_region_s)</span><br><span class="line">            s_patch = self.getFeatures(img, search_region_s, self._tmpl_sz)  <span class="comment"># sample the search patch</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># patch=self.getFeatures(img,search_region,self._tmpl_sz)</span></span><br><span class="line">            F_new = np.fft.fft2(s_patch, axes=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            res = F_new * self._tmpl</span><br><span class="line">            res = np.fft.ifft2(res, axes=(<span class="number">0</span>, <span class="number">1</span>)).real</span><br><span class="line">            res = np.<span class="built_in">sum</span>(res, axis=<span class="number">2</span>)</span><br><span class="line">            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> max_val &gt; global_max:</span><br><span class="line">                global_max = max_val</span><br><span class="line">                global_loc = max_loc</span><br><span class="line">                ind_s = it_s</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> global_loc[<span class="number">0</span>], global_loc[<span class="number">1</span>], ind_s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_model</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        F_new = np.fft.fft2(x, axes=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        new_tmp = self.linear_correlation(self.G, F_new) / (self.linear_correlation(F_new, F_new) + self.lambdar)</span><br><span class="line">        self._tmpl = (<span class="number">1</span> - self._interp_factor) * self._tmpl + self._interp_factor * new_tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">self, roi, image</span>):</span></span><br><span class="line">        self._roi = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, roi))</span><br><span class="line">        <span class="keyword">assert</span> (roi[<span class="number">2</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> roi[<span class="number">3</span>] &gt; <span class="number">0</span>)</span><br><span class="line">        self.G = self.createGaussianPeak(self._tmpl_sz[<span class="number">0</span>], self._tmpl_sz[<span class="number">1</span>])</span><br><span class="line">        self.G = self.G[..., np.newaxis]</span><br><span class="line"></span><br><span class="line">        cx = self._roi[<span class="number">0</span>] + self._roi[<span class="number">2</span>] / <span class="number">2.</span></span><br><span class="line">        cy = self._roi[<span class="number">1</span>] + self._roi[<span class="number">3</span>] / <span class="number">2.</span></span><br><span class="line">        search_rect = [cx - self._roi[<span class="number">2</span>], cy - self._roi[<span class="number">3</span>], self._roi[<span class="number">2</span>] * <span class="number">2</span>, self._roi[<span class="number">3</span>] * <span class="number">2</span>]</span><br><span class="line">        f = self.getFeatures(image, search_rect, self._tmpl_sz)</span><br><span class="line">        F = np.fft.fft2(f, axes=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        self._tmpl = self.linear_correlation(self.G, F) / (self.linear_correlation(F, F) + self.lambdar)</span><br><span class="line">        <span class="built_in">print</span>(self._tmpl.shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, image</span>):</span></span><br><span class="line">        <span class="comment"># some check boundary here</span></span><br><span class="line">        <span class="keyword">if</span> (self._roi[<span class="number">0</span>] + self._roi[<span class="number">2</span>] &lt;= <span class="number">0</span>):  self._roi[<span class="number">0</span>] = -self._roi[<span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (self._roi[<span class="number">1</span>] + self._roi[<span class="number">3</span>] &lt;= <span class="number">0</span>):  self._roi[<span class="number">1</span>] = -self._roi[<span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (self._roi[<span class="number">0</span>] &gt;= image.shape[<span class="number">1</span>] - <span class="number">1</span>):  self._roi[<span class="number">0</span>] = image.shape[<span class="number">1</span>] - <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (self._roi[<span class="number">1</span>] &gt;= image.shape[<span class="number">0</span>] - <span class="number">1</span>):  self._roi[<span class="number">1</span>] = image.shape[<span class="number">0</span>] - <span class="number">2</span></span><br><span class="line">        <span class="comment"># center position of our target</span></span><br><span class="line">        cx = self._roi[<span class="number">0</span>] + self._roi[<span class="number">2</span>] / <span class="number">2.</span></span><br><span class="line">        cy = self._roi[<span class="number">1</span>] + self._roi[<span class="number">3</span>] / <span class="number">2.</span></span><br><span class="line">        <span class="comment"># we double the searching region compared to the selected region</span></span><br><span class="line">        search_rect = [cx - self._roi[<span class="number">2</span>], cy - self._roi[<span class="number">3</span>], self._roi[<span class="number">2</span>] * <span class="number">2</span>, self._roi[<span class="number">3</span>] * <span class="number">2</span>]</span><br><span class="line">        <span class="comment"># the delta in search region</span></span><br><span class="line">        loc_pos = self.track(search_rect, image)</span><br><span class="line">        <span class="built_in">print</span>(loc_pos)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># delta_x and delta_y we want to estimate</span></span><br><span class="line">        delta = (np.array(loc_pos[:<span class="number">2</span>]) - self._tmpl_sz / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># scale between the search_roi and our template</span></span><br><span class="line">        scale = loc_pos[<span class="number">2</span>] * np.array(search_rect[<span class="number">2</span>:]).astype(<span class="built_in">float</span>) / (np.array(self._tmpl_sz) * <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># back to the original size</span></span><br><span class="line">        delta = delta * scale</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add the delta to original position</span></span><br><span class="line">        self._roi[<span class="number">0</span>] = self._roi[<span class="number">0</span>] + delta[<span class="number">0</span>]</span><br><span class="line">        self._roi[<span class="number">1</span>] = self._roi[<span class="number">1</span>] + delta[<span class="number">1</span>]</span><br><span class="line">        self._roi[<span class="number">2</span>] = self._roi[<span class="number">2</span>] * loc_pos[<span class="number">2</span>]</span><br><span class="line">        self._roi[<span class="number">3</span>] = self._roi[<span class="number">3</span>] * loc_pos[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># some check boundary here</span></span><br><span class="line">        <span class="keyword">if</span> self._roi[<span class="number">0</span>] &gt;= image.shape[<span class="number">1</span>] - <span class="number">1</span>:  self._roi[<span class="number">0</span>] = image.shape[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._roi[<span class="number">1</span>] &gt;= image.shape[<span class="number">0</span>] - <span class="number">1</span>:  self._roi[<span class="number">1</span>] = image.shape[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._roi[<span class="number">0</span>] + self._roi[<span class="number">2</span>] &lt;= <span class="number">0</span>:  self._roi[<span class="number">0</span>] = -self._roi[<span class="number">2</span>] + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> self._roi[<span class="number">1</span>] + self._roi[<span class="number">3</span>] &lt;= <span class="number">0</span>:  self._roi[<span class="number">1</span>] = -self._roi[<span class="number">3</span>] + <span class="number">2</span></span><br><span class="line">        <span class="keyword">assert</span> (self._roi[<span class="number">2</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> self._roi[<span class="number">3</span>] &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        cx = cy = self._roi[<span class="number">0</span>] + self._roi[<span class="number">2</span>] / <span class="number">2.</span></span><br><span class="line">        cy = self._roi[<span class="number">1</span>] + self._roi[<span class="number">3</span>] / <span class="number">2.</span></span><br><span class="line">        search_rect = [cx - self._roi[<span class="number">2</span>], cy - self._roi[<span class="number">3</span>], self._roi[<span class="number">2</span>] * <span class="number">2</span>, self._roi[<span class="number">3</span>] * <span class="number">2</span>]</span><br><span class="line">        <span class="comment"># update the template</span></span><br><span class="line">        x = self.getFeatures(image, self._roi, self._tmpl_sz)  <span class="comment"># new observation</span></span><br><span class="line">        self.update_model(x)</span><br><span class="line">        <span class="keyword">return</span> self._roi</span><br></pre></td></tr></table></figure><h4 id="四、测试结果"><a href="#四、测试结果" class="headerlink" title="四、测试结果"></a>四、测试结果</h4><p><div class="bilibili">    <iframe src="//player.bilibili.com/player.html?bvid=BV1wf4y1Y7xk&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div></p><h4 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a><strong>五、结果分析</strong></h4><p>对于运动速度较慢的物体追踪效果好，速度越快效果越差，遇到遮挡物会受到影响。</p><h4 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a><strong>六、参考资料</strong></h4><ul><li>MOSSE：<a href="https://www.cs.colostate.edu/~draper/papers/bolme_cvpr10.pdf">https://www.cs.colostate.edu/~draper/papers/bolme_cvpr10.pdf</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Correlation-Filter-based-tracker（相关滤波器）&quot;&gt;&lt;a href=&quot;#Correlation-Filter-based-tracker（相关滤波器）&quot; class=&quot;headerlink&quot; title=&quot;Correlation Fi</summary>
      
    
    
    
    <category term="Tracker" scheme="http://10185102110.github.io/categories/Tracker/"/>
    
    
    <category term="Tracker" scheme="http://10185102110.github.io/tags/Tracker/"/>
    
  </entry>
  
  <entry>
    <title>JDBC数据库操作</title>
    <link href="http://10185102110.github.io/2021/05/11/JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93-Mysql/"/>
    <id>http://10185102110.github.io/2021/05/11/JDBC%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93-Mysql/</id>
    <published>2021-05-11T10:16:36.000Z</published>
    <updated>2021-05-12T07:25:17.141Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDBC连接数据库-Mysql"><a href="#JDBC连接数据库-Mysql" class="headerlink" title="JDBC连接数据库(Mysql)"></a>JDBC连接数据库(Mysql)</h4><ol><li><p>下载JDBC驱动包：mysql-connector-java-8.0.16.jar</p></li><li><p>右键java项目——&gt;Build Path——&gt;Add External Archives——&gt;选择1中文件</p></li><li>打开项目中的module-info.java文件，在括号中添加requires java.sql;</li></ol><p><img src="1.png" alt=""></p><ol><li>测试代码</li></ol><ul><li>select</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">my</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">             <span class="comment">//MySQL8.0以上版本 com.mysql.jdbc.Driver 更换为 com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;加载数据库驱动时抛出异常！&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/bank?serverTimezone=UTC&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">             <span class="comment">//serverTimezone=UTC用来解决数据库和系统时区差异引起的问题</span></span><br><span class="line">    String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    stmt = conn.createStatement();</span><br><span class="line">    String sql = <span class="string">&quot;select * from officer&quot;</span>;</span><br><span class="line">    rs = stmt.executeQuery(sql);</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String f,l;</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">    id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    f = rs.getString(<span class="number">3</span>);</span><br><span class="line">    l = rs.getString(<span class="number">4</span>);</span><br><span class="line">    System.out.println(id+<span class="string">&quot; &quot;</span>+l+f);</span><br><span class="line">    &#125;</span><br><span class="line">    rs.close();</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException ex)&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>insert</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">my</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;加载数据库驱动时抛出异常！&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/bank?serverTimezone=UTC&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    String sql = <span class="string">&quot;insert into customer(CUST_ID,ADDRESS,CITY,CUST_TYPE_CD,PROVICIAL_REGION,POSTAL_CODE)values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">    PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">    pstmt.setString(<span class="number">1</span>, <span class="string">&quot;14&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">2</span>, <span class="string">&quot;浙江省杭州市滨江区网商路599号网易大厦&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">3</span>, <span class="string">&quot;杭州市&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">4</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">5</span>, <span class="string">&quot;浙江省&quot;</span>);</span><br><span class="line">    pstmt.setString(<span class="number">6</span>, <span class="string">&quot;310052&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> temp = pstmt.executeUpdate();</span><br><span class="line">    <span class="keyword">if</span>(temp!=<span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;记录添加成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;记录添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pstmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException ex)&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>update</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">my</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;加载数据库驱动时抛出异常！&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/bank?serverTimezone=UTC&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    Statement stmt = conn.createStatement();</span><br><span class="line">    String sql = <span class="string">&quot;update customer set CUST_TYPE_CD=&#x27;B&#x27; where ADDRESS=&#x27;上海市南京西路11号1021室&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = stmt.executeUpdate(sql);</span><br><span class="line">    <span class="keyword">if</span>(temp!=<span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;记录修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;记录修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException ex)&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JDBC连接数据库(Mysql)</summary>
    
    
    
    <category term="MySQL" scheme="http://10185102110.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://10185102110.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql无密码登录与修改密码</title>
    <link href="http://10185102110.github.io/2021/05/11/Mysql%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/"/>
    <id>http://10185102110.github.io/2021/05/11/Mysql%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</id>
    <published>2021-05-11T10:16:36.000Z</published>
    <updated>2021-05-12T07:23:21.296Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mysql无密码登录与修改密码"><a href="#Mysql无密码登录与修改密码" class="headerlink" title="Mysql无密码登录与修改密码"></a>Mysql无密码登录与修改密码</h4><ol><li>打开cmd，cd到mysql安装目录的bin文件夹</li><li>运行 net stop mysql</li><li>运行 mysqld —console —skip-grant-tables —shared-memory</li><li>此时该窗口如图，重新打开一个新的cmd窗口</li></ol><p><img src="2.png" alt=""></p><ol><li>运行 mysql</li><li>运行 use mysql</li><li>运行 flush privileges;</li><li>运行 ALTER user ‘root’@’localhost’ IDENTIFIED BY ‘123456’;</li><li>运行 flush privileges;</li><li>运行 exit</li><li>运行 net start mysql</li><li>重新登录，mysql -u root -p</li></ol><p><img src="1.png" alt=""></p>]]></content>
    
    
    <summary type="html">Mysql无密码登录与修改密码</summary>
    
    
    
    <category term="MySQL" scheme="http://10185102110.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="http://10185102110.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://10185102110.github.io/2021/05/07/hexo/"/>
    <id>http://10185102110.github.io/2021/05/07/hexo/</id>
    <published>2021-05-07T15:33:36.000Z</published>
    <updated>2021-07-12T09:52:26.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo基础操作"><a href="#Hexo基础操作" class="headerlink" title="Hexo基础操作"></a>Hexo基础操作</h2><h3 id="一、hexo命令行"><a href="#一、hexo命令行" class="headerlink" title="一、hexo命令行"></a>一、hexo命令行</h3><ol><li><h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new 文章名 <span class="comment">#新建文章</span></span><br><span class="line">hexo g <span class="comment"># 生成页面</span></span><br><span class="line">hexo s <span class="comment"># 本地预览</span></span><br><span class="line">hexo d <span class="comment"># 上传页面</span></span><br><span class="line">hexo g -d <span class="comment">#一步完成</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h5></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">手动删除文件</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h3 id="二、文章内容"><a href="#二、文章内容" class="headerlink" title="二、文章内容"></a>二、文章内容</h3><ol><li><h5 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h5></li></ol><p>在想要隐藏的位置加入代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><ol><li><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5></li></ol><ul><li><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p></li><li><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line"><span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line"><span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line"><span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">  <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>打开_config.yml文件，修改下述内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>将图片放到生成的同名文件夹中，引用时 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](img.png)</span><br></pre></td></tr></table></figure></li></ul><ol><li><h5 id="插入B站视频"><a href="#插入B站视频" class="headerlink" title="插入B站视频"></a>插入B站视频</h5></li></ol><ul><li><p>在\themes\Butterfly\source\css 创建文件 bilibili.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*哔哩哔哩视频适配*/</span></span><br><span class="line"><span class="selector-class">.bilibili</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;              <span class="comment">/*高度设置这里无效，设置为0，用padding撑开div*/</span></span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">75%</span>;    <span class="comment">/*68%到80%都可以*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bilibili</span> <span class="selector-tag">iframe</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主题配置文件中搜索 inject，在 head 下添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/bilibili.css&quot;&gt;</span>  </span><br></pre></td></tr></table></figure></li><li><p>在文章中添加代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bilibili&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?bvid=番号(例如BV1wf4y1Y7xk)<span class="symbol">&amp;amp;</span>page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><h5 id="按钮：点击显示文本"><a href="#按钮：点击显示文本" class="headerlink" title="按钮：点击显示文本"></a>按钮：点击显示文本</h5></li></ol><ul><li><p>行内</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br><span class="line"><span class="section">#例如</span></span><br><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装酷(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line">门里站着一個人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>content: 文本内容</p><p>display: 按钮显示的文字(可选)</p><p>bg: 按钮背景颜色(可选)</p><p>color: 按钮文字颜色(可选)</p></li></ul><ol><li><h5 id="开启-mathjax-数学公式渲染"><a href="#开启-mathjax-数学公式渲染" class="headerlink" title="开启 mathjax 数学公式渲染"></a>开启 mathjax 数学公式渲染</h5></li></ol><ul><li><p>卸载 hexo默认引擎 marked，安装 kramed</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>更改 /node_modules/hexo-renderer-kramed/lib/renderer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed&#x27;s rule: $$ + \1 + $$</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\$(.*?)\$`/g</span>, <span class="string">&#x27;$$$$$1$$$$&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>卸载 hexo-math，安装 hexo-renderer-mathjax</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-math --save</span><br><span class="line">npm install hexo-renderer-mathjax --save</span><br></pre></td></tr></table></figure></li><li><p>更改默认转移规则，/node_modules/kramed/lib/rules/nline.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换11行</span></span><br><span class="line"><span class="attr">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br><span class="line"><span class="comment">//替换20行</span></span><br><span class="line">em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure></li><li><p>开启 mathjax，修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">perpage:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>修改 /node_modules/hexo-renderer-mathjax/mathjax.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 更新cdn</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在文章中使用 mathjax，声明 mathjax: true</p></li></ul><h3 id="三、主题配置"><a href="#三、主题配置" class="headerlink" title="三、主题配置"></a>三、主题配置</h3><ol><li><h5 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h5></li></ol><ul><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>hexo配置文件添加代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><h5 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h5></li></ol><ul><li><p>在 /source/_data/link.yml 中添加代码，格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">姓名</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">链接</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">图片</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">签名</span></span><br><span class="line">    <span class="attr">2:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">姓名</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">链接</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">图片</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">签名</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><h5 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h5></li></ol><ul><li><p>内容见 /source/_data/butterfly.yml</p></li><li><p>打字特效见主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖动特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"> <span class="comment"># 如果有英文逗号&#x27; , &#x27;,使用转义字元 &amp;#44;</span></span><br><span class="line"> <span class="comment"># 如果有英文双引号&#x27; &quot; &#x27;,使用转义字元 &amp;quot;</span></span><br><span class="line"> <span class="comment"># 开头不允許转义字元，如需要，請把整个句子用双引号包住</span></span><br><span class="line"> <span class="comment"># 如果关闭打字效果，subtitle只会显示sub的第一行文字</span></span><br></pre></td></tr></table></figure></li><li><p>字体大小颜色</p><p>见 \themes\butterfly\source\css\_layout\head.styl</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#site-subtitle</span></span><br><span class="line">    <span class="attribute">color</span>: var(--white)   #此处修改为白色</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.05em</span>     #字体大小</span><br><span class="line"></span><br><span class="line">    +minWidth768()</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.40em</span>   #字体大小</span><br></pre></td></tr></table></figure></li></ul><ol><li><h5 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h5></li></ol><ul><li>主页的顶部图可以在 Butterfly.yml 设置 index_img</li><li>归档页的顶部图可以在 Butterfly.yml 设置 archive_img</li><li>其他标签页的顶部图可以在 md 页面设置 front-matter 中的 top_img</li></ul><ol><li><h5 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h5></li></ol><ul><li><p>picture.md 中添加代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">#例如</span><br><span class="line">&#123;% galleryGroup &#x27;Genshin Impact&#x27; &#x27;关于&#x27; &#x27;https://imgtu.com/album/rbLk9&#x27; https://imgtu.com/i/gw6a6A %&#125;</span><br></pre></td></tr></table></figure><p>name：相册名字<br>description：相册描述<br>link：相册地址<br>img-url：相册封面</p></li></ul><ol><li><h5 id="页面加载动画"><a href="#页面加载动画" class="headerlink" title="页面加载动画"></a>页面加载动画</h5></li></ol><ul><li><p>主题配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载动画 Loading Animation</span></span><br><span class="line"><span class="attr">preloader:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Typora符号"><a href="#Typora符号" class="headerlink" title="Typora符号"></a>Typora符号</h1><p><img src="1.png" alt="1"></p><p><img src="2.png" alt="2"></p><p><img src="3.png" alt="3"></p><p><img src="4.png" alt="4"></p>]]></content>
    
    
    <summary type="html">Hexo基础操作</summary>
    
    
    
    <category term="Hexo" scheme="http://10185102110.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://10185102110.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
